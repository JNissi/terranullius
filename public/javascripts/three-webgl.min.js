// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{REVISION:"53"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};self.Int32Array=self.Int32Array||Array;self.Float32Array=self.Float32Array||Array;String.prototype.startsWith=String.prototype.startsWith||function(a){return this.slice(0,a.length)===a};String.prototype.endsWith=String.prototype.endsWith||function(a){var a=String(a),b=this.lastIndexOf(a);return(-1<b&&b)===this.length-a.length};
String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];void 0===window.requestAnimationFrame&&(window.requestAnimationFrame=function(b){var c=Date.now(),f=Math.max(0,16-(c-a)),h=window.setTimeout(function(){b(c+f)},f);a=c+f;return h});window.cancelAnimationFrame=window.cancelAnimationFrame||
function(a){window.clearTimeout(a)}})();THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;
THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};
THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;
THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype.start=function(){this.oldTime=this.startTime=Date.now();this.running=!0};THREE.Clock.prototype.stop=function(){this.getElapsedTime();this.running=!1};THREE.Clock.prototype.getElapsedTime=function(){return this.elapsedTime+=this.getDelta()};THREE.Clock.prototype.getDelta=function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=Date.now(),a=0.0010*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a};
THREE.Color=function(a){void 0!==a&&this.setHex(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);
this.b=Math.sqrt(this.b);return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSV:function(a,b,c){var d,e,f;0===c?this.r=this.g=this.b=0:(d=Math.floor(6*a),e=6*a-d,a=c*(1-b),f=c*(1-b*e),b=c*(1-b*(1-e)),0===d?(this.r=c,this.g=b,this.b=a):1===d?(this.r=f,this.g=c,this.b=a):2===d?(this.r=a,this.g=c,this.b=b):3===d?(this.r=a,this.g=f,this.b=c):4===d?(this.r=b,this.g=a,this.b=c):5===d&&(this.r=c,this.g=a,this.b=f));return this},getHex:function(){return 255*this.r<<16^255*this.g<<
8^255*this.b<<0},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getContextStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},setContextStyle:function(a){a=/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/i.exec(a);this.r=parseInt(a[1],10)/255;this.g=parseInt(a[2],10)/255;this.b=parseInt(a[3],10)/255;return this},getHSV:function(a){var b=
this.r,c=this.g,d=this.b,e=Math.max(Math.max(b,c),d),f=Math.min(Math.min(b,c),d);if(f===e)f=b=0;else{var h=e-f,f=h/e,b=(b===e?(c-d)/h:c===e?2+(d-b)/h:4+(b-c)/h)/6;0>b&&(b+=1);1<b&&(b-=1)}void 0===a&&(a={h:0,s:0,v:0});a.h=b;a.s=f;a.v=e;return a},lerpSelf:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a):this.set(0,
0);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*b+a*a},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,
b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},
sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},multiply:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},multiplySelf:function(a){this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},divideSelf:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a):
this.z=this.y=this.x=0;return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.lengthSq())},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,b){this.x+=
(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},crossSelf:function(a){var b=this.x,c=this.y,d=this.z;this.x=c*a.z-d*a.y;this.y=d*a.x-b*a.z;this.z=b*a.y-c*a.x;return this},angleTo:function(a){return Math.acos(this.dot(a)/this.length()/a.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){return(new THREE.Vector3).sub(this,
a).lengthSq()},getPositionFromMatrix:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setEulerFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],f=d[4],h=d[8],j=d[1],i=d[5],k=d[9],l=d[2],o=d[6],d=d[10];void 0===b||"XYZ"===b?(this.y=Math.asin(c(h)),0.99999>Math.abs(h)?(this.x=Math.atan2(-k,d),this.z=Math.atan2(-f,e)):(this.x=Math.atan2(o,i),this.z=0)):"YXZ"===b?(this.x=Math.asin(-c(k)),0.99999>Math.abs(k)?
(this.y=Math.atan2(h,d),this.z=Math.atan2(j,i)):(this.y=Math.atan2(-l,e),this.z=0)):"ZXY"===b?(this.x=Math.asin(c(o)),0.99999>Math.abs(o)?(this.y=Math.atan2(-l,d),this.z=Math.atan2(-f,i)):(this.y=0,this.z=Math.atan2(j,e))):"ZYX"===b?(this.y=Math.asin(-c(l)),0.99999>Math.abs(l)?(this.x=Math.atan2(o,d),this.z=Math.atan2(j,e)):(this.x=0,this.z=Math.atan2(-f,i))):"YZX"===b?(this.z=Math.asin(c(j)),0.99999>Math.abs(j)?(this.x=Math.atan2(-k,i),this.y=Math.atan2(-l,e)):(this.x=0,this.y=Math.atan2(h,d))):
"XZY"===b&&(this.z=Math.asin(-c(f)),0.99999>Math.abs(f)?(this.x=Math.atan2(o,i),this.y=Math.atan2(h,e)):(this.x=Math.atan2(-k,d),this.y=0));return this},setEulerFromQuaternion:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.x*a.x,e=a.y*a.y,f=a.z*a.z,h=a.w*a.w;void 0===b||"XYZ"===b?(this.x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-d-e+f),this.y=Math.asin(c(2*(a.x*a.z+a.y*a.w))),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+d-e-f)):"YXZ"===b?(this.x=Math.asin(c(2*(a.x*a.w-a.y*a.z))),this.y=Math.atan2(2*
(a.x*a.z+a.y*a.w),h-d-e+f),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-d+e-f)):"ZXY"===b?(this.x=Math.asin(c(2*(a.x*a.w+a.y*a.z))),this.y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-d-e+f),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-d+e-f)):"ZYX"===b?(this.x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-d-e+f),this.y=Math.asin(c(2*(a.y*a.w-a.x*a.z))),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+d-e-f)):"YZX"===b?(this.x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-d+e-f),this.y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+d-e-f),this.z=Math.asin(c(2*(a.x*a.y+
a.z*a.w)))):"XZY"===b&&(this.x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-d+e-f),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+d-e-f),this.z=Math.asin(c(2*(a.z*a.w-a.x*a.y))));return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length(),a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},
clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},subSelf:function(a){this.x-=
a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSq())},lengthManhattan:function(){return Math.abs(this.x)+
Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):
(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d,a=a.elements,e=a[0];d=a[4];var f=a[8],h=a[1],j=a[5],i=a[9];c=a[2];b=a[6];var k=a[10];if(0.01>Math.abs(d-h)&&0.01>Math.abs(f-c)&&0.01>Math.abs(i-b)){if(0.1>Math.abs(d+h)&&0.1>Math.abs(f+c)&&0.1>Math.abs(i+b)&&0.1>Math.abs(e+j+k-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;j=(j+1)/2;k=(k+1)/2;d=(d+h)/4;f=(f+c)/4;i=(i+b)/4;e>j&&e>k?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=f/
b):j>k?0.01>j?(b=0.707106781,c=0,d=0.707106781):(c=Math.sqrt(j),b=d/c,d=i/c):0.01>k?(c=b=0.707106781,d=0):(d=Math.sqrt(k),b=f/d,c=i/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-i)*(b-i)+(f-c)*(f-c)+(h-d)*(h-d));0.0010>Math.abs(a)&&(a=1);this.x=(b-i)/a;this.y=(f-c)/a;this.z=(h-d)/a;this.w=Math.acos((e+j+k-1)/2);return this}};THREE.Matrix3=function(){this.elements=new Float32Array(9)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,multiplyVector3:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;a.x=b[0]*c+b[3]*d+b[6]*e;a.y=b[1]*c+b[4]*d+b[7]*e;a.z=b[2]*c+b[5]*d+b[8]*e;return a},multiplyVector3Array:function(a){for(var b=THREE.Matrix3.__v1,c=0,d=a.length;c<d;c+=3)b.x=a[c],b.y=a[c+1],b.z=a[c+2],this.multiplyVector3(b),a[c]=b.x,a[c+1]=b.y,a[c+2]=b.z;return a},getInverse:function(a){var b=a.elements,a=b[10]*b[5]-b[6]*b[9],c=-b[10]*b[1]+b[2]*b[9],d=b[6]*b[1]-b[2]*b[5],e=-b[10]*
b[4]+b[6]*b[8],f=b[10]*b[0]-b[2]*b[8],h=-b[6]*b[0]+b[2]*b[4],j=b[9]*b[4]-b[5]*b[8],i=-b[9]*b[0]+b[1]*b[8],k=b[5]*b[0]-b[1]*b[4],b=b[0]*a+b[1]*e+b[2]*j;0===b&&console.warn("Matrix3.getInverse(): determinant == 0");var b=1/b,l=this.elements;l[0]=b*a;l[1]=b*c;l[2]=b*d;l[3]=b*e;l[4]=b*f;l[5]=b*h;l[6]=b*j;l[7]=b*i;l[8]=b*k;return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},transposeIntoArray:function(a){var b=this.m;
a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this}};THREE.Matrix3.__v1=new THREE.Vector3;THREE.Matrix4=function(a,b,c,d,e,f,h,j,i,k,l,o,n,u,m,v){this.elements=new Float32Array(16);this.set(void 0!==a?a:1,b||0,c||0,d||0,e||0,void 0!==f?f:1,h||0,j||0,i||0,k||0,void 0!==l?l:1,o||0,n||0,u||0,m||0,void 0!==v?v:1)};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,h,j,i,k,l,o,n,u,m,v){var r=this.elements;r[0]=a;r[4]=b;r[8]=c;r[12]=d;r[1]=e;r[5]=f;r[9]=h;r[13]=j;r[2]=i;r[6]=k;r[10]=l;r[14]=o;r[3]=n;r[7]=u;r[11]=m;r[15]=v;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]);return this},lookAt:function(a,b,c){var d=this.elements,
e=THREE.Matrix4.__v1,f=THREE.Matrix4.__v2,h=THREE.Matrix4.__v3;h.sub(a,b).normalize();0===h.length()&&(h.z=1);e.cross(c,h).normalize();0===e.length()&&(h.x+=1E-4,e.cross(c,h).normalize());f.cross(h,e);d[0]=e.x;d[4]=f.x;d[8]=h.x;d[1]=e.y;d[5]=f.y;d[9]=h.y;d[2]=e.z;d[6]=f.z;d[10]=h.z;return this},multiply:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],h=c[4],j=c[8],i=c[12],k=c[1],l=c[5],o=c[9],n=c[13],u=c[2],m=c[6],v=c[10],r=c[14],p=c[3],A=c[7],x=c[11],c=c[15],t=d[0],G=d[4],C=d[8],
w=d[12],y=d[1],D=d[5],R=d[9],H=d[13],$=d[2],B=d[6],K=d[10],E=d[14],O=d[3],X=d[7],Y=d[11],d=d[15];e[0]=f*t+h*y+j*$+i*O;e[4]=f*G+h*D+j*B+i*X;e[8]=f*C+h*R+j*K+i*Y;e[12]=f*w+h*H+j*E+i*d;e[1]=k*t+l*y+o*$+n*O;e[5]=k*G+l*D+o*B+n*X;e[9]=k*C+l*R+o*K+n*Y;e[13]=k*w+l*H+o*E+n*d;e[2]=u*t+m*y+v*$+r*O;e[6]=u*G+m*D+v*B+r*X;e[10]=u*C+m*R+v*K+r*Y;e[14]=u*w+m*H+v*E+r*d;e[3]=p*t+A*y+x*$+c*O;e[7]=p*G+A*D+x*B+c*X;e[11]=p*C+A*R+x*K+c*Y;e[15]=p*w+A*H+x*E+c*d;return this},multiplySelf:function(a){return this.multiply(this,
a)},multiplyToArray:function(a,b,c){var d=this.elements;this.multiply(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){var b=this.elements,
c=a.x,d=a.y,e=a.z,f=1/(b[3]*c+b[7]*d+b[11]*e+b[15]);a.x=(b[0]*c+b[4]*d+b[8]*e+b[12])*f;a.y=(b[1]*c+b[5]*d+b[9]*e+b[13])*f;a.z=(b[2]*c+b[6]*d+b[10]*e+b[14])*f;return a},multiplyVector4:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w;a.x=b[0]*c+b[4]*d+b[8]*e+b[12]*f;a.y=b[1]*c+b[5]*d+b[9]*e+b[13]*f;a.z=b[2]*c+b[6]*d+b[10]*e+b[14]*f;a.w=b[3]*c+b[7]*d+b[11]*e+b[15]*f;return a},multiplyVector3Array:function(a){for(var b=THREE.Matrix4.__v1,c=0,d=a.length;c<d;c+=3)b.x=a[c],b.y=a[c+1],b.z=a[c+2],
this.multiplyVector3(b),a[c]=b.x,a[c+1]=b.y,a[c+2]=b.z;return a},rotateAxis:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;a.x=c*b[0]+d*b[4]+e*b[8];a.y=c*b[1]+d*b[5]+e*b[9];a.z=c*b[2]+d*b[6]+e*b[10];a.normalize();return a},crossVector:function(a){var b=this.elements,c=new THREE.Vector4;c.x=b[0]*a.x+b[4]*a.y+b[8]*a.z+b[12]*a.w;c.y=b[1]*a.x+b[5]*a.y+b[9]*a.z+b[13]*a.w;c.z=b[2]*a.x+b[6]*a.y+b[10]*a.z+b[14]*a.w;c.w=a.w?b[3]*a.x+b[7]*a.y+b[11]*a.z+b[15]*a.w:1;return c},determinant:function(){var a=
this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],h=a[5],j=a[9],i=a[13],k=a[2],l=a[6],o=a[10],n=a[14],u=a[3],m=a[7],v=a[11],a=a[15];return e*j*l*u-d*i*l*u-e*h*o*u+c*i*o*u+d*h*n*u-c*j*n*u-e*j*k*m+d*i*k*m+e*f*o*m-b*i*o*m-d*f*n*m+b*j*n*m+e*h*k*v-c*i*k*v-e*f*l*v+b*i*l*v+c*f*n*v-b*h*n*v-d*h*k*a+c*j*k*a+d*f*l*a-b*j*l*a-c*f*o*a+b*h*o*a},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=
a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+
14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[12],a[13],a[14])},setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getColumnX:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[0],a[1],a[2])},getColumnY:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[4],a[5],a[6])},getColumnZ:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[8],a[9],a[10])},getInverse:function(a){var b=
this.elements,c=a.elements,d=c[0],e=c[4],f=c[8],h=c[12],j=c[1],i=c[5],k=c[9],l=c[13],o=c[2],n=c[6],u=c[10],m=c[14],v=c[3],r=c[7],p=c[11],c=c[15];b[0]=k*m*r-l*u*r+l*n*p-i*m*p-k*n*c+i*u*c;b[4]=h*u*r-f*m*r-h*n*p+e*m*p+f*n*c-e*u*c;b[8]=f*l*r-h*k*r+h*i*p-e*l*p-f*i*c+e*k*c;b[12]=h*k*n-f*l*n-h*i*u+e*l*u+f*i*m-e*k*m;b[1]=l*u*v-k*m*v-l*o*p+j*m*p+k*o*c-j*u*c;b[5]=f*m*v-h*u*v+h*o*p-d*m*p-f*o*c+d*u*c;b[9]=h*k*v-f*l*v-h*j*p+d*l*p+f*j*c-d*k*c;b[13]=f*l*o-h*k*o+h*j*u-d*l*u-f*j*m+d*k*m;b[2]=i*m*v-l*n*v+l*o*r-j*m*
r-i*o*c+j*n*c;b[6]=h*n*v-e*m*v-h*o*r+d*m*r+e*o*c-d*n*c;b[10]=e*l*v-h*i*v+h*j*r-d*l*r-e*j*c+d*i*c;b[14]=h*i*o-e*l*o-h*j*n+d*l*n+e*j*m-d*i*m;b[3]=k*n*v-i*u*v-k*o*r+j*u*r+i*o*p-j*n*p;b[7]=e*u*v-f*n*v+f*o*r-d*u*r-e*o*p+d*n*p;b[11]=f*i*v-e*k*v-f*j*r+d*k*r+e*j*p-d*i*p;b[15]=e*k*o-f*i*o+f*j*n-d*k*n-e*j*u+d*i*u;this.multiplyScalar(1/a.determinant());return this},setRotationFromEuler:function(a,b){var c=this.elements,d=a.x,e=a.y,f=a.z,h=Math.cos(d),d=Math.sin(d),j=Math.cos(e),e=Math.sin(e),i=Math.cos(f),f=
Math.sin(f);if(void 0===b||"XYZ"===b){var k=h*i,l=h*f,o=d*i,n=d*f;c[0]=j*i;c[4]=-j*f;c[8]=e;c[1]=l+o*e;c[5]=k-n*e;c[9]=-d*j;c[2]=n-k*e;c[6]=o+l*e;c[10]=h*j}else"YXZ"===b?(k=j*i,l=j*f,o=e*i,n=e*f,c[0]=k+n*d,c[4]=o*d-l,c[8]=h*e,c[1]=h*f,c[5]=h*i,c[9]=-d,c[2]=l*d-o,c[6]=n+k*d,c[10]=h*j):"ZXY"===b?(k=j*i,l=j*f,o=e*i,n=e*f,c[0]=k-n*d,c[4]=-h*f,c[8]=o+l*d,c[1]=l+o*d,c[5]=h*i,c[9]=n-k*d,c[2]=-h*e,c[6]=d,c[10]=h*j):"ZYX"===b?(k=h*i,l=h*f,o=d*i,n=d*f,c[0]=j*i,c[4]=o*e-l,c[8]=k*e+n,c[1]=j*f,c[5]=n*e+k,c[9]=
l*e-o,c[2]=-e,c[6]=d*j,c[10]=h*j):"YZX"===b?(k=h*j,l=h*e,o=d*j,n=d*e,c[0]=j*i,c[4]=n-k*f,c[8]=o*f+l,c[1]=f,c[5]=h*i,c[9]=-d*i,c[2]=-e*i,c[6]=l*f+o,c[10]=k-n*f):"XZY"===b&&(k=h*j,l=h*e,o=d*j,n=d*e,c[0]=j*i,c[4]=-f,c[8]=e*i,c[1]=k*f+n,c[5]=h*i,c[9]=l*f-o,c[2]=o*f-l,c[6]=d*i,c[10]=n*f+k);return this},setRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,h=c+c,j=d+d,i=e+e,a=c*h,k=c*j,c=c*i,l=d*j,d=d*i,e=e*i,h=f*h,j=f*j,f=f*i;b[0]=1-(l+e);b[4]=k-f;b[8]=c+j;b[1]=k+f;b[5]=1-(a+
e);b[9]=d-h;b[2]=c-j;b[6]=d+h;b[10]=1-(a+l);return this},compose:function(a,b,c){var d=this.elements,e=THREE.Matrix4.__m1,f=THREE.Matrix4.__m2;e.identity();e.setRotationFromQuaternion(b);f.makeScale(c.x,c.y,c.z);this.multiply(e,f);d[12]=a.x;d[13]=a.y;d[14]=a.z;return this},decompose:function(a,b,c){var d=this.elements,e=THREE.Matrix4.__v1,f=THREE.Matrix4.__v2,h=THREE.Matrix4.__v3;e.set(d[0],d[1],d[2]);f.set(d[4],d[5],d[6]);h.set(d[8],d[9],d[10]);a=a instanceof THREE.Vector3?a:new THREE.Vector3;b=
b instanceof THREE.Quaternion?b:new THREE.Quaternion;c=c instanceof THREE.Vector3?c:new THREE.Vector3;c.x=e.length();c.y=f.length();c.z=h.length();a.x=d[12];a.y=d[13];a.z=d[14];d=THREE.Matrix4.__m1;d.copy(this);d.elements[0]/=c.x;d.elements[1]/=c.x;d.elements[2]/=c.x;d.elements[4]/=c.y;d.elements[5]/=c.y;d.elements[6]/=c.y;d.elements[8]/=c.z;d.elements[9]/=c.z;d.elements[10]/=c.z;b.setFromRotationMatrix(d);return[a,b,c]},extractPosition:function(a){var b=this.elements,a=a.elements;b[12]=a[12];b[13]=
a[13];b[14]=a[14];return this},extractRotation:function(a){var b=this.elements,a=a.elements,c=THREE.Matrix4.__v1,d=1/c.set(a[0],a[1],a[2]).length(),e=1/c.set(a[4],a[5],a[6]).length(),c=1/c.set(a[8],a[9],a[10]).length();b[0]=a[0]*d;b[1]=a[1]*d;b[2]=a[2]*d;b[4]=a[4]*e;b[5]=a[5]*e;b[6]=a[6]*e;b[8]=a[8]*c;b[9]=a[9]*c;b[10]=a[10]*c;return this},translate:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[12]=b[0]*c+b[4]*d+b[8]*a+b[12];b[13]=b[1]*c+b[5]*d+b[9]*a+b[13];b[14]=b[2]*c+b[6]*d+b[10]*a+b[14];
b[15]=b[3]*c+b[7]*d+b[11]*a+b[15];return this},rotateX:function(a){var b=this.elements,c=b[4],d=b[5],e=b[6],f=b[7],h=b[8],j=b[9],i=b[10],k=b[11],l=Math.cos(a),a=Math.sin(a);b[4]=l*c+a*h;b[5]=l*d+a*j;b[6]=l*e+a*i;b[7]=l*f+a*k;b[8]=l*h-a*c;b[9]=l*j-a*d;b[10]=l*i-a*e;b[11]=l*k-a*f;return this},rotateY:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[8],j=b[9],i=b[10],k=b[11],l=Math.cos(a),a=Math.sin(a);b[0]=l*c-a*h;b[1]=l*d-a*j;b[2]=l*e-a*i;b[3]=l*f-a*k;b[8]=l*h+a*c;b[9]=l*j+a*d;b[10]=
l*i+a*e;b[11]=l*k+a*f;return this},rotateZ:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[4],j=b[5],i=b[6],k=b[7],l=Math.cos(a),a=Math.sin(a);b[0]=l*c+a*h;b[1]=l*d+a*j;b[2]=l*e+a*i;b[3]=l*f+a*k;b[4]=l*h-a*c;b[5]=l*j-a*d;b[6]=l*i-a*e;b[7]=l*k-a*f;return this},rotateByAxis:function(a,b){var c=this.elements;if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===a.z)return this.rotateZ(b);var d=a.x,e=a.y,f=a.z,
h=Math.sqrt(d*d+e*e+f*f),d=d/h,e=e/h,f=f/h,h=d*d,j=e*e,i=f*f,k=Math.cos(b),l=Math.sin(b),o=1-k,n=d*e*o,u=d*f*o,o=e*f*o,d=d*l,m=e*l,l=f*l,f=h+(1-h)*k,h=n+l,e=u-m,n=n-l,j=j+(1-j)*k,l=o+d,u=u+m,o=o-d,i=i+(1-i)*k,k=c[0],d=c[1],m=c[2],v=c[3],r=c[4],p=c[5],A=c[6],x=c[7],t=c[8],G=c[9],C=c[10],w=c[11];c[0]=f*k+h*r+e*t;c[1]=f*d+h*p+e*G;c[2]=f*m+h*A+e*C;c[3]=f*v+h*x+e*w;c[4]=n*k+j*r+l*t;c[5]=n*d+j*p+l*G;c[6]=n*m+j*A+l*C;c[7]=n*v+j*x+l*w;c[8]=u*k+o*r+i*t;c[9]=u*d+o*p+i*G;c[10]=u*m+o*A+i*C;c[11]=u*v+o*x+i*w;
return this},scale:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);
this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,h=a.y,j=a.z,i=e*f,k=e*h;this.set(i*f+c,i*h-d*j,i*j+d*h,0,i*h+d*j,k*h+c,k*j-d*f,0,i*j-d*h,k*j+d*f,e*j*j+c,0,0,0,0,1);return this},makeScale:function(a,
b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeFrustum:function(a,b,c,d,e,f){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(f+e)/(f-e);h[14]=-2*f*e/(f-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){var a=c*Math.tan(a*Math.PI/360),e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var h=this.elements,j=b-a,i=c-d,k=f-e;h[0]=2/
j;h[4]=0;h[8]=0;h[12]=-((b+a)/j);h[1]=0;h[5]=2/i;h[9]=0;h[13]=-((c+d)/i);h[2]=0;h[6]=0;h[10]=-2/k;h[14]=-((f+e)/k);h[3]=0;h[7]=0;h[11]=0;h[15]=1;return this},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Matrix4.__v1=new THREE.Vector3;THREE.Matrix4.__v2=new THREE.Vector3;THREE.Matrix4.__v3=new THREE.Vector3;THREE.Matrix4.__m1=new THREE.Matrix4;THREE.Matrix4.__m2=new THREE.Matrix4;
THREE.EventTarget=function(){var a={};this.addEventListener=function(b,c){void 0===a[b]&&(a[b]=[]);-1===a[b].indexOf(c)&&a[b].push(c)};this.dispatchEvent=function(b){for(var c in a[b.type])a[b.type][c](b)};this.removeEventListener=function(b,c){var d=a[b].indexOf(c);-1!==d&&a[b].splice(d,1)}};THREE.Frustum=function(){this.planes=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4]};
THREE.Frustum.prototype.setFromMatrix=function(a){var b=this.planes,c=a.elements,a=c[0],d=c[1],e=c[2],f=c[3],h=c[4],j=c[5],i=c[6],k=c[7],l=c[8],o=c[9],n=c[10],u=c[11],m=c[12],v=c[13],r=c[14],c=c[15];b[0].set(f-a,k-h,u-l,c-m);b[1].set(f+a,k+h,u+l,c+m);b[2].set(f+d,k+j,u+o,c+v);b[3].set(f-d,k-j,u-o,c-v);b[4].set(f-e,k-i,u-n,c-r);b[5].set(f+e,k+i,u+n,c+r);for(d=0;6>d;d++)a=b[d],a.divideScalar(Math.sqrt(a.x*a.x+a.y*a.y+a.z*a.z))};
THREE.Frustum.prototype.contains=function(a){for(var b=0,c=this.planes,b=a.matrixWorld,d=b.elements,a=-a.geometry.boundingSphere.radius*b.getMaxScaleOnAxis(),e=0;6>e;e++)if(b=c[e].x*d[12]+c[e].y*d[13]+c[e].z*d[14]+c[e].w,b<=a)return!1;return!0};THREE.Frustum.__v1=new THREE.Vector3;
(function(a){a.Ray=function(b,c,d,e){this.origin=b||new a.Vector3;this.direction=c||new a.Vector3;this.near=d||0;this.far=e||Infinity};var b=new a.Vector3,c=new a.Vector3,d=new a.Vector3,e=new a.Vector3;new a.Vector3;var f=new a.Vector3,h=new a.Matrix4,j=function(a,b){return a.distance-b.distance},i=new a.Vector3,k=new a.Vector3,l=new a.Vector3,o=function(a,b,c){i.sub(c,a);var d=i.dot(b),a=k.add(a,l.copy(b).multiplyScalar(d));return c.distanceTo(a)},n=function(a,b,c,d){i.sub(d,b);k.sub(c,b);l.sub(a,
b);var a=i.dot(i),b=i.dot(k),c=i.dot(l),e=k.dot(k),d=k.dot(l),f=1/(a*e-b*b),e=(e*c-b*d)*f,a=(a*d-b*c)*f;return 0<=e&&0<=a&&1>e+a},u=function(i,j,l){if(i instanceof a.Particle){var k=o(j.origin,j.direction,i.matrixWorld.getPosition());if(k>i.scale.x)return l;l.push({distance:k,point:i.position,face:null,object:i})}else if(i instanceof a.Mesh){var m=i.geometry.boundingSphere.radius*i.matrixWorld.getMaxScaleOnAxis(),k=o(j.origin,j.direction,i.matrixWorld.getPosition());if(k>m)return l;var m=i.geometry,
u=m.vertices,G=i.material instanceof a.MeshFaceMaterial,C=!0===G?i.material.materials:null,k=i.material.side,w,y,D,R=j.precision;i.matrixRotationWorld.extractRotation(i.matrixWorld);b.copy(j.origin);h.getInverse(i.matrixWorld);c.copy(b);h.multiplyVector3(c);d.copy(j.direction);h.rotateAxis(d).normalize();for(var H=0,$=m.faces.length;H<$;H++){var B=m.faces[H],k=!0===G?C[B.materialIndex]:i.material;if(void 0!==k&&(k=k.side,e.sub(B.centroid,c),y=B.normal,w=d.dot(y),!(Math.abs(w)<R)&&(y=y.dot(e)/w,!(0>
y)&&(k===a.DoubleSide||(k===a.FrontSide?0>w:0<w)))))if(f.add(c,d.multiplyScalar(y)),B instanceof a.Face3)k=u[B.a],w=u[B.b],y=u[B.c],n(f,k,w,y)&&(w=i.matrixWorld.multiplyVector3(f.clone()),k=b.distanceTo(w),k<j.near||k>j.far||l.push({distance:k,point:w,face:B,faceIndex:H,object:i}));else if(B instanceof a.Face4&&(k=u[B.a],w=u[B.b],y=u[B.c],D=u[B.d],n(f,k,w,D)||n(f,w,y,D)))w=i.matrixWorld.multiplyVector3(f.clone()),k=b.distanceTo(w),k<j.near||k>j.far||l.push({distance:k,point:w,face:B,faceIndex:H,object:i})}}},
m=function(a,b,c){for(var a=a.getDescendants(),d=0,e=a.length;d<e;d++)u(a[d],b,c)};a.Ray.prototype.precision=1E-4;a.Ray.prototype.set=function(a,b){this.origin=a;this.direction=b};a.Ray.prototype.intersectObject=function(a,b){var c=[];!0===b&&m(a,this,c);u(a,this,c);c.sort(j);return c};a.Ray.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)u(a[d],this,c),!0===b&&m(a[d],this,c);c.sort(j);return c}})(THREE);
THREE.Rectangle=function(){function a(){f=d-b;h=e-c}var b=0,c=0,d=0,e=0,f=0,h=0,j=!0;this.getX=function(){return b};this.getY=function(){return c};this.getWidth=function(){return f};this.getHeight=function(){return h};this.getLeft=function(){return b};this.getTop=function(){return c};this.getRight=function(){return d};this.getBottom=function(){return e};this.set=function(f,h,l,o){j=!1;b=f;c=h;d=l;e=o;a()};this.addPoint=function(f,h){!0===j?(j=!1,b=f,c=h,d=f,e=h):(b=b<f?b:f,c=c<h?c:h,d=d>f?d:f,e=e>
h?e:h);a()};this.add3Points=function(f,h,l,o,n,u){!0===j?(j=!1,b=f<l?f<n?f:n:l<n?l:n,c=h<o?h<u?h:u:o<u?o:u,d=f>l?f>n?f:n:l>n?l:n,e=h>o?h>u?h:u:o>u?o:u):(b=f<l?f<n?f<b?f:b:n<b?n:b:l<n?l<b?l:b:n<b?n:b,c=h<o?h<u?h<c?h:c:u<c?u:c:o<u?o<c?o:c:u<c?u:c,d=f>l?f>n?f>d?f:d:n>d?n:d:l>n?l>d?l:d:n>d?n:d,e=h>o?h>u?h>e?h:e:u>e?u:e:o>u?o>e?o:e:u>e?u:e);a()};this.addRectangle=function(f){!0===j?(j=!1,b=f.getLeft(),c=f.getTop(),d=f.getRight(),e=f.getBottom()):(b=b<f.getLeft()?b:f.getLeft(),c=c<f.getTop()?c:f.getTop(),
d=d>f.getRight()?d:f.getRight(),e=e>f.getBottom()?e:f.getBottom());a()};this.inflate=function(f){b-=f;c-=f;d+=f;e+=f;a()};this.minSelf=function(f){b=b>f.getLeft()?b:f.getLeft();c=c>f.getTop()?c:f.getTop();d=d<f.getRight()?d:f.getRight();e=e<f.getBottom()?e:f.getBottom();a()};this.intersects=function(a){return d<a.getLeft()||b>a.getRight()||e<a.getTop()||c>a.getBottom()?!1:!0};this.empty=function(){j=!0;e=d=c=b=0;a()};this.isEmpty=function(){return j}};
THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0}};
THREE.Object3D=function(){THREE.Object3DLibrary.push(this);this.id=THREE.Object3DIdCount++;this.name="";this.properties={};this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder=THREE.Object3D.defaultEulerOrder;this.scale=new THREE.Vector3(1,1,1);this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=
this.matrixAutoUpdate=!0;this.quaternion=new THREE.Quaternion;this.useQuaternion=!1;this.boundRadius=0;this.boundRadiusScale=1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this._vector=new THREE.Vector3};
THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(a){this.matrix.multiply(a,this.matrix);this.scale.getScaleFromMatrix(this.matrix);a=(new THREE.Matrix4).extractRotation(this.matrix);this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder);this.position.getPositionFromMatrix(this.matrix)},translate:function(a,b){this.matrix.rotateAxis(b);this.position.addSelf(b.multiplyScalar(a))},translateX:function(a){this.translate(a,this._vector.set(1,0,0))},translateY:function(a){this.translate(a,
this._vector.set(0,1,0))},translateZ:function(a){this.translate(a,this._vector.set(0,0,1))},localToWorld:function(a){return this.matrixWorld.multiplyVector3(a)},worldToLocal:function(a){return THREE.Object3D.__m1.getInverse(this.matrixWorld).multiplyVector3(a)},lookAt:function(a){this.matrix.lookAt(a,this.position,this.up);this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))},add:function(a){if(a===
this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},
traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getChildByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getChildByName(a,b),void 0!==e))return e}},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.setPosition(this.position);
!1===this.useQuaternion?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion);if(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,Math.max(this.scale.y,this.scale.z));this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):
this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a){void 0===a&&(a=new THREE.Object3D);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.rotation instanceof THREE.Vector3&&a.rotation.copy(this.rotation);a.eulerOrder=this.eulerOrder;a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);
a.matrixWorld.copy(this.matrixWorld);a.matrixRotationWorld.copy(this.matrixRotationWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.quaternion.copy(this.quaternion);a.useQuaternion=this.useQuaternion;a.boundRadius=this.boundRadius;a.boundRadiusScale=this.boundRadiusScale;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;for(var b=0;b<this.children.length;b++)a.add(this.children[b].clone());
return a},deallocate:function(){var a=THREE.Object3DLibrary.indexOf(this);-1!==a&&THREE.Object3DLibrary.splice(a,1)}};THREE.Object3D.__m1=new THREE.Matrix4;THREE.Object3D.defaultEulerOrder="XYZ";THREE.Object3DIdCount=0;THREE.Object3DLibrary=[];
THREE.Projector=function(){function a(){if(f===j){var a=new THREE.RenderableObject;h.push(a);j++;f++;return a}return h[f++]}function b(){if(k===o){var a=new THREE.RenderableVertex;l.push(a);o++;k++;return a}return l[k++]}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,h=-a.z+a.w,i=-b.z+b.w;if(0<=e&&0<=f&&0<=h&&0<=i)return!0;if(0>e&&0>f||0>h&&0>i)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>h?c=Math.max(c,h/(h-i)):0>i&&(d=Math.min(d,h/(h-i)));if(d<
c)return!1;a.lerpSelf(b,c);b.lerpSelf(a,1-d);return!0}var e,f,h=[],j=0,i,k,l=[],o=0,n,u,m=[],v=0,r,p=[],A=0,x,t,G=[],C=0,w,y,D=[],R=0,H={objects:[],sprites:[],lights:[],elements:[]},$=new THREE.Vector3,B=new THREE.Vector4,K=new THREE.Matrix4,E=new THREE.Matrix4,O=new THREE.Matrix3,X=new THREE.Frustum,Y=new THREE.Vector4,W=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);K.multiply(b.projectionMatrix,b.matrixWorldInverse);K.multiplyVector3(a);return a};
this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);K.multiply(b.matrixWorld,b.projectionMatrixInverse);K.multiplyVector3(a);return a};this.pickingRay=function(a,b){var c;a.z=-1;c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.subSelf(a).normalize();return new THREE.Ray(a,c)};this.projectScene=function(h,j,o,S){var T=j.near,F=j.far,Ba=!1,Va,wa,Ma,ba,ca,Ca,ya,ma,na,Pa,Ia,ra,yb,zb,Xa;y=t=r=u=0;H.elements.length=0;h.updateMatrixWorld();
void 0===j.parent&&j.updateMatrixWorld();j.matrixWorldInverse.getInverse(j.matrixWorld);K.multiply(j.projectionMatrix,j.matrixWorldInverse);X.setFromMatrix(K);f=0;H.objects.length=0;H.sprites.length=0;H.lights.length=0;var eb=function(b){for(var c=0,d=b.children.length;c<d;c++){var f=b.children[c];if(!1!==f.visible){if(f instanceof THREE.Light)H.lights.push(f);else if(f instanceof THREE.Mesh||f instanceof THREE.Line){if(!1===f.frustumCulled||!0===X.contains(f))e=a(),e.object=f,null!==f.renderDepth?
e.z=f.renderDepth:($.copy(f.matrixWorld.getPosition()),K.multiplyVector3($),e.z=$.z),H.objects.push(e)}else f instanceof THREE.Sprite||f instanceof THREE.Particle?(e=a(),e.object=f,null!==f.renderDepth?e.z=f.renderDepth:($.copy(f.matrixWorld.getPosition()),K.multiplyVector3($),e.z=$.z),H.sprites.push(e)):(e=a(),e.object=f,null!==f.renderDepth?e.z=f.renderDepth:($.copy(f.matrixWorld.getPosition()),K.multiplyVector3($),e.z=$.z),H.objects.push(e));eb(f)}}};eb(h);!0===o&&H.objects.sort(c);h=0;for(o=H.objects.length;h<
o;h++)if(ma=H.objects[h].object,na=ma.matrixWorld,k=0,ma instanceof THREE.Mesh){Pa=ma.geometry;Ma=Pa.vertices;Ia=Pa.faces;Pa=Pa.faceVertexUvs;O.getInverse(na);O.transpose();yb=ma.material instanceof THREE.MeshFaceMaterial;zb=!0===yb?ma.material:null;Va=0;for(wa=Ma.length;Va<wa;Va++)i=b(),i.positionWorld.copy(Ma[Va]),na.multiplyVector3(i.positionWorld),i.positionScreen.copy(i.positionWorld),K.multiplyVector4(i.positionScreen),i.positionScreen.x/=i.positionScreen.w,i.positionScreen.y/=i.positionScreen.w,
i.visible=i.positionScreen.z>T&&i.positionScreen.z<F;Ma=0;for(Va=Ia.length;Ma<Va;Ma++)if(wa=Ia[Ma],Xa=!0===yb?zb.materials[wa.materialIndex]:ma.material,void 0!==Xa){Ca=Xa.side;if(wa instanceof THREE.Face3)if(ba=l[wa.a],ca=l[wa.b],ya=l[wa.c],!0===ba.visible&&!0===ca.visible&&!0===ya.visible)if(Ba=0>(ya.positionScreen.x-ba.positionScreen.x)*(ca.positionScreen.y-ba.positionScreen.y)-(ya.positionScreen.y-ba.positionScreen.y)*(ca.positionScreen.x-ba.positionScreen.x),Ca===THREE.DoubleSide||Ba===(Ca===
THREE.FrontSide))u===v?(ra=new THREE.RenderableFace3,m.push(ra),v++,u++,n=ra):n=m[u++],n.v1.copy(ba),n.v2.copy(ca),n.v3.copy(ya);else continue;else continue;else if(wa instanceof THREE.Face4)if(ba=l[wa.a],ca=l[wa.b],ya=l[wa.c],ra=l[wa.d],!0===ba.visible&&!0===ca.visible&&!0===ya.visible&&!0===ra.visible)if(Ba=0>(ra.positionScreen.x-ba.positionScreen.x)*(ca.positionScreen.y-ba.positionScreen.y)-(ra.positionScreen.y-ba.positionScreen.y)*(ca.positionScreen.x-ba.positionScreen.x)||0>(ca.positionScreen.x-
ya.positionScreen.x)*(ra.positionScreen.y-ya.positionScreen.y)-(ca.positionScreen.y-ya.positionScreen.y)*(ra.positionScreen.x-ya.positionScreen.x),Ca===THREE.DoubleSide||Ba===(Ca===THREE.FrontSide)){if(r===A){var fb=new THREE.RenderableFace4;p.push(fb);A++;r++;n=fb}else n=p[r++];n.v1.copy(ba);n.v2.copy(ca);n.v3.copy(ya);n.v4.copy(ra)}else continue;else continue;n.normalWorld.copy(wa.normal);!1===Ba&&(Ca===THREE.BackSide||Ca===THREE.DoubleSide)&&n.normalWorld.negate();O.multiplyVector3(n.normalWorld).normalize();
n.centroidWorld.copy(wa.centroid);na.multiplyVector3(n.centroidWorld);n.centroidScreen.copy(n.centroidWorld);K.multiplyVector3(n.centroidScreen);ya=wa.vertexNormals;ba=0;for(ca=ya.length;ba<ca;ba++)ra=n.vertexNormalsWorld[ba],ra.copy(ya[ba]),!1===Ba&&(Ca===THREE.BackSide||Ca===THREE.DoubleSide)&&ra.negate(),O.multiplyVector3(ra).normalize();n.vertexNormalsLength=ya.length;ba=0;for(ca=Pa.length;ba<ca;ba++)if(ra=Pa[ba][Ma],void 0!==ra){Ca=0;for(ya=ra.length;Ca<ya;Ca++)n.uvs[ba][Ca]=ra[Ca]}n.color=wa.color;
n.material=Xa;n.z=n.centroidScreen.z;H.elements.push(n)}}else if(ma instanceof THREE.Line){E.multiply(K,na);Ma=ma.geometry.vertices;ba=b();ba.positionScreen.copy(Ma[0]);E.multiplyVector4(ba.positionScreen);na=ma.type===THREE.LinePieces?2:1;Va=1;for(wa=Ma.length;Va<wa;Va++)ba=b(),ba.positionScreen.copy(Ma[Va]),E.multiplyVector4(ba.positionScreen),0<(Va+1)%na||(ca=l[k-2],Y.copy(ba.positionScreen),W.copy(ca.positionScreen),!0===d(Y,W)&&(Y.multiplyScalar(1/Y.w),W.multiplyScalar(1/W.w),t===C?(Ia=new THREE.RenderableLine,
G.push(Ia),C++,t++,x=Ia):x=G[t++],x.v1.positionScreen.copy(Y),x.v2.positionScreen.copy(W),x.z=Math.max(Y.z,W.z),x.material=ma.material,H.elements.push(x)))}h=0;for(o=H.sprites.length;h<o;h++)ma=H.sprites[h].object,na=ma.matrixWorld,ma instanceof THREE.Particle&&(B.set(na.elements[12],na.elements[13],na.elements[14],1),K.multiplyVector4(B),B.z/=B.w,0<B.z&&1>B.z&&(y===R?(T=new THREE.RenderableParticle,D.push(T),R++,y++,w=T):w=D[y++],w.object=ma,w.x=B.x/B.w,w.y=B.y/B.w,w.z=B.z,w.rotation=ma.rotation.z,
w.scale.x=ma.scale.x*Math.abs(w.x-(B.x+j.projectionMatrix.elements[0])/(B.w+j.projectionMatrix.elements[12])),w.scale.y=ma.scale.y*Math.abs(w.y-(B.y+j.projectionMatrix.elements[5])/(B.w+j.projectionMatrix.elements[13])),w.material=ma.material,H.elements.push(w)));!0===S&&H.elements.sort(c);return H}};THREE.Quaternion=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a,b){var c=Math.cos(a.x/2),d=Math.cos(a.y/2),e=Math.cos(a.z/2),f=Math.sin(a.x/2),h=Math.sin(a.y/2),j=Math.sin(a.z/2);void 0===b||"XYZ"===b?(this.x=f*d*e+c*h*j,this.y=c*h*e-f*d*j,this.z=c*d*j+f*h*e,this.w=c*d*e-f*h*j):"YXZ"===b?(this.x=f*d*e+c*h*j,this.y=c*h*e-f*d*j,this.z=c*d*
j-f*h*e,this.w=c*d*e+f*h*j):"ZXY"===b?(this.x=f*d*e-c*h*j,this.y=c*h*e+f*d*j,this.z=c*d*j+f*h*e,this.w=c*d*e-f*h*j):"ZYX"===b?(this.x=f*d*e-c*h*j,this.y=c*h*e+f*d*j,this.z=c*d*j-f*h*e,this.w=c*d*e+f*h*j):"YZX"===b?(this.x=f*d*e+c*h*j,this.y=c*h*e+f*d*j,this.z=c*d*j-f*h*e,this.w=c*d*e-f*h*j):"XZY"===b&&(this.x=f*d*e-c*h*j,this.y=c*h*e-f*d*j,this.z=c*d*j+f*h*e,this.w=c*d*e+f*h*j);return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);
return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0],a=b[4],d=b[8],e=b[1],f=b[5],h=b[9],j=b[2],i=b[6],b=b[10],k=c+f+b;0<k?(c=0.5/Math.sqrt(k+1),this.w=0.25/c,this.x=(i-h)*c,this.y=(d-j)*c,this.z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this.w=(i-h)/c,this.x=0.25*c,this.y=(a+e)/c,this.z=(d+j)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this.w=(d-j)/c,this.x=(a+e)/c,this.y=0.25*c,this.z=(h+i)/c):(c=2*Math.sqrt(1+b-c-f),this.w=(e-a)/c,this.x=(d+j)/c,this.y=(h+i)/c,this.z=0.25*c);return this},inverse:function(){this.conjugate().normalize();
return this},conjugate:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);0===a?(this.z=this.y=this.x=0,this.w=1):(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiply:function(a,b){var c=a.x,d=a.y,e=a.z,f=a.w,h=b.x,j=b.y,i=b.z,k=b.w;this.x=c*k+d*i-e*j+f*h;this.y=-c*i+d*k+e*h+f*j;this.z=c*j-
d*h+e*k+f*i;this.w=-c*h-d*j-e*i+f*k;return this},multiplySelf:function(a){var b=this.x,c=this.y,d=this.z,e=this.w,f=a.x,h=a.y,j=a.z,a=a.w;this.x=b*a+e*f+c*j-d*h;this.y=c*a+e*h+d*f-b*j;this.z=d*a+e*j+b*h-c*f;this.w=e*a-b*f-c*h-d*j;return this},multiplyVector3:function(a,b){b||(b=a);var c=a.x,d=a.y,e=a.z,f=this.x,h=this.y,j=this.z,i=this.w,k=i*c+h*e-j*d,l=i*d+j*c-f*e,o=i*e+f*d-h*c,c=-f*c-h*d-j*e;b.x=k*i+c*-f+l*-j-o*-h;b.y=l*i+c*-h+o*-f-k*-j;b.z=o*i+c*-j+k*-h-l*-f;return b},slerpSelf:function(a,b){var c=
this.x,d=this.y,e=this.z,f=this.w,h=f*a.w+c*a.x+d*a.y+e*a.z;0>h?(this.w=-a.w,this.x=-a.x,this.y=-a.y,this.z=-a.z,h=-h):this.copy(a);if(1<=h)return this.w=f,this.x=c,this.y=d,this.z=e,this;var j=Math.acos(h),i=Math.sqrt(1-h*h);if(0.0010>Math.abs(i))return this.w=0.5*(f+this.w),this.x=0.5*(c+this.x),this.y=0.5*(d+this.y),this.z=0.5*(e+this.z),this;h=Math.sin((1-b)*j)/i;j=Math.sin(b*j)/i;this.w=f*h+this.w*j;this.x=c*h+this.x*j;this.y=d*h+this.y*j;this.z=e*h+this.z*j;return this},clone:function(){return new THREE.Quaternion(this.x,
this.y,this.z,this.w)}};THREE.Quaternion.slerp=function(a,b,c,d){var e=a.w*b.w+a.x*b.x+a.y*b.y+a.z*b.z;0>e?(c.w=-b.w,c.x=-b.x,c.y=-b.y,c.z=-b.z,e=-e):c.copy(b);if(1<=Math.abs(e))return c.w=a.w,c.x=a.x,c.y=a.y,c.z=a.z,c;var b=Math.acos(e),f=Math.sqrt(1-e*e);if(0.0010>Math.abs(f))return c.w=0.5*(a.w+c.w),c.x=0.5*(a.x+c.x),c.y=0.5*(a.y+c.y),c.z=0.5*(a.z+c.z),c;e=Math.sin((1-d)*b)/f;d=Math.sin(d*b)/f;c.w=a.w*e+c.w*d;c.x=a.x*e+c.x*d;c.y=a.y*e+c.y*d;c.z=a.z*e+c.z*d;return c};
THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=f;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,h){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=f instanceof THREE.Color?f:new THREE.Color;this.vertexColors=f instanceof Array?f:[];this.vertexTangents=[];this.materialIndex=h;this.centroid=new THREE.Vector3};
THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var a=new THREE.Face4(this.a,this.b,this.c,this.d);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.UV=function(a,b){this.u=a||0;this.v=b||0};THREE.UV.prototype={constructor:THREE.UV,set:function(a,b){this.u=a;this.v=b;return this},copy:function(a){this.u=a.u;this.v=a.v;return this},lerpSelf:function(a,b){this.u+=(a.u-this.u)*b;this.v+=(a.v-this.v)*b;return this},clone:function(){return new THREE.UV(this.u,this.v)}};
THREE.Geometry=function(){THREE.GeometryLibrary.push(this);this.id=THREE.GeometryIdCount++;this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=
this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){var b=new THREE.Matrix3;b.getInverse(a).transpose();for(var c=0,d=this.vertices.length;c<d;c++)a.multiplyVector3(this.vertices[c]);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];b.multiplyVector3(e.normal).normalize();for(var f=0,h=e.vertexNormals.length;f<h;f++)b.multiplyVector3(e.vertexNormals[f]).normalize();a.multiplyVector3(e.centroid)}},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=
this.faces[a],c.centroid.set(0,0,0),c instanceof THREE.Face3?(c.centroid.addSelf(this.vertices[c.a]),c.centroid.addSelf(this.vertices[c.b]),c.centroid.addSelf(this.vertices[c.c]),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.addSelf(this.vertices[c.a]),c.centroid.addSelf(this.vertices[c.b]),c.centroid.addSelf(this.vertices[c.c]),c.centroid.addSelf(this.vertices[c.d]),c.centroid.divideScalar(4))},computeFaceNormals:function(){var a,b,c,d,e,f,h=new THREE.Vector3,j=new THREE.Vector3;
a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],d=this.vertices[c.a],e=this.vertices[c.b],f=this.vertices[c.c],h.sub(f,e),j.sub(d,e),h.crossSelf(j),h.normalize(),c.normal.copy(h)},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,
new THREE.Vector3]:d instanceof THREE.Face4&&(d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{e=this.__tmpVertices;b=0;for(c=this.vertices.length;b<c;b++)e[b].set(0,0,0)}if(a){var f,h,j,i=new THREE.Vector3,k=new THREE.Vector3,l=new THREE.Vector3,o=new THREE.Vector3,n=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(a=this.vertices[d.a],f=this.vertices[d.b],h=this.vertices[d.c],i.sub(h,f),k.sub(a,f),i.crossSelf(k),
e[d.a].addSelf(i),e[d.b].addSelf(i),e[d.c].addSelf(i)):d instanceof THREE.Face4&&(a=this.vertices[d.a],f=this.vertices[d.b],h=this.vertices[d.c],j=this.vertices[d.d],l.sub(j,f),k.sub(a,f),l.crossSelf(k),e[d.a].addSelf(l),e[d.b].addSelf(l),e[d.d].addSelf(l),o.sub(j,h),n.sub(f,h),o.crossSelf(n),e[d.b].addSelf(o),e[d.c].addSelf(o),e[d.d].addSelf(o))}else{b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(e[d.a].addSelf(d.normal),e[d.b].addSelf(d.normal),e[d.c].addSelf(d.normal)):
d instanceof THREE.Face4&&(e[d.a].addSelf(d.normal),e[d.b].addSelf(d.normal),e[d.c].addSelf(d.normal),e[d.d].addSelf(d.normal))}b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c])):d instanceof THREE.Face4&&(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c]),d.vertexNormals[3].copy(e[d.d]))},
computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<
b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,j=this.morphNormals[a].vertexNormals,i,k;c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],i=new THREE.Vector3,k=e instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},h.push(i),j.push(k)}h=this.morphNormals[a];f.vertices=
this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],i=h.faceNormals[c],k=h.vertexNormals[c],i.copy(e.normal),e instanceof THREE.Face3?(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])):(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2]),k.d.copy(e.vertexNormals[3]))}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,
e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){function a(a,b,c,d,e,f,y){j=a.vertices[b];i=a.vertices[c];k=a.vertices[d];l=h[e];o=h[f];n=h[y];u=i.x-j.x;m=k.x-j.x;v=i.y-j.y;r=k.y-j.y;p=i.z-j.z;A=k.z-j.z;x=o.u-l.u;t=n.u-l.u;G=o.v-l.v;C=n.v-l.v;w=1/(x*C-t*G);H.set((C*u-G*m)*w,(C*v-G*r)*w,(C*p-G*A)*w);$.set((x*m-t*u)*w,(x*r-t*v)*w,(x*A-t*p)*w);D[b].addSelf(H);D[c].addSelf(H);D[d].addSelf(H);R[b].addSelf($);R[c].addSelf($);R[d].addSelf($)}var b,c,d,e,f,h,j,i,k,l,o,n,u,m,v,r,p,A,
x,t,G,C,w,y,D=[],R=[],H=new THREE.Vector3,$=new THREE.Vector3,B=new THREE.Vector3,K=new THREE.Vector3,E=new THREE.Vector3;b=0;for(c=this.vertices.length;b<c;b++)D[b]=new THREE.Vector3,R[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)f=this.faces[b],h=this.faceVertexUvs[0][b],f instanceof THREE.Face3?a(this,f.a,f.b,f.c,0,1,2):f instanceof THREE.Face4&&(a(this,f.a,f.b,f.d,0,1,3),a(this,f.b,f.c,f.d,1,2,3));var O=["a","b","c","d"];b=0;for(c=this.faces.length;b<c;b++){f=this.faces[b];for(d=0;d<
f.vertexNormals.length;d++)E.copy(f.vertexNormals[d]),e=f[O[d]],y=D[e],B.copy(y),B.subSelf(E.multiplyScalar(E.dot(y))).normalize(),K.cross(f.vertexNormals[d],y),e=K.dot(R[e]),e=0>e?-1:1,f.vertexTangents[d]=new THREE.Vector4(B.x,B.y,B.z,e)}this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){this.boundingBox||(this.boundingBox={min:new THREE.Vector3,max:new THREE.Vector3});
if(0<this.vertices.length){var a;a=this.vertices[0];this.boundingBox.min.copy(a);this.boundingBox.max.copy(a);for(var b=this.boundingBox.min,c=this.boundingBox.max,d=1,e=this.vertices.length;d<e;d++)(a=this.vertices[d],a.x<b.x?b.x=a.x:a.x>c.x&&(c.x=a.x),a.y<b.y?b.y=a.y:a.y>c.y&&(c.y=a.y),a.z<b.z)?b.z=a.z:a.z>c.z&&(c.z=a.z)}else this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){var a=0;null===this.boundingSphere&&(this.boundingSphere={radius:0});for(var b=
0,c=this.vertices.length;b<c;b++){var d=this.vertices[b].lengthSq();d>a&&(a=d)}this.boundingSphere.radius=Math.sqrt(a)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,h,j,i;f=0;for(h=this.vertices.length;f<h;f++)d=this.vertices[f],d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*e)].join("_"),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];f=0;for(h=this.faces.length;f<h;f++)if(a=this.faces[f],a instanceof THREE.Face3)a.a=c[a.a],a.b=c[a.b],a.c=c[a.c];
else if(a instanceof THREE.Face4){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];a.d=c[a.d];d=[a.a,a.b,a.c,a.d];for(e=3;0<e;e--)if(d.indexOf(a["abcd"[e]])!==e){d.splice(e,1);this.faces[f]=new THREE.Face3(d[0],d[1],d[2],a.normal,a.color,a.materialIndex);d=0;for(j=this.faceVertexUvs.length;d<j;d++)(i=this.faceVertexUvs[d][f])&&i.splice(e,1);this.faces[f].vertexColors=a.vertexColors;break}}c=this.vertices.length-b.length;this.vertices=b;return c},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=
b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],h=0,j=e.length;h<j;h++)f.push(new THREE.UV(e[h].u,e[h].v));a.faceVertexUvs[0].push(f)}return a},deallocate:function(){var a=THREE.GeometryLibrary.indexOf(this);-1!==a&&THREE.GeometryLibrary.splice(a,1)}};THREE.GeometryIdCount=0;THREE.GeometryLibrary=[];
THREE.BufferGeometry=function(){THREE.GeometryLibrary.push(this);this.id=THREE.GeometryIdCount++;this.attributes={};this.dynamic=!1;this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&(b=new THREE.Matrix3,b.getInverse(a).transpose(),b.multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){this.boundingBox||(this.boundingBox={min:new THREE.Vector3(Infinity,
Infinity,Infinity),max:new THREE.Vector3(-Infinity,-Infinity,-Infinity)});var a=this.attributes.position.array;if(a)for(var b=this.boundingBox,c,d,e,f=0,h=a.length;f<h;f+=3)(c=a[f],d=a[f+1],e=a[f+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z)?b.min.z=e:e>b.max.z&&(b.max.z=e);if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){this.boundingSphere||(this.boundingSphere={radius:0});
var a=this.attributes.position.array;if(a){for(var b,c=0,d,e,f=0,h=a.length;f<h;f+=3)b=a[f],d=a[f+1],e=a[f+2],b=b*b+d*d+e*e,b>c&&(c=b);this.boundingSphere.radius=Math.sqrt(c)}},computeVertexNormals:function(){if(this.attributes.position&&this.attributes.index){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a),numItems:a};else{a=0;for(b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=
0}var e=this.offsets,f=this.attributes.index.array,h=this.attributes.position.array,j=this.attributes.normal.array,i,k,l,o,n,u,m=new THREE.Vector3,v=new THREE.Vector3,r=new THREE.Vector3,p=new THREE.Vector3,A=new THREE.Vector3;c=0;for(d=e.length;c<d;++c){b=e[c].start;i=e[c].count;var x=e[c].index;a=b;for(b+=i;a<b;a+=3)i=x+f[a],k=x+f[a+1],l=x+f[a+2],o=h[3*i],n=h[3*i+1],u=h[3*i+2],m.set(o,n,u),o=h[3*k],n=h[3*k+1],u=h[3*k+2],v.set(o,n,u),o=h[3*l],n=h[3*l+1],u=h[3*l+2],r.set(o,n,u),p.sub(r,v),A.sub(m,
v),p.crossSelf(A),j[3*i]+=p.x,j[3*i+1]+=p.y,j[3*i+2]+=p.z,j[3*k]+=p.x,j[3*k+1]+=p.y,j[3*k+2]+=p.z,j[3*l]+=p.x,j[3*l+1]+=p.y,j[3*l+2]+=p.z}this.normalizeNormals();this.normalsNeedUpdate=!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a){aa.x=d[3*a];aa.y=d[3*a+1];aa.z=d[3*a+2];P.copy(aa);S=i[a];Y.copy(S);Y.subSelf(aa.multiplyScalar(aa.dot(S))).normalize();
W.cross(P,S);T=W.dot(k[a]);Ra=0>T?-1:1;j[4*a]=Y.x;j[4*a+1]=Y.y;j[4*a+2]=Y.z;j[4*a+3]=Ra}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var b=this.attributes.index.array,c=this.attributes.position.array,d=this.attributes.normal.array,e=this.attributes.uv.array,f=c.length/3;if(void 0===this.attributes.tangent){var h=
4*f;this.attributes.tangent={itemSize:4,array:new Float32Array(h),numItems:h}}for(var j=this.attributes.tangent.array,i=[],k=[],h=0;h<f;h++)i[h]=new THREE.Vector3,k[h]=new THREE.Vector3;var l,o,n,u,m,v,r,p,A,x,t,G,C,w,y,f=new THREE.Vector3,h=new THREE.Vector3,D,R,H,$,B,K,E,O=this.offsets;H=0;for($=O.length;H<$;++H){R=O[H].start;B=O[H].count;var X=O[H].index;D=R;for(R+=B;D<R;D+=3)B=X+b[D],K=X+b[D+1],E=X+b[D+2],l=c[3*B],o=c[3*B+1],n=c[3*B+2],u=c[3*K],m=c[3*K+1],v=c[3*K+2],r=c[3*E],p=c[3*E+1],A=c[3*
E+2],x=e[2*B],t=e[2*B+1],G=e[2*K],C=e[2*K+1],w=e[2*E],y=e[2*E+1],u-=l,l=r-l,m-=o,o=p-o,v-=n,n=A-n,G-=x,x=w-x,C-=t,t=y-t,y=1/(G*t-x*C),f.set((t*u-C*l)*y,(t*m-C*o)*y,(t*v-C*n)*y),h.set((G*l-x*u)*y,(G*o-x*m)*y,(G*n-x*v)*y),i[B].addSelf(f),i[K].addSelf(f),i[E].addSelf(f),k[B].addSelf(h),k[K].addSelf(h),k[E].addSelf(h)}var Y=new THREE.Vector3,W=new THREE.Vector3,aa=new THREE.Vector3,P=new THREE.Vector3,Ra,S,T;H=0;for($=O.length;H<$;++H){R=O[H].start;B=O[H].count;X=O[H].index;D=R;for(R+=B;D<R;D+=3)B=X+
b[D],K=X+b[D+1],E=X+b[D+2],a(B),a(K),a(E)}this.tangentsNeedUpdate=this.hasTangents=!0}},deallocate:function(){var a=THREE.GeometryLibrary.indexOf(this);-1!==a&&THREE.GeometryLibrary.splice(a,1)}};
THREE.Spline=function(a){function b(a,b,c,d,e,f,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,h,j,i,k,l,o,n;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);h=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;k=this.points[c[0]];l=this.points[c[1]];o=this.points[c[2]];n=this.points[c[3]];j=h*h;i=h*j;d.x=b(k.x,l.x,o.x,n.x,h,j,i);d.y=b(k.y,l.y,o.y,n.y,h,j,i);d.z=b(k.z,l.z,o.z,n.z,h,j,i);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,h=new THREE.Vector3,i=[],j=0;i[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),j+=h.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(i[b]=j,e=b);i[i.length]=j;return{chunks:i,total:j}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,h,i=[],j=new THREE.Vector3,l=this.getLength();i.push(j.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=l.chunks[b]-l.chunks[b-1];h=Math.ceil(a*c/l.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(f-e),d=this.getPoint(d),
i.push(j.copy(d).clone());i.push(j.copy(this.points[b]).clone())}this.points=i}};THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);
THREE.Camera.prototype.lookAt=function(a){this.matrix.lookAt(this.position,a,this.up);!0===this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))};THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};
THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*Math.atan(b/(2*a))*(180/Math.PI);this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(this.fov*Math.PI/360)*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};
THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=
new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.groundColor=new THREE.Color(b);this.position=new THREE.Vector3(0,100,0);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,0,0);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);
THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/2;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=
this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,f,i,j,k,r){var p=f.toLowerCase().endsWith(".dds"),A=b+"/"+f;if(p){var x=THREE.ImageUtils.loadCompressedTexture(A);a[e]=x}else x=document.createElement("canvas"),a[e]=new THREE.Texture(x);a[e].sourceFile=f;if(i&&(a[e].repeat.set(i[0],i[1]),1!==i[0]&&(a[e].wrapS=THREE.RepeatWrapping),1!==i[1]))a[e].wrapT=THREE.RepeatWrapping;j&&a[e].offset.set(j[0],j[1]);if(k&&(f={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},
void 0!==f[k[0]]&&(a[e].wrapS=f[k[0]]),void 0!==f[k[1]]))a[e].wrapT=f[k[1]];r&&(a[e].anisotropy=r);if(!p){var t=a[e],a=new Image;a.onload=function(){if(!c(this.width)||!c(this.height)){var a=d(this.width),b=d(this.height);t.image.width=a;t.image.height=b;t.image.getContext("2d").drawImage(this,0,0,a,b)}else t.image=this;t.needsUpdate=true};a.crossOrigin=h.crossOrigin;a.src=A}}function f(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,j="MeshLambertMaterial",i={color:15658734,opacity:1,map:null,
lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?j="MeshPhongMaterial":"basic"===k&&(j="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(i.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)i.transparent=a.transparent;void 0!==a.depthTest&&(i.depthTest=a.depthTest);void 0!==a.depthWrite&&(i.depthWrite=a.depthWrite);void 0!==a.visible&&(i.visible=a.visible);void 0!==a.flipSided&&(i.side=THREE.BackSide);
void 0!==a.doubleSided&&(i.side=THREE.DoubleSide);void 0!==a.wireframe&&(i.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?i.vertexColors=THREE.FaceColors:a.vertexColors&&(i.vertexColors=THREE.VertexColors));a.colorDiffuse?i.color=f(a.colorDiffuse):a.DbgColor&&(i.color=a.DbgColor);a.colorSpecular&&(i.specular=f(a.colorSpecular));a.colorAmbient&&(i.ambient=f(a.colorAmbient));a.transparency&&(i.opacity=a.transparency);a.specularCoef&&(i.shininess=a.specularCoef);a.mapDiffuse&&
b&&e(i,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&e(i,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&e(i,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&e(i,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&e(i,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(i.bumpScale=a.mapBumpScale);a.mapNormal?(j=THREE.ShaderUtils.lib.normal,k=THREE.UniformsUtils.clone(j.uniforms),k.tNormal.value=i.normalMap,a.mapNormalFactor&&k.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),i.map&&(k.tDiffuse.value=i.map,k.enableDiffuse.value=!0),i.specularMap&&(k.tSpecular.value=i.specularMap,k.enableSpecular.value=!0),i.lightMap&&(k.tAO.value=i.lightMap,k.enableAO.value=!0),k.uDiffuseColor.value.setHex(i.color),
k.uSpecularColor.value.setHex(i.specular),k.uAmbientColor.value.setHex(i.ambient),k.uShininess.value=i.shininess,void 0!==i.opacity&&(k.uOpacity.value=i.opacity),i=new THREE.ShaderMaterial({fragmentShader:j.fragmentShader,vertexShader:j.vertexShader,uniforms:k,lights:!0,fog:!0})):i=new THREE[j](i);void 0!==a.DbgName&&(i.name=a.DbgName);return i}};THREE.BinaryLoader=function(a){THREE.Loader.call(this,a)};THREE.BinaryLoader.prototype=Object.create(THREE.Loader.prototype);
THREE.BinaryLoader.prototype.load=function(a,b,c,d){var c=c&&"string"===typeof c?c:this.extractUrlBase(a),d=d&&"string"===typeof d?d:this.extractUrlBase(a),e=this.showProgress?THREE.Loader.prototype.updateProgress:null;this.onLoadStart();this.loadAjaxJSON(this,a,b,c,d,e)};
THREE.BinaryLoader.prototype.loadAjaxJSON=function(a,b,c,d,e,f){var h=new XMLHttpRequest;h.onreadystatechange=function(){if(4==h.readyState)if(200==h.status||0==h.status){var j=JSON.parse(h.responseText);a.loadAjaxBuffers(j,c,e,d,f)}else console.error("THREE.BinaryLoader: Couldn't load ["+b+"] ["+h.status+"]")};h.open("GET",b,!0);h.send(null)};
THREE.BinaryLoader.prototype.loadAjaxBuffers=function(a,b,c,d,e){var f=new XMLHttpRequest,h=c+"/"+a.buffers,j=0;f.onreadystatechange=function(){if(4==f.readyState)if(200==f.status||0==f.status){var c=f.response;void 0===c&&(c=(new Uint8Array(f.responseBody)).buffer);THREE.BinaryLoader.prototype.createBinModel(c,b,d,a.materials)}else console.error("THREE.BinaryLoader: Couldn't load ["+h+"] ["+f.status+"]");else 3==f.readyState?e&&(0==j&&(j=f.getResponseHeader("Content-Length")),e({total:j,loaded:f.responseText.length})):
2==f.readyState&&(j=f.getResponseHeader("Content-Length"))};f.open("GET",h,!0);f.responseType="arraybuffer";f.send(null)};
THREE.BinaryLoader.prototype.createBinModel=function(a,b,c,d){var e=function(){var b,c,d,e,k,l,o,n,u,m,v,r,p,A,x,t;function G(a){return a%4?4-a%4:0}function C(a,b){return(new Uint8Array(a,b,1))[0]}function w(a,b){return(new Uint32Array(a,b,1))[0]}function y(b,c){var d,e,f,h,i,j,k,l=new Uint32Array(a,c,3*b);for(d=0;d<b;d++)e=l[3*d],f=l[3*d+1],h=l[3*d+2],i=X[2*e],e=X[2*e+1],j=X[2*f],k=X[2*f+1],f=X[2*h],h=X[2*h+1],K.faceVertexUvs[0].push([new THREE.UV(i,e),new THREE.UV(j,k),new THREE.UV(f,h)])}function D(b,
c){var d,e,f,h,i,j,k,l,n,m=new Uint32Array(a,c,4*b);for(d=0;d<b;d++)e=m[4*d],f=m[4*d+1],h=m[4*d+2],i=m[4*d+3],j=X[2*e],e=X[2*e+1],k=X[2*f],l=X[2*f+1],f=X[2*h],n=X[2*h+1],h=X[2*i],i=X[2*i+1],K.faceVertexUvs[0].push([new THREE.UV(j,e),new THREE.UV(k,l),new THREE.UV(f,n),new THREE.UV(h,i)])}function R(b,c,d){for(var e,f,h,i,c=new Uint32Array(a,c,3*b),j=new Uint16Array(a,d,b),d=0;d<b;d++)e=c[3*d],f=c[3*d+1],h=c[3*d+2],i=j[d],K.faces.push(new THREE.Face3(e,f,h,null,null,i))}function H(b,c,d){for(var e,
f,h,i,j,c=new Uint32Array(a,c,4*b),k=new Uint16Array(a,d,b),d=0;d<b;d++)e=c[4*d],f=c[4*d+1],h=c[4*d+2],i=c[4*d+3],j=k[d],K.faces.push(new THREE.Face4(e,f,h,i,null,null,j))}function $(b,c,d,e){for(var f,h,i,j,k,l,n,c=new Uint32Array(a,c,3*b),d=new Uint32Array(a,d,3*b),m=new Uint16Array(a,e,b),e=0;e<b;e++){f=c[3*e];h=c[3*e+1];i=c[3*e+2];k=d[3*e];l=d[3*e+1];n=d[3*e+2];j=m[e];var o=O[3*l],p=O[3*l+1];l=O[3*l+2];var r=O[3*n],t=O[3*n+1];n=O[3*n+2];K.faces.push(new THREE.Face3(f,h,i,[new THREE.Vector3(O[3*
k],O[3*k+1],O[3*k+2]),new THREE.Vector3(o,p,l),new THREE.Vector3(r,t,n)],null,j))}}function B(b,c,d,e){for(var f,h,i,j,k,l,n,m,o,c=new Uint32Array(a,c,4*b),d=new Uint32Array(a,d,4*b),p=new Uint16Array(a,e,b),e=0;e<b;e++){f=c[4*e];h=c[4*e+1];i=c[4*e+2];j=c[4*e+3];l=d[4*e];n=d[4*e+1];m=d[4*e+2];o=d[4*e+3];k=p[e];var r=O[3*n],t=O[3*n+1];n=O[3*n+2];var u=O[3*m],w=O[3*m+1];m=O[3*m+2];var y=O[3*o],v=O[3*o+1];o=O[3*o+2];K.faces.push(new THREE.Face4(f,h,i,j,[new THREE.Vector3(O[3*l],O[3*l+1],O[3*l+2]),new THREE.Vector3(r,
t,n),new THREE.Vector3(u,w,m),new THREE.Vector3(y,v,o)],null,k))}}var K=this,E=0,O=[],X=[],Y,W,aa;THREE.Geometry.call(this);t=a;W=E;A=new Uint8Array(t,W,12);m="";for(p=0;12>p;p++)m+=String.fromCharCode(A[W+p]);b=C(t,W+12);C(t,W+13);C(t,W+14);C(t,W+15);c=C(t,W+16);d=C(t,W+17);e=C(t,W+18);k=C(t,W+19);l=w(t,W+20);o=w(t,W+20+4);n=w(t,W+20+8);u=w(t,W+20+12);m=w(t,W+20+16);v=w(t,W+20+20);r=w(t,W+20+24);p=w(t,W+20+28);A=w(t,W+20+32);x=w(t,W+20+36);t=w(t,W+20+40);E+=b;W=3*c+k;aa=4*c+k;Y=u*W;b=m*(W+3*d);c=
v*(W+3*e);k=r*(W+3*d+3*e);W=p*aa;d=A*(aa+4*d);e=x*(aa+4*e);aa=E;var E=new Float32Array(a,E,3*l),P,Ra,S,T;for(P=0;P<l;P++)Ra=E[3*P],S=E[3*P+1],T=E[3*P+2],K.vertices.push(new THREE.Vector3(Ra,S,T));l=E=aa+3*l*Float32Array.BYTES_PER_ELEMENT;if(o){E=new Int8Array(a,E,3*o);for(aa=0;aa<o;aa++)P=E[3*aa],Ra=E[3*aa+1],S=E[3*aa+2],O.push(P/127,Ra/127,S/127)}E=l+3*o*Int8Array.BYTES_PER_ELEMENT;o=E+=G(3*o);if(n){l=new Float32Array(a,E,2*n);for(E=0;E<n;E++)aa=l[2*E],P=l[2*E+1],X.push(aa,P)}n=E=o+2*n*Float32Array.BYTES_PER_ELEMENT;
Y=n+Y+G(2*u);o=Y+b+G(2*m);b=o+c+G(2*v);c=b+k+G(2*r);W=c+W+G(2*p);k=W+d+G(2*A);d=k+e+G(2*x);v&&(e=o+3*v*Uint32Array.BYTES_PER_ELEMENT,R(v,o,e+3*v*Uint32Array.BYTES_PER_ELEMENT),y(v,e));r&&(v=b+3*r*Uint32Array.BYTES_PER_ELEMENT,e=v+3*r*Uint32Array.BYTES_PER_ELEMENT,$(r,b,v,e+3*r*Uint32Array.BYTES_PER_ELEMENT),y(r,e));x&&(r=k+4*x*Uint32Array.BYTES_PER_ELEMENT,H(x,k,r+4*x*Uint32Array.BYTES_PER_ELEMENT),D(x,r));t&&(x=d+4*t*Uint32Array.BYTES_PER_ELEMENT,r=x+4*t*Uint32Array.BYTES_PER_ELEMENT,B(t,d,x,r+4*
t*Uint32Array.BYTES_PER_ELEMENT),D(t,r));u&&R(u,n,n+3*u*Uint32Array.BYTES_PER_ELEMENT);m&&(u=Y+3*m*Uint32Array.BYTES_PER_ELEMENT,$(m,Y,u,u+3*m*Uint32Array.BYTES_PER_ELEMENT));p&&H(p,c,c+4*p*Uint32Array.BYTES_PER_ELEMENT);A&&(m=W+4*A*Uint32Array.BYTES_PER_ELEMENT,B(A,W,m,m+4*A*Uint32Array.BYTES_PER_ELEMENT));this.computeCentroids();this.computeFaceNormals()};e.prototype=Object.create(THREE.Geometry.prototype);e=new e(c);c=this.initMaterials(d,c);this.needsTangents(c)&&e.computeTangents();b(e,c)};
THREE.ImageLoader=function(){THREE.EventTarget.call(this);this.crossOrigin=null};THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b){var c=this;void 0===b&&(b=new Image);b.addEventListener("load",function(){c.dispatchEvent({type:"load",content:b})},!1);b.addEventListener("error",function(){c.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);c.crossOrigin&&(b.crossOrigin=c.crossOrigin);b.src=a}};
THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,h=0;f.withCredentials=this.withCredentials;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var j=JSON.parse(f.responseText);a.createModel(j,c,d)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+f.status+"]");else f.readyState===
f.LOADING?e&&(0===h&&(h=f.getResponseHeader("Content-Length")),e({total:h,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&(h=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.send(null)};
THREE.JSONLoader.prototype.createModel=function(a,b,c){var d=new THREE.Geometry,e=void 0!==a.scale?1/a.scale:1,f,h,j,i,k,l,o,n,u,m,v,r,p,A,x,t=a.faces;m=a.vertices;var G=a.normals,C=a.colors,w=0;for(f=0;f<a.uvs.length;f++)a.uvs[f].length&&w++;for(f=0;f<w;f++)d.faceUvs[f]=[],d.faceVertexUvs[f]=[];i=0;for(k=m.length;i<k;)l=new THREE.Vector3,l.x=m[i++]*e,l.y=m[i++]*e,l.z=m[i++]*e,d.vertices.push(l);i=0;for(k=t.length;i<k;){m=t[i++];l=m&1;j=m&2;f=m&4;h=m&8;n=m&16;o=m&32;v=m&64;m&=128;l?(r=new THREE.Face4,
r.a=t[i++],r.b=t[i++],r.c=t[i++],r.d=t[i++],l=4):(r=new THREE.Face3,r.a=t[i++],r.b=t[i++],r.c=t[i++],l=3);j&&(j=t[i++],r.materialIndex=j);j=d.faces.length;if(f)for(f=0;f<w;f++)p=a.uvs[f],u=t[i++],x=p[2*u],u=p[2*u+1],d.faceUvs[f][j]=new THREE.UV(x,u);if(h)for(f=0;f<w;f++){p=a.uvs[f];A=[];for(h=0;h<l;h++)u=t[i++],x=p[2*u],u=p[2*u+1],A[h]=new THREE.UV(x,u);d.faceVertexUvs[f][j]=A}n&&(n=3*t[i++],h=new THREE.Vector3,h.x=G[n++],h.y=G[n++],h.z=G[n],r.normal=h);if(o)for(f=0;f<l;f++)n=3*t[i++],h=new THREE.Vector3,
h.x=G[n++],h.y=G[n++],h.z=G[n],r.vertexNormals.push(h);v&&(o=t[i++],o=new THREE.Color(C[o]),r.color=o);if(m)for(f=0;f<l;f++)o=t[i++],o=new THREE.Color(C[o]),r.vertexColors.push(o);d.faces.push(r)}if(a.skinWeights){i=0;for(k=a.skinWeights.length;i<k;i+=2)t=a.skinWeights[i],G=a.skinWeights[i+1],d.skinWeights.push(new THREE.Vector4(t,G,0,0))}if(a.skinIndices){i=0;for(k=a.skinIndices.length;i<k;i+=2)t=a.skinIndices[i],G=a.skinIndices[i+1],d.skinIndices.push(new THREE.Vector4(t,G,0,0))}d.bones=a.bones;
d.animation=a.animation;if(void 0!==a.morphTargets){i=0;for(k=a.morphTargets.length;i<k;i++){d.morphTargets[i]={};d.morphTargets[i].name=a.morphTargets[i].name;d.morphTargets[i].vertices=[];C=d.morphTargets[i].vertices;w=a.morphTargets[i].vertices;t=0;for(G=w.length;t<G;t+=3)m=new THREE.Vector3,m.x=w[t]*e,m.y=w[t+1]*e,m.z=w[t+2]*e,C.push(m)}}if(void 0!==a.morphColors){i=0;for(k=a.morphColors.length;i<k;i++){d.morphColors[i]={};d.morphColors[i].name=a.morphColors[i].name;d.morphColors[i].colors=[];
G=d.morphColors[i].colors;C=a.morphColors[i].colors;e=0;for(t=C.length;e<t;e+=3)w=new THREE.Color(16755200),w.setRGB(C[e],C[e+1],C[e+2]),G.push(w)}}d.computeCentroids();d.computeFaceNormals();a=this.initMaterials(a.materials,c);this.needsTangents(a)&&d.computeTangents();b(d,a)};
THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlerMap={};this.hierarchyHandlerMap={};this.addGeometryHandler("ascii",THREE.JSONLoader);this.addGeometryHandler("binary",THREE.BinaryLoader)};THREE.SceneLoader.prototype.constructor=THREE.SceneLoader;
THREE.SceneLoader.prototype.load=function(a,b){var c=this,d=new XMLHttpRequest;d.onreadystatechange=function(){if(4===d.readyState)if(200===d.status||0===d.status){var e=JSON.parse(d.responseText);c.parse(e,b,a)}else console.error("THREE.SceneLoader: Couldn't load ["+a+"] ["+d.status+"]")};d.open("GET",a,!0);d.send(null)};THREE.SceneLoader.prototype.addGeometryHandler=function(a,b){this.geometryHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.addHierarchyHandler=function(a,b){this.hierarchyHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.parse=function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:o+"/"+a}function e(){f(P.scene,S.objects)}function f(a,b){for(var c in b)if(void 0===P.objects[c]){var e=b[c],h=null;if(e.type&&e.type in l.hierarchyHandlerMap&&void 0===e.loading){var i={},k;for(k in r)"type"!==k&&"url"!==k&&(i[k]=r[k]);R=P.materials[e.material];e.loading=!0;var n=l.hierarchyHandlerMap[e.type].loaderObject;n.addEventListener?(n.addEventListener("load",j(c,a,R,e)),n.load(d(e.url,S.urlBaseType))):
n.options?n.load(d(e.url,S.urlBaseType),j(c,a,R,e)):n.load(d(e.url,S.urlBaseType),j(c,a,R,e),i)}else if(void 0!==e.geometry){if(D=P.geometries[e.geometry]){h=!1;R=P.materials[e.material];h=R instanceof THREE.ShaderMaterial;x=e.position;t=e.rotation;G=e.quaternion;C=e.scale;p=e.matrix;G=0;e.material||(R=new THREE.MeshFaceMaterial(P.face_materials[e.geometry]));R instanceof THREE.MeshFaceMaterial&&0===R.materials.length&&(R=new THREE.MeshFaceMaterial(P.face_materials[e.geometry]));if(R instanceof THREE.MeshFaceMaterial)for(i=
0;i<R.materials.length;i++)h=h||R.materials[i]instanceof THREE.ShaderMaterial;h&&D.computeTangents();e.skin?h=new THREE.SkinnedMesh(D,R):e.morph?(h=new THREE.MorphAnimMesh(D,R),void 0!==e.duration&&(h.duration=e.duration),void 0!==e.time&&(h.time=e.time),void 0!==e.mirroredLoop&&(h.mirroredLoop=e.mirroredLoop),R.morphNormals&&D.computeMorphNormals()):h=new THREE.Mesh(D,R);h.name=c;p?(h.matrixAutoUpdate=!1,h.matrix.set(p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[8],p[9],p[10],p[11],p[12],p[13],p[14],
p[15])):(h.position.set(x[0],x[1],x[2]),G?(h.quaternion.set(G[0],G[1],G[2],G[3]),h.useQuaternion=!0):h.rotation.set(t[0],t[1],t[2]),h.scale.set(C[0],C[1],C[2]));h.visible=e.visible;h.castShadow=e.castShadow;h.receiveShadow=e.receiveShadow;a.add(h);P.objects[c]=h}}else"DirectionalLight"===e.type||"PointLight"===e.type||"AmbientLight"===e.type?(E=void 0!==e.color?e.color:16777215,O=void 0!==e.intensity?e.intensity:1,"DirectionalLight"===e.type?(x=e.direction,K=new THREE.DirectionalLight(E,O),K.position.set(x[0],
x[1],x[2]),e.target&&(Ra.push({object:K,targetName:e.target}),K.target=null)):"PointLight"===e.type?(x=e.position,A=e.distance,K=new THREE.PointLight(E,O,A),K.position.set(x[0],x[1],x[2])):"AmbientLight"===e.type&&(K=new THREE.AmbientLight(E)),a.add(K),K.name=c,P.lights[c]=K,P.objects[c]=K):"PerspectiveCamera"===e.type||"OrthographicCamera"===e.type?("PerspectiveCamera"===e.type?H=new THREE.PerspectiveCamera(e.fov,e.aspect,e.near,e.far):"OrthographicCamera"===e.type&&(H=new THREE.OrthographicCamera(w.left,
w.right,w.top,w.bottom,w.near,w.far)),x=e.position,H.position.set(x[0],x[1],x[2]),a.add(H),H.name=c,P.cameras[c]=H,P.objects[c]=H):(x=e.position,t=e.rotation,G=e.quaternion,C=e.scale,G=0,h=new THREE.Object3D,h.name=c,h.position.set(x[0],x[1],x[2]),G?(h.quaternion.set(G[0],G[1],G[2],G[3]),h.useQuaternion=!0):h.rotation.set(t[0],t[1],t[2]),h.scale.set(C[0],C[1],C[2]),h.visible=void 0!==e.visible?e.visible:!1,a.add(h),P.objects[c]=h,P.empties[c]=h);if(h){if(void 0!==e.properties)for(var m in e.properties)h.properties[m]=
e.properties[m];void 0!==e.children&&f(h,e.children)}}}function h(a){return function(b,c){P.geometries[a]=b;P.face_materials[a]=c;e();X-=1;l.onLoadComplete();k()}}function j(a,b,c,d){return function(f){var f=f.content?f.content:f.dae?f.scene:f,h=d.position,i=d.rotation,j=d.quaternion,n=d.scale;f.position.set(h[0],h[1],h[2]);j?(f.quaternion.set(j[0],j[1],j[2],j[3]),f.useQuaternion=!0):f.rotation.set(i[0],i[1],i[2]);f.scale.set(n[0],n[1],n[2]);c&&f.traverse(function(a){a.material=c});b.add(f);P.objects[a]=
f;e();X-=1;l.onLoadComplete();k()}}function i(a){return function(b,c){P.geometries[a]=b;P.face_materials[a]=c}}function k(){l.callbackProgress({totalModels:W,totalTextures:aa,loadedModels:W-X,loadedTextures:aa-Y},P);l.onLoadProgress();if(0===X&&0===Y){for(var a=0;a<Ra.length;a++){var c=Ra[a],d=P.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,P.scene.add(c.object.target));c.object.target.properties.targetInverse=c.object}b(P)}}var l=this,o=THREE.Loader.prototype.extractUrlBase(c),
n,u,m,v,r,p,A,x,t,G,C,w,y,D,R,H,$,B,K,E,O,X,Y,W,aa,P,Ra=[],S=a,T;for(T in this.geometryHandlerMap)a=this.geometryHandlerMap[T].loaderClass,this.geometryHandlerMap[T].loaderObject=new a;for(T in this.hierarchyHandlerMap)a=this.hierarchyHandlerMap[T].loaderClass,this.hierarchyHandlerMap[T].loaderObject=new a;Y=X=0;P={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{}};if(S.transform&&(T=S.transform.position,a=S.transform.rotation,
c=S.transform.scale,T&&P.scene.position.set(T[0],T[1],T[2]),a&&P.scene.rotation.set(a[0],a[1],a[2]),c&&P.scene.scale.set(c[0],c[1],c[2]),T||a||c))P.scene.updateMatrix(),P.scene.updateMatrixWorld();T=function(a){return function(){Y-=a;k();l.onLoadComplete()}};for(m in S.fogs)a=S.fogs[m],"linear"===a.type?$=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&($=new THREE.FogExp2(0,a.density)),w=a.color,$.color.setRGB(w[0],w[1],w[2]),P.fogs[m]=$;for(n in S.geometries)r=S.geometries[n],r.type in this.geometryHandlerMap&&
(X+=1,l.onLoadStart());for(var F in S.objects)m=S.objects[F],m.type&&m.type in this.hierarchyHandlerMap&&(X+=1,l.onLoadStart());W=X;for(n in S.geometries)if(r=S.geometries[n],"cube"===r.type)D=new THREE.CubeGeometry(r.width,r.height,r.depth,r.widthSegments,r.heightSegments,r.depthSegments),P.geometries[n]=D;else if("plane"===r.type)D=new THREE.PlaneGeometry(r.width,r.height,r.widthSegments,r.heightSegments),P.geometries[n]=D;else if("sphere"===r.type)D=new THREE.SphereGeometry(r.radius,r.widthSegments,
r.heightSegments),P.geometries[n]=D;else if("cylinder"===r.type)D=new THREE.CylinderGeometry(r.topRad,r.botRad,r.height,r.radSegs,r.heightSegs),P.geometries[n]=D;else if("torus"===r.type)D=new THREE.TorusGeometry(r.radius,r.tube,r.segmentsR,r.segmentsT),P.geometries[n]=D;else if("icosahedron"===r.type)D=new THREE.IcosahedronGeometry(r.radius,r.subdivisions),P.geometries[n]=D;else if(r.type in this.geometryHandlerMap){F={};for(B in r)"type"!==B&&"url"!==B&&(F[B]=r[B]);this.geometryHandlerMap[r.type].loaderObject.load(d(r.url,
S.urlBaseType),h(n),F)}else"embedded"===r.type&&(F=S.embeds[r.id],F.metadata=S.metadata,F&&this.geometryHandlerMap.ascii.loaderObject.createModel(F,i(n),""));for(v in S.textures)if(n=S.textures[v],n.url instanceof Array){Y+=n.url.length;for(B=0;B<n.url.length;B++)l.onLoadStart()}else Y+=1,l.onLoadStart();aa=Y;for(v in S.textures){n=S.textures[v];void 0!==n.mapping&&void 0!==THREE[n.mapping]&&(n.mapping=new THREE[n.mapping]);if(n.url instanceof Array){F=n.url.length;m=[];for(B=0;B<F;B++)m[B]=d(n.url[B],
S.urlBaseType);B=(B=m[0].endsWith(".dds"))?THREE.ImageUtils.loadCompressedTextureCube(m,n.mapping,T(F)):THREE.ImageUtils.loadTextureCube(m,n.mapping,T(F))}else{B=n.url.toLowerCase().endsWith(".dds");F=d(n.url,S.urlBaseType);m=T(1);B=B?THREE.ImageUtils.loadCompressedTexture(F,n.mapping,m):THREE.ImageUtils.loadTexture(F,n.mapping,m);void 0!==THREE[n.minFilter]&&(B.minFilter=THREE[n.minFilter]);void 0!==THREE[n.magFilter]&&(B.magFilter=THREE[n.magFilter]);n.anisotropy&&(B.anisotropy=n.anisotropy);if(n.repeat&&
(B.repeat.set(n.repeat[0],n.repeat[1]),1!==n.repeat[0]&&(B.wrapS=THREE.RepeatWrapping),1!==n.repeat[1]))B.wrapT=THREE.RepeatWrapping;n.offset&&B.offset.set(n.offset[0],n.offset[1]);if(n.wrap&&(F={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==F[n.wrap[0]]&&(B.wrapS=F[n.wrap[0]]),void 0!==F[n.wrap[1]]))B.wrapT=F[n.wrap[1]]}P.textures[v]=B}for(u in S.materials){p=S.materials[u];for(y in p.parameters)"envMap"===y||"map"===y||"lightMap"===y||"bumpMap"===y?p.parameters[y]=P.textures[p.parameters[y]]:
"shading"===y?p.parameters[y]="flat"===p.parameters[y]?THREE.FlatShading:THREE.SmoothShading:"side"===y?p.parameters[y]="double"==p.parameters[y]?THREE.DoubleSide:"back"==p.parameters[y]?THREE.BackSide:THREE.FrontSide:"blending"===y?p.parameters[y]=p.parameters[y]in THREE?THREE[p.parameters[y]]:THREE.NormalBlending:"combine"===y?p.parameters[y]="MixOperation"==p.parameters[y]?THREE.MixOperation:THREE.MultiplyOperation:"vertexColors"===y?"face"==p.parameters[y]?p.parameters[y]=THREE.FaceColors:p.parameters[y]&&
(p.parameters[y]=THREE.VertexColors):"wrapRGB"===y&&(v=p.parameters[y],p.parameters[y]=new THREE.Vector3(v[0],v[1],v[2]));void 0!==p.parameters.opacity&&1>p.parameters.opacity&&(p.parameters.transparent=!0);p.parameters.normalMap?(v=THREE.ShaderUtils.lib.normal,T=THREE.UniformsUtils.clone(v.uniforms),n=p.parameters.color,B=p.parameters.specular,F=p.parameters.ambient,m=p.parameters.shininess,T.tNormal.value=P.textures[p.parameters.normalMap],p.parameters.normalScale&&T.uNormalScale.value.set(p.parameters.normalScale[0],
p.parameters.normalScale[1]),p.parameters.map&&(T.tDiffuse.value=p.parameters.map,T.enableDiffuse.value=!0),p.parameters.envMap&&(T.tCube.value=p.parameters.envMap,T.enableReflection.value=!0,T.uReflectivity.value=p.parameters.reflectivity),p.parameters.lightMap&&(T.tAO.value=p.parameters.lightMap,T.enableAO.value=!0),p.parameters.specularMap&&(T.tSpecular.value=P.textures[p.parameters.specularMap],T.enableSpecular.value=!0),p.parameters.displacementMap&&(T.tDisplacement.value=P.textures[p.parameters.displacementMap],
T.enableDisplacement.value=!0,T.uDisplacementBias.value=p.parameters.displacementBias,T.uDisplacementScale.value=p.parameters.displacementScale),T.uDiffuseColor.value.setHex(n),T.uSpecularColor.value.setHex(B),T.uAmbientColor.value.setHex(F),T.uShininess.value=m,p.parameters.opacity&&(T.uOpacity.value=p.parameters.opacity),R=new THREE.ShaderMaterial({fragmentShader:v.fragmentShader,vertexShader:v.vertexShader,uniforms:T,lights:!0,fog:!0})):R=new THREE[p.type](p.parameters);P.materials[u]=R}for(u in S.materials)if(p=
S.materials[u],p.parameters.materials){y=[];for(B=0;B<p.parameters.materials.length;B++)y.push(P.materials[p.parameters.materials[B]]);P.materials[u].materials=y}e();P.cameras&&S.defaults.camera&&(P.currentCamera=P.cameras[S.defaults.camera]);P.fogs&&S.defaults.fog&&(P.scene.fog=P.fogs[S.defaults.fog]);w=S.defaults.bgcolor;P.bgColor=new THREE.Color;P.bgColor.setRGB(w[0],w[1],w[2]);P.bgColorAlpha=S.defaults.bgalpha;l.callbackSync(P);k()};
THREE.TextureLoader=function(){THREE.EventTarget.call(this);this.crossOrigin=null};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a){var b=this,c=new Image;c.addEventListener("load",function(){var a=new THREE.Texture(c);a.needsUpdate=!0;b.dispatchEvent({type:"load",content:a})},!1);c.addEventListener("error",function(){b.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);b.crossOrigin&&(c.crossOrigin=b.crossOrigin);c.src=a}};
THREE.Material=function(){THREE.MaterialLibrary.push(this);this.id=THREE.MaterialIdCount++;this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.overdraw=!1;this.needsUpdate=this.visible=!0};
THREE.Material.prototype.setValues=function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color&&c instanceof THREE.Color?d.copy(c):d instanceof THREE.Color&&"number"===typeof c?d.setHex(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]=c}}};
THREE.Material.prototype.clone=function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;
a.visible=this.visible;return a};THREE.Material.prototype.deallocate=function(){var a=THREE.MaterialLibrary.indexOf(this);-1!==a&&THREE.MaterialLibrary.splice(a,1)};THREE.MaterialIdCount=0;THREE.MaterialLibrary=[];THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};
THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.Texture=function(a,b,c,d,e,f,h,j,i){THREE.TextureLibrary.push(this);this.id=THREE.TextureIdCount++;this.name="";this.image=a;this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==i?i:1;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==j?j:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(){var a=new THREE.Texture;a.image=this.image;a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;return a},deallocate:function(){var a=THREE.TextureLibrary.indexOf(this);
-1!==a&&THREE.TextureLibrary.splice(a,1)}};THREE.TextureIdCount=0;THREE.TextureLibrary=[];THREE.CompressedTexture=function(a,b,c,d,e,f,h,j,i,k){THREE.Texture.call(this,null,f,h,j,i,k,d,e);this.image={width:b,height:c};this.mipmaps=a};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;a.image=this.image;a.mipmaps=this.mipmaps;a.format=this.format;a.type=this.type;a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a};THREE.DataTexture=function(a,b,c,d,e,f,h,j,i,k){THREE.Texture.call(this,null,f,h,j,i,k,d,e);this.image={data:a,width:b,height:c}};
THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture(this.image.data,this.image.width,this.image.height,this.format,this.type,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter);a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);
THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.sortParticles=!1;this.geometry&&(null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius);this.frustumCulled=!1};
THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});if(this.geometry&&(null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius,this.geometry.morphTargets.length)){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var c=0;c<this.geometry.morphTargets.length;c++)this.morphTargetInfluences.push(0),
this.morphTargetDictionary[this.geometry.morphTargets[c].name]=c}};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};
THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiply(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};
THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,f;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,f=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),b.useQuaternion=!0,void 0!==f?b.scale.set(f[0],f[1],f[2]):b.scale.set(1,1,1);for(a=
0;a<this.bones.length;a++)c=this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(4*this.boneTextureWidth*this.boneTextureHeight),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,
this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var a=0,b=this.children.length;a<b;a++){var c=this.children[a];c instanceof THREE.Bone?c.update(this.identityMatrix,!1):c.updateMatrixWorld(!0)}if(void 0==this.boneInverses){this.boneInverses=[];a=0;for(b=this.bones.length;a<
b;a++)c=new THREE.Matrix4,c.getInverse(this.bones[a].skinMatrix),this.boneInverses.push(c)}a=0;for(b=this.bones.length;a<b;a++)THREE.SkinnedMesh.offsetMatrix.multiply(this.bones[a].skinMatrix,this.boneInverses[a]),THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset(this.boneMatrices,16*a);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)};
THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.SkinnedMesh.offsetMatrix=new THREE.Matrix4;
THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var h=a.morphTargets[e].name.match(d);if(h&&1<h.length){h=h[1];c[h]||(c[h]={start:Infinity,end:-Infinity});var j=c[h];e<j.start&&(j.start=e);e>j.end&&(j.end=e);b||(b=h)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=1E3*((c.end-c.start)/b),this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)if(this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time)this.time=0,this.directionBackwards=!1}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);
THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.elements[2]*this.matrixWorld.elements[12]+a.elements[6]*this.matrixWorld.elements[13]+a.elements[10]*this.matrixWorld.elements[14]+a.elements[14]);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=
!1}};THREE.LOD.prototype.clone=function(){};
THREE.Sprite=function(a){THREE.Object3D.call(this);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:new THREE.Texture;this.blending=void 0!==a.blending?a.blending:THREE.NormalBlending;this.blendSrc=void 0!==a.blendSrc?a.blendSrc:THREE.SrcAlphaFactor;this.blendDst=void 0!==a.blendDst?a.blendDst:THREE.OneMinusSrcAlphaFactor;this.blendEquation=void 0!==a.blendEquation?a.blendEquation:THREE.AddEquation;this.useScreenCoordinates=void 0!==
a.useScreenCoordinates?a.useScreenCoordinates:!0;this.mergeWith3D=void 0!==a.mergeWith3D?a.mergeWith3D:!this.useScreenCoordinates;this.affectedByDistance=void 0!==a.affectedByDistance?a.affectedByDistance:!this.useScreenCoordinates;this.scaleByViewport=void 0!==a.scaleByViewport?a.scaleByViewport:!this.affectedByDistance;this.alignment=a.alignment instanceof THREE.Vector2?a.alignment:THREE.SpriteAlignment.center.clone();this.fog=void 0!==a.fog?a.fog:!1;this.rotation3d=this.rotation;this.rotation=
0;this.opacity=1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1)};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);if(1!==this.scale.x||1!==this.scale.y)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,this.scale.y);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite({}));a.color.copy(this.color);a.map=this.map;a.blending=this.blending;a.useScreenCoordinates=this.useScreenCoordinates;a.mergeWith3D=this.mergeWith3D;a.affectedByDistance=this.affectedByDistance;a.scaleByViewport=this.scaleByViewport;a.alignment=this.alignment;a.fog=this.fog;a.rotation3d.copy(this.rotation3d);a.rotation=this.rotation;a.opacity=this.opacity;a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);THREE.Object3D.prototype.clone.call(this,
a);return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);
THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};
THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};
THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",
lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -viewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",
value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,
THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,
"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,
THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,
THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,
THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,
"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",
THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,
THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,
THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,
THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",
value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",
THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,
THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};
THREE.WebGLRenderer=function(a){function b(a){if(a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)g.deleteBuffer(a.__webglCustomAttributesList[b].buffer)}function c(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var h=1;"v2"===f.type?h=2:"v3"===f.type?h=3:"v4"===f.type?
h=4:"c"===f.type&&(h=3);f.size=h;f.array=new Float32Array(c*h);f.buffer=g.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}function d(a,b){var c=b.geometry,d=a.faces3,i=a.faces4,j=3*d.length+4*i.length,k=1*d.length+2*i.length,i=3*d.length+4*i.length,d=e(b,a),l=h(d),n=f(d),m=d.vertexColors?d.vertexColors:!1;a.__vertexArray=new Float32Array(3*j);n&&(a.__normalArray=new Float32Array(3*j));c.hasTangents&&(a.__tangentArray=new Float32Array(4*j));m&&
(a.__colorArray=new Float32Array(3*j));if(l){if(0<c.faceUvs.length||0<c.faceVertexUvs.length)a.__uvArray=new Float32Array(2*j);if(1<c.faceUvs.length||1<c.faceVertexUvs.length)a.__uv2Array=new Float32Array(2*j)}b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&(a.__skinIndexArray=new Float32Array(4*j),a.__skinWeightArray=new Float32Array(4*j));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*i);if(a.numMorphTargets){a.__morphTargetsArrays=[];c=0;for(l=a.numMorphTargets;c<
l;c++)a.__morphTargetsArrays.push(new Float32Array(3*j))}if(a.numMorphNormals){a.__morphNormalsArrays=[];c=0;for(l=a.numMorphNormals;c<l;c++)a.__morphNormalsArrays.push(new Float32Array(3*j))}a.__webglFaceCount=3*k;a.__webglLineCount=2*i;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var o in d.attributes){var k=d.attributes[o],c={},p;for(p in k)c[p]=k[p];if(!c.__webglInitialized||c.createUniqueBuffers)c.__webglInitialized=!0,i=1,"v2"===c.type?i=2:
"v3"===c.type?i=3:"v4"===c.type?i=4:"c"===c.type&&(i=3),c.size=i,c.array=new Float32Array(j*i),c.buffer=g.createBuffer(),c.buffer.belongsToAttribute=o,k.needsUpdate=!0,c.__original=k;a.__webglCustomAttributesList.push(c)}}a.__inittedArrays=!0}function e(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function f(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===
THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function h(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function j(a){var b,c,d;for(b in a.attributes)d="index"===b?g.ELEMENT_ARRAY_BUFFER:g.ARRAY_BUFFER,c=a.attributes[b],c.buffer=g.createBuffer(),g.bindBuffer(d,c.buffer),g.bufferData(d,c.array,g.STATIC_DRAW)}function i(a,b,c){var d,e,f,h,i=a.vertices;h=i.length;var j=a.colors,k=j.length,l=a.__vertexArray,n=a.__colorArray,m=a.__sortArray,
o=a.verticesNeedUpdate,p=a.colorsNeedUpdate,r=a.__webglCustomAttributesList;if(c.sortParticles){Nb.copy(Ob);Nb.multiplySelf(c.matrixWorld);for(d=0;d<h;d++)e=i[d],gb.copy(e),Nb.multiplyVector3(gb),m[d]=[gb.z,d];m.sort(function(a,b){return b[0]-a[0]});for(d=0;d<h;d++)e=i[m[d][1]],f=3*d,l[f]=e.x,l[f+1]=e.y,l[f+2]=e.z;for(d=0;d<k;d++)f=3*d,e=j[m[d][1]],n[f]=e.r,n[f+1]=e.g,n[f+2]=e.b;if(r){j=0;for(k=r.length;j<k;j++)if(i=r[j],void 0===i.boundTo||"vertices"===i.boundTo)if(f=0,e=i.value.length,1===i.size)for(d=
0;d<e;d++)h=m[d][1],i.array[d]=i.value[h];else if(2===i.size)for(d=0;d<e;d++)h=m[d][1],h=i.value[h],i.array[f]=h.x,i.array[f+1]=h.y,f+=2;else if(3===i.size)if("c"===i.type)for(d=0;d<e;d++)h=m[d][1],h=i.value[h],i.array[f]=h.r,i.array[f+1]=h.g,i.array[f+2]=h.b,f+=3;else for(d=0;d<e;d++)h=m[d][1],h=i.value[h],i.array[f]=h.x,i.array[f+1]=h.y,i.array[f+2]=h.z,f+=3;else if(4===i.size)for(d=0;d<e;d++)h=m[d][1],h=i.value[h],i.array[f]=h.x,i.array[f+1]=h.y,i.array[f+2]=h.z,i.array[f+3]=h.w,f+=4}}else{if(o)for(d=
0;d<h;d++)e=i[d],f=3*d,l[f]=e.x,l[f+1]=e.y,l[f+2]=e.z;if(p)for(d=0;d<k;d++)e=j[d],f=3*d,n[f]=e.r,n[f+1]=e.g,n[f+2]=e.b;if(r){j=0;for(k=r.length;j<k;j++)if(i=r[j],i.needsUpdate&&(void 0===i.boundTo||"vertices"===i.boundTo))if(e=i.value.length,f=0,1===i.size)for(d=0;d<e;d++)i.array[d]=i.value[d];else if(2===i.size)for(d=0;d<e;d++)h=i.value[d],i.array[f]=h.x,i.array[f+1]=h.y,f+=2;else if(3===i.size)if("c"===i.type)for(d=0;d<e;d++)h=i.value[d],i.array[f]=h.r,i.array[f+1]=h.g,i.array[f+2]=h.b,f+=3;else for(d=
0;d<e;d++)h=i.value[d],i.array[f]=h.x,i.array[f+1]=h.y,i.array[f+2]=h.z,f+=3;else if(4===i.size)for(d=0;d<e;d++)h=i.value[d],i.array[f]=h.x,i.array[f+1]=h.y,i.array[f+2]=h.z,i.array[f+3]=h.w,f+=4}}if(o||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,l,b);if(p||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,a.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,n,b);if(r){j=0;for(k=r.length;j<k;j++)if(i=r[j],i.needsUpdate||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,
i.buffer),g.bufferData(g.ARRAY_BUFFER,i.array,b)}}function k(a,b,c){var d=a.attributes,e=d.index,f=d.position,h=d.normal,i=d.uv,j=d.color,d=d.tangent;a.elementsNeedUpdate&&void 0!==e&&(g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.buffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,e.array,b));a.verticesNeedUpdate&&void 0!==f&&(g.bindBuffer(g.ARRAY_BUFFER,f.buffer),g.bufferData(g.ARRAY_BUFFER,f.array,b));a.normalsNeedUpdate&&void 0!==h&&(g.bindBuffer(g.ARRAY_BUFFER,h.buffer),g.bufferData(g.ARRAY_BUFFER,h.array,b));
a.uvsNeedUpdate&&void 0!==i&&(g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.bufferData(g.ARRAY_BUFFER,i.array,b));a.colorsNeedUpdate&&void 0!==j&&(g.bindBuffer(g.ARRAY_BUFFER,j.buffer),g.bufferData(g.ARRAY_BUFFER,j.array,b));a.tangentsNeedUpdate&&void 0!==d&&(g.bindBuffer(g.ARRAY_BUFFER,d.buffer),g.bufferData(g.ARRAY_BUFFER,d.array,b));if(c)for(var k in a.attributes)delete a.attributes[k].array}function l(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}function o(a,b){return b[1]-a[1]}function n(a,b,c){if(a.length)for(var d=
0,e=a.length;d<e;d++)Ca=wa=null,ba=ca=Pa=na=eb=Xa=Ia=-1,Ab=!0,a[d].render(b,c,bc,cc),Ca=wa=null,ba=ca=Pa=na=eb=Xa=Ia=-1,Ab=!0}function u(a,b,c,d,e,g,f,h){var i,j,k,l;b?(j=a.length-1,l=b=-1):(j=0,b=a.length,l=1);for(var n=j;n!==b;n+=l)if(i=a[n],i.render){j=i.object;k=i.buffer;if(h)i=h;else{i=i[c];if(!i)continue;f&&F.setBlending(i.blending,i.blendEquation,i.blendSrc,i.blendDst);F.setDepthTest(i.depthTest);F.setDepthWrite(i.depthWrite);D(i.polygonOffset,i.polygonOffsetFactor,i.polygonOffsetUnits)}F.setMaterialFaces(i);
k instanceof THREE.BufferGeometry?F.renderBufferDirect(d,e,g,i,k,j):F.renderBuffer(d,e,g,i,k,j)}}function m(a,b,c,d,e,g,f){for(var h,i,j=0,k=a.length;j<k;j++)if(h=a[j],i=h.object,i.visible){if(f)h=f;else{h=h[b];if(!h)continue;g&&F.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);F.setDepthTest(h.depthTest);F.setDepthWrite(h.depthWrite);D(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}F.renderImmediateObject(c,d,e,h,i)}}function v(a,b,c){a.push({buffer:b,object:c,opaque:null,
transparent:null})}function r(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function p(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function A(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function x(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function t(a,b,c,d,e){ma=0;d.needsUpdate&&(d.program&&F.deallocateMaterial(d),F.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=
new Float32Array(F.maxMorphTargets));var f=!1,h=d.program,i=h.uniforms,j=d.uniforms;h!==wa&&(g.useProgram(h),wa=h,f=!0);d.id!==ba&&(ba=d.id,f=!0);if(f||a!==Ca)g.uniformMatrix4fv(i.projectionMatrix,!1,a._projectionMatrixArray),a!==Ca&&(Ca=a);if(d.skinning)if(Pb&&e.useVertexTexture){if(null!==i.boneTexture){var k=G();g.uniform1i(i.boneTexture,k);F.setTexture(e.boneTexture,k)}}else null!==i.boneGlobalMatrices&&g.uniformMatrix4fv(i.boneGlobalMatrices,!1,e.boneMatrices);if(f){c&&d.fog&&(j.fogColor.value=
c.color,c instanceof THREE.Fog?(j.fogNear.value=c.near,j.fogFar.value=c.far):c instanceof THREE.FogExp2&&(j.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Ab){for(var l=0,n=0,m=0,o,p,r,t=dc,u=t.directional.colors,v=t.directional.positions,x=t.point.colors,A=t.point.positions,B=t.point.distances,C=t.spot.colors,D=t.spot.positions,H=t.spot.distances,P=t.spot.directions,R=t.spot.anglesCos,S=t.spot.exponents,K=t.hemi.skyColors,
T=t.hemi.groundColors,W=t.hemi.positions,X=0,Y=0,aa=0,ca=0,ra=0,ya=0,na=0,Ba=0,ea=p=0,c=ea=ea=0,f=b.length;c<f;c++)k=b[c],k.onlyShadow||(o=k.color,r=k.intensity,p=k.distance,k instanceof THREE.AmbientLight?k.visible&&(F.gammaInput?(l+=o.r*o.r,n+=o.g*o.g,m+=o.b*o.b):(l+=o.r,n+=o.g,m+=o.b)):k instanceof THREE.DirectionalLight?(ra+=1,k.visible&&(p=3*X,F.gammaInput?w(u,p,o,r*r):y(u,p,o,r),oa.copy(k.matrixWorld.getPosition()),oa.subSelf(k.target.matrixWorld.getPosition()),oa.normalize(),v[p]=oa.x,v[p+
1]=oa.y,v[p+2]=oa.z,X+=1)):k instanceof THREE.PointLight?(ya+=1,k.visible&&(ea=3*Y,F.gammaInput?w(x,ea,o,r*r):y(x,ea,o,r),r=k.matrixWorld.getPosition(),A[ea]=r.x,A[ea+1]=r.y,A[ea+2]=r.z,B[Y]=p,Y+=1)):k instanceof THREE.SpotLight?(na+=1,k.visible&&(ea=3*aa,F.gammaInput?w(C,ea,o,r*r):y(C,ea,o,r),r=k.matrixWorld.getPosition(),D[ea]=r.x,D[ea+1]=r.y,D[ea+2]=r.z,H[aa]=p,oa.copy(r),oa.subSelf(k.target.matrixWorld.getPosition()),oa.normalize(),P[ea]=oa.x,P[ea+1]=oa.y,P[ea+2]=oa.z,R[aa]=Math.cos(k.angle),
S[aa]=k.exponent,aa+=1)):k instanceof THREE.HemisphereLight&&(Ba+=1,k.visible&&(o=k.color,p=k.groundColor,ea=3*ca,F.gammaInput?(r*=r,w(K,ea,o,r),w(T,ea,p,r)):(y(K,ea,o,r),y(T,ea,p,r)),oa.copy(k.matrixWorld.getPosition()),oa.normalize(),W[ea]=oa.x,W[ea+1]=oa.y,W[ea+2]=oa.z,ca+=1)));c=3*X;for(f=Math.max(u.length,3*ra);c<f;c++)u[c]=0;c=3*X;for(f=Math.max(v.length,3*ra);c<f;c++)v[c]=0;c=3*Y;for(f=Math.max(x.length,3*ya);c<f;c++)x[c]=0;c=3*Y;for(f=Math.max(A.length,3*ya);c<f;c++)A[c]=0;c=Y;for(f=Math.max(B.length,
ya);c<f;c++)B[c]=0;c=3*aa;for(f=Math.max(C.length,3*na);c<f;c++)C[c]=0;c=3*aa;for(f=Math.max(D.length,3*na);c<f;c++)D[c]=0;c=3*aa;for(f=Math.max(P.length,3*na);c<f;c++)P[c]=0;c=aa;for(f=Math.max(R.length,na);c<f;c++)R[c]=0;c=aa;for(f=Math.max(S.length,na);c<f;c++)S[c]=0;c=aa;for(f=Math.max(H.length,na);c<f;c++)H[c]=0;c=3*ca;for(f=Math.max(K.length,3*Ba);c<f;c++)K[c]=0;c=3*ca;for(f=Math.max(T.length,3*Ba);c<f;c++)T[c]=0;c=3*ca;for(f=Math.max(W.length,3*Ba);c<f;c++)W[c]=0;t.directional.length=X;t.point.length=
Y;t.spot.length=aa;t.hemi.length=ca;t.ambient[0]=l;t.ambient[1]=n;t.ambient[2]=m;Ab=!1}c=dc;j.ambientLightColor.value=c.ambient;j.directionalLightColor.value=c.directional.colors;j.directionalLightDirection.value=c.directional.positions;j.pointLightColor.value=c.point.colors;j.pointLightPosition.value=c.point.positions;j.pointLightDistance.value=c.point.distances;j.spotLightColor.value=c.spot.colors;j.spotLightPosition.value=c.spot.positions;j.spotLightDistance.value=c.spot.distances;j.spotLightDirection.value=
c.spot.directions;j.spotLightAngleCos.value=c.spot.anglesCos;j.spotLightExponent.value=c.spot.exponents;j.hemisphereLightSkyColor.value=c.hemi.skyColors;j.hemisphereLightGroundColor.value=c.hemi.groundColors;j.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){j.opacity.value=d.opacity;F.gammaInput?j.diffuse.value.copyGammaToLinear(d.color):j.diffuse.value=d.color;j.map.value=d.map;
j.lightMap.value=d.lightMap;j.specularMap.value=d.specularMap;d.bumpMap&&(j.bumpMap.value=d.bumpMap,j.bumpScale.value=d.bumpScale);d.normalMap&&(j.normalMap.value=d.normalMap,j.normalScale.value.copy(d.normalScale));var J;d.map?J=d.map:d.specularMap?J=d.specularMap:d.normalMap?J=d.normalMap:d.bumpMap&&(J=d.bumpMap);void 0!==J&&(c=J.offset,J=J.repeat,j.offsetRepeat.value.set(c.x,c.y,J.x,J.y));j.envMap.value=d.envMap;j.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;j.reflectivity.value=
d.reflectivity;j.refractionRatio.value=d.refractionRatio;j.combine.value=d.combine;j.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity,j.dashSize.value=d.dashSize,j.totalSize.value=d.dashSize+d.gapSize,j.scale.value=d.scale):d instanceof THREE.ParticleBasicMaterial?(j.psColor.value=d.color,
j.opacity.value=d.opacity,j.size.value=d.size,j.scale.value=O.height/2,j.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(j.shininess.value=d.shininess,F.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive),j.specular.value.copyGammaToLinear(d.specular)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive,j.specular.value=d.specular),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(F.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),
j.emissive.value.copyGammaToLinear(d.emissive)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(j.mNear.value=a.near,j.mFar.value=a.far,j.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(j.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&j.shadowMatrix){c=J=0;for(f=b.length;c<f;c++)if(k=b[c],k.castShadow&&(k instanceof THREE.SpotLight||k instanceof THREE.DirectionalLight&&!k.shadowCascade))j.shadowMap.value[J]=
k.shadowMap,j.shadowMapSize.value[J]=k.shadowMapSize,j.shadowMatrix.value[J]=k.shadowMatrix,j.shadowDarkness.value[J]=k.shadowDarkness,j.shadowBias.value[J]=k.shadowBias,J++}b=d.uniformsList;j=0;for(J=b.length;j<J;j++)if(f=h.uniforms[b[j][1]])if(c=b[j][0],l=c.type,k=c.value,"i"===l)g.uniform1i(f,k);else if("f"===l)g.uniform1f(f,k);else if("v2"===l)g.uniform2f(f,k.x,k.y);else if("v3"===l)g.uniform3f(f,k.x,k.y,k.z);else if("v4"===l)g.uniform4f(f,k.x,k.y,k.z,k.w);else if("c"===l)g.uniform3f(f,k.r,k.g,
k.b);else if("iv1"===l)g.uniform1iv(f,k);else if("iv"===l)g.uniform3iv(f,k);else if("fv1"===l)g.uniform1fv(f,k);else if("fv"===l)g.uniform3fv(f,k);else if("v2v"===l){void 0===c._array&&(c._array=new Float32Array(2*k.length));l=0;for(n=k.length;l<n;l++)m=2*l,c._array[m]=k[l].x,c._array[m+1]=k[l].y;g.uniform2fv(f,c._array)}else if("v3v"===l){void 0===c._array&&(c._array=new Float32Array(3*k.length));l=0;for(n=k.length;l<n;l++)m=3*l,c._array[m]=k[l].x,c._array[m+1]=k[l].y,c._array[m+2]=k[l].z;g.uniform3fv(f,
c._array)}else if("v4v"===l){void 0===c._array&&(c._array=new Float32Array(4*k.length));l=0;for(n=k.length;l<n;l++)m=4*l,c._array[m]=k[l].x,c._array[m+1]=k[l].y,c._array[m+2]=k[l].z,c._array[m+3]=k[l].w;g.uniform4fv(f,c._array)}else if("m4"===l)void 0===c._array&&(c._array=new Float32Array(16)),k.flattenToArray(c._array),g.uniformMatrix4fv(f,!1,c._array);else if("m4v"===l){void 0===c._array&&(c._array=new Float32Array(16*k.length));l=0;for(n=k.length;l<n;l++)k[l].flattenToArrayOffset(c._array,16*
l);g.uniformMatrix4fv(f,!1,c._array)}else if("t"===l){if(m=k,k=G(),g.uniform1i(f,k),m)if(m.image instanceof Array&&6===m.image.length){if(c=m,f=k,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||(c.image.__webglTextureCube=g.createTexture());g.activeTexture(g.TEXTURE0+f);g.bindTexture(g.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,c.flipY);f=c instanceof THREE.CompressedTexture;k=[];for(l=0;6>l;l++)n=k,m=l,F.autoScaleCubemaps&&!f?(t=c.image[l],v=
Nc,t.width<=v&&t.height<=v||(x=Math.max(t.width,t.height),u=Math.floor(t.width*v/x),v=Math.floor(t.height*v/x),x=document.createElement("canvas"),x.width=u,x.height=v,x.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,u,v),t=x)):t=c.image[l],n[m]=t;l=k[0];n=0===(l.width&l.width-1)&&0===(l.height&l.height-1);m=E(c.format);t=E(c.type);$(g.TEXTURE_CUBE_MAP,c,n);for(l=0;6>l;l++)if(f){v=k[l].mipmaps;x=0;for(A=v.length;x<A;x++)u=v[x],g.compressedTexImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+l,x,m,u.width,
u.height,0,u.data)}else g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+l,0,m,m,t,k[l]);c.generateMipmaps&&n&&g.generateMipmap(g.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else g.activeTexture(g.TEXTURE0+f),g.bindTexture(g.TEXTURE_CUBE_MAP,c.image.__webglTextureCube)}else m instanceof THREE.WebGLRenderTargetCube?(c=m,g.activeTexture(g.TEXTURE0+k),g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture)):F.setTexture(m,k)}else if("tv"===l){void 0===c._array&&(c._array=[]);l=0;for(n=c.value.length;l<
n;l++)c._array[l]=G();g.uniform1iv(f,c._array);l=0;for(n=c.value.length;l<n;l++)m=c.value[l],k=c._array[l],m&&F.setTexture(m,k)}if((d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==i.cameraPosition)b=a.matrixWorld.getPosition(),g.uniform3f(i.cameraPosition,b.x,b.y,b.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==i.viewMatrix&&g.uniformMatrix4fv(i.viewMatrix,!1,a._viewMatrixArray)}g.uniformMatrix4fv(i.modelViewMatrix,
!1,e._modelViewMatrix.elements);i.normalMatrix&&g.uniformMatrix3fv(i.normalMatrix,!1,e._normalMatrix.elements);null!==i.modelMatrix&&g.uniformMatrix4fv(i.modelMatrix,!1,e.matrixWorld.elements);return h}function G(){var a=ma;a>=wc&&console.warn("Trying to use "+a+" texture units while this GPU supports only "+wc);ma+=1;return a}function C(a,b){a._modelViewMatrix.multiply(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function w(a,b,c,
d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function y(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function D(a,b,c){fb!==a&&(a?g.enable(g.POLYGON_OFFSET_FILL):g.disable(g.POLYGON_OFFSET_FILL),fb=a);if(a&&(vc!==b||ac!==c))g.polygonOffset(b,c),vc=b,ac=c}function R(a){for(var a=a.split("\n"),b=0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function H(a,b){var c;"fragment"===a?c=g.createShader(g.FRAGMENT_SHADER):"vertex"===a&&(c=g.createShader(g.VERTEX_SHADER));g.shaderSource(c,
b);g.compileShader(c);return!g.getShaderParameter(c,g.COMPILE_STATUS)?(console.error(g.getShaderInfoLog(c)),console.error(R(b)),null):c}function $(a,b,c){c?(g.texParameteri(a,g.TEXTURE_WRAP_S,E(b.wrapS)),g.texParameteri(a,g.TEXTURE_WRAP_T,E(b.wrapT)),g.texParameteri(a,g.TEXTURE_MAG_FILTER,E(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,E(b.minFilter))):(g.texParameteri(a,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_MAG_FILTER,
K(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,K(b.minFilter)));if(cb&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy))g.texParameterf(a,cb.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,xc)),b.__oldAnisotropy=b.anisotropy}function B(a,b){g.bindRenderbuffer(g.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_COMPONENT16,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a)):b.depthBuffer&&
b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_STENCIL,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a)):g.renderbufferStorage(g.RENDERBUFFER,g.RGBA4,b.width,b.height)}function K(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?g.NEAREST:g.LINEAR}function E(a){if(a===THREE.RepeatWrapping)return g.REPEAT;if(a===THREE.ClampToEdgeWrapping)return g.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return g.MIRRORED_REPEAT;
if(a===THREE.NearestFilter)return g.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return g.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return g.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return g.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return g.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return g.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return g.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return g.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return g.UNSIGNED_SHORT_5_5_5_1;
if(a===THREE.UnsignedShort565Type)return g.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return g.BYTE;if(a===THREE.ShortType)return g.SHORT;if(a===THREE.UnsignedShortType)return g.UNSIGNED_SHORT;if(a===THREE.IntType)return g.INT;if(a===THREE.UnsignedIntType)return g.UNSIGNED_INT;if(a===THREE.FloatType)return g.FLOAT;if(a===THREE.AlphaFormat)return g.ALPHA;if(a===THREE.RGBFormat)return g.RGB;if(a===THREE.RGBAFormat)return g.RGBA;if(a===THREE.LuminanceFormat)return g.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return g.LUMINANCE_ALPHA;
if(a===THREE.AddEquation)return g.FUNC_ADD;if(a===THREE.SubtractEquation)return g.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return g.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return g.ZERO;if(a===THREE.OneFactor)return g.ONE;if(a===THREE.SrcColorFactor)return g.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return g.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return g.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return g.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return g.DST_ALPHA;
if(a===THREE.OneMinusDstAlphaFactor)return g.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return g.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return g.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return g.SRC_ALPHA_SATURATE;if(void 0!==hb){if(a===THREE.RGB_S3TC_DXT1_Format)return hb.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return hb.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return hb.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return hb.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}
console.log("THREE.WebGLRenderer",THREE.REVISION);var a=a||{},O=void 0!==a.canvas?a.canvas:document.createElement("canvas"),X=void 0!==a.precision?a.precision:"highp",Y=void 0!==a.alpha?a.alpha:!0,W=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,aa=void 0!==a.antialias?a.antialias:!1,P=void 0!==a.stencil?a.stencil:!0,Ra=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,S=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0),T=void 0!==a.clearAlpha?a.clearAlpha:0;
this.domElement=O;this.context=null;this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapCullFrontFaces=this.shadowMapSoft=this.shadowMapAutoUpdate=!0;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=
[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var F=this,Ba=[],Va=0,wa=null,Ma=null,ba=-1,ca=null,Ca=null,ya=0,ma=0,na=-1,Pa=-1,Ia=-1,ra=-1,yb=-1,zb=-1,Xa=-1,eb=-1,fb=null,vc=null,ac=null,Lb=null,Mb=0,ec=0,Tb=0,fc=0,bc=0,cc=0,gc=new THREE.Frustum,Ob=new THREE.Matrix4,Nb=new THREE.Matrix4,gb=new THREE.Vector4,oa=new THREE.Vector3,Ab=!0,dc={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},
spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},g,cb,hb;try{if(!(g=O.getContext("experimental-webgl",{alpha:Y,premultipliedAlpha:W,antialias:aa,stencil:P,preserveDrawingBuffer:Ra})))throw"Error creating WebGL context.";}catch(Oc){console.error(Oc)}a=g.getExtension("OES_texture_float");Y=g.getExtension("OES_standard_derivatives");cb=g.getExtension("EXT_texture_filter_anisotropic")||g.getExtension("MOZ_EXT_texture_filter_anisotropic")||
g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");hb=g.getExtension("WEBGL_compressed_texture_s3tc")||g.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");a||console.log("THREE.WebGLRenderer: Float textures not supported.");Y||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");cb||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");hb||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");
g.clearColor(0,0,0,1);g.clearDepth(1);g.clearStencil(0);g.enable(g.DEPTH_TEST);g.depthFunc(g.LEQUAL);g.frontFace(g.CCW);g.cullFace(g.BACK);g.enable(g.CULL_FACE);g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);g.clearColor(S.r,S.g,S.b,T);this.context=g;var wc=g.getParameter(g.MAX_TEXTURE_IMAGE_UNITS),Y=g.getParameter(g.MAX_VERTEX_TEXTURE_IMAGE_UNITS);g.getParameter(g.MAX_TEXTURE_SIZE);var Nc=g.getParameter(g.MAX_CUBE_MAP_TEXTURE_SIZE),xc=cb?g.getParameter(cb.MAX_TEXTURE_MAX_ANISOTROPY_EXT):
0,hc=0<Y,Pb=hc&&a;hb&&g.getParameter(g.COMPRESSED_TEXTURE_FORMATS);this.getContext=function(){return g};this.supportsVertexTextures=function(){return hc};this.getMaxAnisotropy=function(){return xc};this.setSize=function(a,b){O.width=a;O.height=b;this.setViewport(0,0,O.width,O.height)};this.setViewport=function(a,b,c,d){Mb=void 0!==a?a:0;ec=void 0!==b?b:0;Tb=void 0!==c?c:O.width;fc=void 0!==d?d:O.height;g.viewport(Mb,ec,Tb,fc)};this.setScissor=function(a,b,c,d){g.scissor(a,b,c,d)};this.enableScissorTest=
function(a){a?g.enable(g.SCISSOR_TEST):g.disable(g.SCISSOR_TEST)};this.setClearColorHex=function(a,b){S.setHex(a);T=b;g.clearColor(S.r,S.g,S.b,T)};this.setClearColor=function(a,b){S.copy(a);T=b;g.clearColor(S.r,S.g,S.b,T)};this.getClearColor=function(){return S};this.getClearAlpha=function(){return T};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=g.COLOR_BUFFER_BIT;if(void 0===b||b)d|=g.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=g.STENCIL_BUFFER_BIT;g.clear(d)};this.clearTarget=function(a,b,c,
d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.deallocateObject=function(a){if(a.__webglInit)if(a.__webglInit=!1,delete a._modelViewMatrix,delete a._normalMatrix,delete a._normalMatrixArray,delete a._modelViewMatrixArray,delete a._modelMatrixArray,a instanceof THREE.Mesh)for(var c in a.geometry.geometryGroups){var d=a.geometry.geometryGroups[c];
g.deleteBuffer(d.__webglVertexBuffer);g.deleteBuffer(d.__webglNormalBuffer);g.deleteBuffer(d.__webglTangentBuffer);g.deleteBuffer(d.__webglColorBuffer);g.deleteBuffer(d.__webglUVBuffer);g.deleteBuffer(d.__webglUV2Buffer);g.deleteBuffer(d.__webglSkinIndicesBuffer);g.deleteBuffer(d.__webglSkinWeightsBuffer);g.deleteBuffer(d.__webglFaceBuffer);g.deleteBuffer(d.__webglLineBuffer);var e=void 0,f=void 0;if(d.numMorphTargets){e=0;for(f=d.numMorphTargets;e<f;e++)g.deleteBuffer(d.__webglMorphTargetsBuffers[e])}if(d.numMorphNormals){e=
0;for(f=d.numMorphNormals;e<f;e++)g.deleteBuffer(d.__webglMorphNormalsBuffers[e])}b(d);F.info.memory.geometries--}else a instanceof THREE.Ribbon?(a=a.geometry,g.deleteBuffer(a.__webglVertexBuffer),g.deleteBuffer(a.__webglColorBuffer),g.deleteBuffer(a.__webglNormalBuffer),b(a),F.info.memory.geometries--):a instanceof THREE.Line?(a=a.geometry,g.deleteBuffer(a.__webglVertexBuffer),g.deleteBuffer(a.__webglColorBuffer),g.deleteBuffer(a.__webglLineDistanceBuffer),b(a),F.info.memory.geometries--):a instanceof
THREE.ParticleSystem&&(a=a.geometry,g.deleteBuffer(a.__webglVertexBuffer),g.deleteBuffer(a.__webglColorBuffer),b(a),F.info.memory.geometries--)};this.deallocateTexture=function(a){a.__webglInit&&(a.__webglInit=!1,g.deleteTexture(a.__webglTexture),F.info.memory.textures--)};this.deallocateRenderTarget=function(a){if(a&&a.__webglTexture)if(g.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)g.deleteFramebuffer(a.__webglFramebuffer[b]),g.deleteRenderbuffer(a.__webglRenderbuffer[b]);
else g.deleteFramebuffer(a.__webglFramebuffer),g.deleteRenderbuffer(a.__webglRenderbuffer)};this.deallocateMaterial=function(a){var b=a.program;if(b){a.program=void 0;var c,d,e=!1,a=0;for(c=Ba.length;a<c;a++)if(d=Ba[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(e){e=[];a=0;for(c=Ba.length;a<c;a++)d=Ba[a],d.program!==b&&e.push(d);Ba=e;g.deleteProgram(b);F.info.memory.programs--}}};this.updateShadowMap=function(a,b){wa=null;ba=ca=eb=Xa=Ia=-1;Ab=!0;Pa=na=-1;this.shadowMapPlugin.update(a,
b)};this.renderBufferImmediate=function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=g.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=g.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=g.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=g.createBuffer());a.hasPositions&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,a.positionArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.position),
g.vertexAttribPointer(b.attributes.position,3,g.FLOAT,!1,0,0));if(a.hasNormals){g.bindBuffer(g.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,f,h,i,j,k,l,n,m,o,p=3*a.count;for(o=0;o<p;o+=9)m=a.normalArray,d=m[o],e=m[o+1],f=m[o+2],h=m[o+3],j=m[o+4],l=m[o+5],i=m[o+6],k=m[o+7],n=m[o+8],d=(d+h+i)/3,e=(e+j+k)/3,f=(f+l+n)/3,m[o]=d,m[o+1]=e,m[o+2]=f,m[o+3]=d,m[o+4]=e,m[o+5]=f,m[o+6]=d,m[o+7]=e,m[o+8]=f}g.bufferData(g.ARRAY_BUFFER,a.normalArray,g.DYNAMIC_DRAW);g.enableVertexAttribArray(b.attributes.normal);
g.vertexAttribPointer(b.attributes.normal,3,g.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglUvBuffer),g.bufferData(g.ARRAY_BUFFER,a.uvArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.uv),g.vertexAttribPointer(b.attributes.uv,2,g.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,a.colorArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.color),g.vertexAttribPointer(b.attributes.color,
3,g.FLOAT,!1,0,0));g.drawArrays(g.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(!1!==d.visible)if(c=t(a,b,c,d,f),a=c.attributes,b=!1,d=16777215*e.id+2*c.id+(d.wireframe?1:0),d!==ca&&(ca=d,b=!0),f instanceof THREE.Mesh){f=e.offsets;1<f.length&&(b=!0);d=0;for(c=f.length;d<c;++d){var h=f[d].index;if(b){var i=e.attributes.position,j=i.itemSize;g.bindBuffer(g.ARRAY_BUFFER,i.buffer);g.vertexAttribPointer(a.position,j,g.FLOAT,!1,0,4*h*j);i=e.attributes.normal;0<=a.normal&&
i&&(j=i.itemSize,g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(a.normal,j,g.FLOAT,!1,0,4*h*j));i=e.attributes.uv;0<=a.uv&&i&&(i.buffer?(j=i.itemSize,g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(a.uv,j,g.FLOAT,!1,0,4*h*j),g.enableVertexAttribArray(a.uv)):g.disableVertexAttribArray(a.uv));j=e.attributes.color;if(0<=a.color&&j){var k=j.itemSize;g.bindBuffer(g.ARRAY_BUFFER,j.buffer);g.vertexAttribPointer(a.color,k,g.FLOAT,!1,0,4*h*k)}i=e.attributes.tangent;0<=a.tangent&&i&&
(j=i.itemSize,g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(a.tangent,j,g.FLOAT,!1,0,4*h*j));g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.attributes.index.buffer)}g.drawElements(g.TRIANGLES,f[d].count,g.UNSIGNED_SHORT,2*f[d].start);F.info.render.calls++;F.info.render.vertices+=f[d].count;F.info.render.faces+=f[d].count/3}}else f instanceof THREE.ParticleSystem&&b&&(i=e.attributes.position,j=i.itemSize,g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(a.position,j,g.FLOAT,!1,0,0),
j=e.attributes.color,0<=a.color&&j&&(k=j.itemSize,g.bindBuffer(g.ARRAY_BUFFER,j.buffer),g.vertexAttribPointer(a.color,k,g.FLOAT,!1,0,0)),g.drawArrays(g.POINTS,0,i.numItems/3),F.info.render.calls++,F.info.render.points+=i.numItems/3)};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var h,i,c=t(a,b,c,d,f),b=c.attributes,a=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==ca&&(ca=c,a=!0);if(!d.morphTargets&&0<=b.position)a&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),g.vertexAttribPointer(b.position,
3,g.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0)):0<=c.position&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var j=0;i=f.morphTargetForcedOrder;for(h=f.morphTargetInfluences;j<d.numSupportedMorphTargets&&j<i.length;)g.bindBuffer(g.ARRAY_BUFFER,
e.__webglMorphTargetsBuffers[i[j]]),g.vertexAttribPointer(c["morphTarget"+j],3,g.FLOAT,!1,0,0),d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[i[j]]),g.vertexAttribPointer(c["morphNormal"+j],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[j]=h[i[j]],j++}else{i=[];h=f.morphTargetInfluences;var k,l=h.length;for(k=0;k<l;k++)j=h[k],0<j&&i.push([k,j]);i.length>d.numSupportedMorphTargets?(i.sort(o),i.length=d.numSupportedMorphTargets):i.length>d.numSupportedMorphNormals?i.sort(o):
0===i.length&&i.push([0,0]);for(j=0;j<d.numSupportedMorphTargets;)i[j]?(k=i[j][0],g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[k]),g.vertexAttribPointer(c["morphTarget"+j],3,g.FLOAT,!1,0,0),d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[k]),g.vertexAttribPointer(c["morphNormal"+j],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[j]=h[k]):(g.vertexAttribPointer(c["morphTarget"+j],3,g.FLOAT,!1,0,0),d.morphNormals&&g.vertexAttribPointer(c["morphNormal"+j],3,g.FLOAT,
!1,0,0),f.__webglMorphTargetInfluences[j]=0),j++}null!==d.program.uniforms.morphTargetInfluences&&g.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList){h=0;for(i=e.__webglCustomAttributesList.length;h<i;h++)c=e.__webglCustomAttributesList[h],0<=b[c.buffer.belongsToAttribute]&&(g.bindBuffer(g.ARRAY_BUFFER,c.buffer),g.vertexAttribPointer(b[c.buffer.belongsToAttribute],c.size,g.FLOAT,!1,0,0))}0<=b.color&&(g.bindBuffer(g.ARRAY_BUFFER,
e.__webglColorBuffer),g.vertexAttribPointer(b.color,3,g.FLOAT,!1,0,0));0<=b.normal&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglNormalBuffer),g.vertexAttribPointer(b.normal,3,g.FLOAT,!1,0,0));0<=b.tangent&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglTangentBuffer),g.vertexAttribPointer(b.tangent,4,g.FLOAT,!1,0,0));0<=b.uv&&(e.__webglUVBuffer?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUVBuffer),g.vertexAttribPointer(b.uv,2,g.FLOAT,!1,0,0),g.enableVertexAttribArray(b.uv)):g.disableVertexAttribArray(b.uv));0<=b.uv2&&
(e.__webglUV2Buffer?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUV2Buffer),g.vertexAttribPointer(b.uv2,2,g.FLOAT,!1,0,0),g.enableVertexAttribArray(b.uv2)):g.disableVertexAttribArray(b.uv2));d.skinning&&(0<=b.skinIndex&&0<=b.skinWeight)&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),g.vertexAttribPointer(b.skinIndex,4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),g.vertexAttribPointer(b.skinWeight,4,g.FLOAT,!1,0,0));0<=b.lineDistance&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglLineDistanceBuffer),
g.vertexAttribPointer(b.lineDistance,1,g.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(d=d.wireframeLinewidth,d!==Lb&&(g.lineWidth(d),Lb=d),a&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),g.drawElements(g.LINES,e.__webglLineCount,g.UNSIGNED_SHORT,0)):(a&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),g.drawElements(g.TRIANGLES,e.__webglFaceCount,g.UNSIGNED_SHORT,0)),F.info.render.calls++,F.info.render.vertices+=e.__webglFaceCount,F.info.render.faces+=e.__webglFaceCount/
3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?g.LINE_STRIP:g.LINES,d=d.linewidth,d!==Lb&&(g.lineWidth(d),Lb=d),g.drawArrays(f,0,e.__webglLineCount),F.info.render.calls++):f instanceof THREE.ParticleSystem?(g.drawArrays(g.POINTS,0,e.__webglParticleCount),F.info.render.calls++,F.info.render.points+=e.__webglParticleCount):f instanceof THREE.Ribbon&&(g.drawArrays(g.TRIANGLE_STRIP,0,e.__webglVertexCount),F.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
else{var e,f,h,i,j=a.__lights,k=a.fog;ba=-1;Ab=!0;this.autoUpdateScene&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();b._viewMatrixArray||(b._viewMatrixArray=new Float32Array(16));b._projectionMatrixArray||(b._projectionMatrixArray=new Float32Array(16));b.matrixWorldInverse.getInverse(b.matrixWorld);b.matrixWorldInverse.flattenToArray(b._viewMatrixArray);b.projectionMatrix.flattenToArray(b._projectionMatrixArray);Ob.multiply(b.projectionMatrix,b.matrixWorldInverse);gc.setFromMatrix(Ob);
this.autoUpdateObjects&&this.initWebGLObjects(a);n(this.renderPluginsPre,a,b);F.info.render.calls=0;F.info.render.vertices=0;F.info.render.faces=0;F.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);i=a.__webglObjects;d=0;for(e=i.length;d<e;d++)if(f=i[d],h=f.object,f.render=!1,h.visible&&(!(h instanceof THREE.Mesh||h instanceof THREE.ParticleSystem)||!h.frustumCulled||gc.contains(h))){C(h,b);var o=f,p=o.buffer,
r=void 0,t=r=void 0,t=o.object.material;if(t instanceof THREE.MeshFaceMaterial)r=p.materialIndex,0<=r&&(r=t.materials[r],r.transparent?(o.transparent=r,o.opaque=null):(o.opaque=r,o.transparent=null));else if(r=t)r.transparent?(o.transparent=r,o.opaque=null):(o.opaque=r,o.transparent=null);f.render=!0;!0===this.sortObjects&&(null!==h.renderDepth?f.z=h.renderDepth:(gb.copy(h.matrixWorld.getPosition()),Ob.multiplyVector3(gb),f.z=gb.z),f.id=h.id)}this.sortObjects&&i.sort(l);i=a.__webglObjectsImmediate;
d=0;for(e=i.length;d<e;d++)f=i[d],h=f.object,h.visible&&(C(h,b),h=f.object.material,h.transparent?(f.transparent=h,f.opaque=null):(f.opaque=h,f.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),D(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),u(a.__webglObjects,!1,"",b,j,k,!0,d),m(a.__webglObjectsImmediate,"",b,j,k,!1,d)):(this.setBlending(THREE.NormalBlending),
u(a.__webglObjects,!0,"opaque",b,j,k,!1),m(a.__webglObjectsImmediate,"opaque",b,j,k,!1),u(a.__webglObjects,!1,"transparent",b,j,k,!0),m(a.__webglObjectsImmediate,"transparent",b,j,k,!0));n(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter)&&(c instanceof THREE.WebGLRenderTargetCube?(g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture),g.generateMipmap(g.TEXTURE_CUBE_MAP),g.bindTexture(g.TEXTURE_CUBE_MAP,null)):(g.bindTexture(g.TEXTURE_2D,
c.__webglTexture),g.generateMipmap(g.TEXTURE_2D),g.bindTexture(g.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=t(a,b,c,d,e);ca=-1;F.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,g,gc):e.render(function(a){F.renderBufferImmediate(a,f,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;){var b=
a.__objectsAdded[0],l=a,n=void 0,m=void 0,o=void 0,t=void 0;if(!b.__webglInit)if(b.__webglInit=!0,b._modelViewMatrix=new THREE.Matrix4,b._normalMatrix=new THREE.Matrix3,b instanceof THREE.Mesh)if(m=b.geometry,o=b.material,m instanceof THREE.Geometry){if(void 0===m.geometryGroups){var u=m,w=void 0,y=void 0,B=void 0,C=void 0,G=void 0,D=void 0,E=void 0,H={},O=u.morphTargets.length,P=u.morphNormals.length,R=o instanceof THREE.MeshFaceMaterial;u.geometryGroups={};w=0;for(y=u.faces.length;w<y;w++)B=u.faces[w],
C=R?B.materialIndex:void 0,D=void 0!==C?C:-1,void 0===H[D]&&(H[D]={hash:D,counter:0}),E=H[D].hash+"_"+H[D].counter,void 0===u.geometryGroups[E]&&(u.geometryGroups[E]={faces3:[],faces4:[],materialIndex:C,vertices:0,numMorphTargets:O,numMorphNormals:P}),G=B instanceof THREE.Face3?3:4,65535<u.geometryGroups[E].vertices+G&&(H[D].counter+=1,E=H[D].hash+"_"+H[D].counter,void 0===u.geometryGroups[E]&&(u.geometryGroups[E]={faces3:[],faces4:[],materialIndex:C,vertices:0,numMorphTargets:O,numMorphNormals:P})),
B instanceof THREE.Face3?u.geometryGroups[E].faces3.push(w):u.geometryGroups[E].faces4.push(w),u.geometryGroups[E].vertices+=G;u.geometryGroupsList=[];var S=void 0;for(S in u.geometryGroups)u.geometryGroups[S].id=ya++,u.geometryGroupsList.push(u.geometryGroups[S])}for(n in m.geometryGroups)if(t=m.geometryGroups[n],!t.__webglVertexBuffer){var K=t;K.__webglVertexBuffer=g.createBuffer();K.__webglNormalBuffer=g.createBuffer();K.__webglTangentBuffer=g.createBuffer();K.__webglColorBuffer=g.createBuffer();
K.__webglUVBuffer=g.createBuffer();K.__webglUV2Buffer=g.createBuffer();K.__webglSkinIndicesBuffer=g.createBuffer();K.__webglSkinWeightsBuffer=g.createBuffer();K.__webglFaceBuffer=g.createBuffer();K.__webglLineBuffer=g.createBuffer();var T=void 0,W=void 0;if(K.numMorphTargets){K.__webglMorphTargetsBuffers=[];T=0;for(W=K.numMorphTargets;T<W;T++)K.__webglMorphTargetsBuffers.push(g.createBuffer())}if(K.numMorphNormals){K.__webglMorphNormalsBuffers=[];T=0;for(W=K.numMorphNormals;T<W;T++)K.__webglMorphNormalsBuffers.push(g.createBuffer())}F.info.memory.geometries++;
d(t,b);m.verticesNeedUpdate=!0;m.morphTargetsNeedUpdate=!0;m.elementsNeedUpdate=!0;m.uvsNeedUpdate=!0;m.normalsNeedUpdate=!0;m.tangentsNeedUpdate=!0;m.colorsNeedUpdate=!0}}else m instanceof THREE.BufferGeometry&&j(m);else if(b instanceof THREE.Ribbon){if(m=b.geometry,!m.__webglVertexBuffer){var X=m;X.__webglVertexBuffer=g.createBuffer();X.__webglColorBuffer=g.createBuffer();X.__webglNormalBuffer=g.createBuffer();F.info.memory.geometries++;var Y=m,$=b,aa=Y.vertices.length;Y.__vertexArray=new Float32Array(3*
aa);Y.__colorArray=new Float32Array(3*aa);Y.__normalArray=new Float32Array(3*aa);Y.__webglVertexCount=aa;c(Y,$);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0;m.normalsNeedUpdate=!0}}else if(b instanceof THREE.Line){if(m=b.geometry,!m.__webglVertexBuffer){var ba=m;ba.__webglVertexBuffer=g.createBuffer();ba.__webglColorBuffer=g.createBuffer();ba.__webglLineDistanceBuffer=g.createBuffer();F.info.memory.geometries++;var ca=m,ra=b,na=ca.vertices.length;ca.__vertexArray=new Float32Array(3*na);ca.__colorArray=
new Float32Array(3*na);ca.__lineDistanceArray=new Float32Array(1*na);ca.__webglLineCount=na;c(ca,ra);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0;m.lineDistancesNeedUpdate=!0}}else if(b instanceof THREE.ParticleSystem&&(m=b.geometry,!m.__webglVertexBuffer))if(m instanceof THREE.Geometry){var wa=m;wa.__webglVertexBuffer=g.createBuffer();wa.__webglColorBuffer=g.createBuffer();F.info.memory.geometries++;var ma=m,Ba=b,Ca=ma.vertices.length;ma.__vertexArray=new Float32Array(3*Ca);ma.__colorArray=new Float32Array(3*
Ca);ma.__sortArray=[];ma.__webglParticleCount=Ca;c(ma,Ba);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0}else m instanceof THREE.BufferGeometry&&j(m);if(!b.__webglActive){if(b instanceof THREE.Mesh)if(m=b.geometry,m instanceof THREE.BufferGeometry)v(l.__webglObjects,m,b);else for(n in m.geometryGroups)t=m.geometryGroups[n],v(l.__webglObjects,t,b);else b instanceof THREE.Ribbon||b instanceof THREE.Line||b instanceof THREE.ParticleSystem?(m=b.geometry,v(l.__webglObjects,m,b)):b instanceof THREE.ImmediateRenderObject||
b.immediateRenderCallback?l.__webglObjectsImmediate.push({object:b,opaque:null,transparent:null}):b instanceof THREE.Sprite?l.__webglSprites.push(b):b instanceof THREE.LensFlare&&l.__webglFlares.push(b);b.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var oa=a.__objectsRemoved[0],Ma=a;oa instanceof THREE.Mesh||oa instanceof THREE.ParticleSystem||oa instanceof THREE.Ribbon||oa instanceof THREE.Line?A(Ma.__webglObjects,oa):oa instanceof THREE.Sprite?x(Ma.__webglSprites,
oa):oa instanceof THREE.LensFlare?x(Ma.__webglFlares,oa):(oa instanceof THREE.ImmediateRenderObject||oa.immediateRenderCallback)&&A(Ma.__webglObjectsImmediate,oa);oa.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var Ra=0,Va=a.__webglObjects.length;Ra<Va;Ra++){var ea=a.__webglObjects[Ra].object,J=ea.geometry,Pa=void 0,Ia=void 0,Ja=void 0;if(ea instanceof THREE.Mesh)if(J instanceof THREE.BufferGeometry)(J.verticesNeedUpdate||J.elementsNeedUpdate||J.uvsNeedUpdate||J.normalsNeedUpdate||J.colorsNeedUpdate||
J.tangentsNeedUpdate)&&k(J,g.DYNAMIC_DRAW,!J.dynamic),J.verticesNeedUpdate=!1,J.elementsNeedUpdate=!1,J.uvsNeedUpdate=!1,J.normalsNeedUpdate=!1,J.colorsNeedUpdate=!1,J.tangentsNeedUpdate=!1;else{for(var Xa=0,eb=J.geometryGroupsList.length;Xa<eb;Xa++)if(Pa=J.geometryGroupsList[Xa],Ja=e(ea,Pa),J.buffersNeedUpdate&&d(Pa,ea),Ia=Ja.attributes&&r(Ja),J.verticesNeedUpdate||J.morphTargetsNeedUpdate||J.elementsNeedUpdate||J.uvsNeedUpdate||J.normalsNeedUpdate||J.colorsNeedUpdate||J.tangentsNeedUpdate||Ia){var fa=
Pa,hb=ea,Ya=g.DYNAMIC_DRAW,yb=!J.dynamic,Qb=Ja;if(fa.__inittedArrays){var zb=f(Qb),gb=Qb.vertexColors?Qb.vertexColors:!1,Ab=h(Qb),cb=zb===THREE.SmoothShading,z=void 0,Q=void 0,Fb=void 0,I=void 0,Ub=void 0,Gb=void 0,db=void 0,fb=void 0,Bb=void 0,Vb=void 0,Wb=void 0,L=void 0,M=void 0,N=void 0,da=void 0,ib=void 0,jb=void 0,kb=void 0,ic=void 0,lb=void 0,mb=void 0,nb=void 0,jc=void 0,ob=void 0,pb=void 0,qb=void 0,kc=void 0,rb=void 0,sb=void 0,tb=void 0,lc=void 0,ub=void 0,vb=void 0,wb=void 0,mc=void 0,
ia=void 0,Lb=void 0,Hb=void 0,Xb=void 0,Yb=void 0,Fa=void 0,Ob=void 0,Da=void 0,Ea=void 0,Ib=void 0,Cb=void 0,xa=0,Aa=0,Db=0,Eb=0,Za=0,Na=0,la=0,Qa=0,za=0,V=0,Z=0,s=0,ja=void 0,Ga=fa.__vertexArray,nc=fa.__uvArray,oc=fa.__uv2Array,$a=fa.__normalArray,sa=fa.__tangentArray,Ha=fa.__colorArray,ta=fa.__skinIndexArray,ua=fa.__skinWeightArray,Mb=fa.__morphTargetsArrays,Nb=fa.__morphNormalsArrays,Pb=fa.__webglCustomAttributesList,q=void 0,xb=fa.__faceArray,Wa=fa.__lineArray,Sa=hb.geometry,ec=Sa.elementsNeedUpdate,
Tb=Sa.uvsNeedUpdate,fc=Sa.normalsNeedUpdate,gc=Sa.tangentsNeedUpdate,hc=Sa.colorsNeedUpdate,vc=Sa.morphTargetsNeedUpdate,Rb=Sa.vertices,ga=fa.faces3,ha=fa.faces4,Oa=Sa.faces,Pc=Sa.faceVertexUvs[0],Qc=Sa.faceVertexUvs[1],Sb=Sa.skinIndices,Jb=Sa.skinWeights,Kb=Sa.morphTargets,yc=Sa.morphNormals;if(Sa.verticesNeedUpdate){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],L=Rb[I.a],M=Rb[I.b],N=Rb[I.c],Ga[Aa]=L.x,Ga[Aa+1]=L.y,Ga[Aa+2]=L.z,Ga[Aa+3]=M.x,Ga[Aa+4]=M.y,Ga[Aa+5]=M.z,Ga[Aa+6]=N.x,Ga[Aa+7]=N.y,Ga[Aa+8]=
N.z,Aa+=9;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],L=Rb[I.a],M=Rb[I.b],N=Rb[I.c],da=Rb[I.d],Ga[Aa]=L.x,Ga[Aa+1]=L.y,Ga[Aa+2]=L.z,Ga[Aa+3]=M.x,Ga[Aa+4]=M.y,Ga[Aa+5]=M.z,Ga[Aa+6]=N.x,Ga[Aa+7]=N.y,Ga[Aa+8]=N.z,Ga[Aa+9]=da.x,Ga[Aa+10]=da.y,Ga[Aa+11]=da.z,Aa+=12;g.bindBuffer(g.ARRAY_BUFFER,fa.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,Ga,Ya)}if(vc){Fa=0;for(Ob=Kb.length;Fa<Ob;Fa++){z=Z=0;for(Q=ga.length;z<Q;z++)Ib=ga[z],I=Oa[Ib],L=Kb[Fa].vertices[I.a],M=Kb[Fa].vertices[I.b],N=Kb[Fa].vertices[I.c],
Da=Mb[Fa],Da[Z]=L.x,Da[Z+1]=L.y,Da[Z+2]=L.z,Da[Z+3]=M.x,Da[Z+4]=M.y,Da[Z+5]=M.z,Da[Z+6]=N.x,Da[Z+7]=N.y,Da[Z+8]=N.z,Qb.morphNormals&&(cb?(Cb=yc[Fa].vertexNormals[Ib],lb=Cb.a,mb=Cb.b,nb=Cb.c):nb=mb=lb=yc[Fa].faceNormals[Ib],Ea=Nb[Fa],Ea[Z]=lb.x,Ea[Z+1]=lb.y,Ea[Z+2]=lb.z,Ea[Z+3]=mb.x,Ea[Z+4]=mb.y,Ea[Z+5]=mb.z,Ea[Z+6]=nb.x,Ea[Z+7]=nb.y,Ea[Z+8]=nb.z),Z+=9;z=0;for(Q=ha.length;z<Q;z++)Ib=ha[z],I=Oa[Ib],L=Kb[Fa].vertices[I.a],M=Kb[Fa].vertices[I.b],N=Kb[Fa].vertices[I.c],da=Kb[Fa].vertices[I.d],Da=Mb[Fa],
Da[Z]=L.x,Da[Z+1]=L.y,Da[Z+2]=L.z,Da[Z+3]=M.x,Da[Z+4]=M.y,Da[Z+5]=M.z,Da[Z+6]=N.x,Da[Z+7]=N.y,Da[Z+8]=N.z,Da[Z+9]=da.x,Da[Z+10]=da.y,Da[Z+11]=da.z,Qb.morphNormals&&(cb?(Cb=yc[Fa].vertexNormals[Ib],lb=Cb.a,mb=Cb.b,nb=Cb.c,jc=Cb.d):jc=nb=mb=lb=yc[Fa].faceNormals[Ib],Ea=Nb[Fa],Ea[Z]=lb.x,Ea[Z+1]=lb.y,Ea[Z+2]=lb.z,Ea[Z+3]=mb.x,Ea[Z+4]=mb.y,Ea[Z+5]=mb.z,Ea[Z+6]=nb.x,Ea[Z+7]=nb.y,Ea[Z+8]=nb.z,Ea[Z+9]=jc.x,Ea[Z+10]=jc.y,Ea[Z+11]=jc.z),Z+=12;g.bindBuffer(g.ARRAY_BUFFER,fa.__webglMorphTargetsBuffers[Fa]);
g.bufferData(g.ARRAY_BUFFER,Mb[Fa],Ya);Qb.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,fa.__webglMorphNormalsBuffers[Fa]),g.bufferData(g.ARRAY_BUFFER,Nb[Fa],Ya))}}if(Jb.length){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],rb=Jb[I.a],sb=Jb[I.b],tb=Jb[I.c],ua[V]=rb.x,ua[V+1]=rb.y,ua[V+2]=rb.z,ua[V+3]=rb.w,ua[V+4]=sb.x,ua[V+5]=sb.y,ua[V+6]=sb.z,ua[V+7]=sb.w,ua[V+8]=tb.x,ua[V+9]=tb.y,ua[V+10]=tb.z,ua[V+11]=tb.w,ub=Sb[I.a],vb=Sb[I.b],wb=Sb[I.c],ta[V]=ub.x,ta[V+1]=ub.y,ta[V+2]=ub.z,ta[V+3]=ub.w,ta[V+4]=vb.x,ta[V+
5]=vb.y,ta[V+6]=vb.z,ta[V+7]=vb.w,ta[V+8]=wb.x,ta[V+9]=wb.y,ta[V+10]=wb.z,ta[V+11]=wb.w,V+=12;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],rb=Jb[I.a],sb=Jb[I.b],tb=Jb[I.c],lc=Jb[I.d],ua[V]=rb.x,ua[V+1]=rb.y,ua[V+2]=rb.z,ua[V+3]=rb.w,ua[V+4]=sb.x,ua[V+5]=sb.y,ua[V+6]=sb.z,ua[V+7]=sb.w,ua[V+8]=tb.x,ua[V+9]=tb.y,ua[V+10]=tb.z,ua[V+11]=tb.w,ua[V+12]=lc.x,ua[V+13]=lc.y,ua[V+14]=lc.z,ua[V+15]=lc.w,ub=Sb[I.a],vb=Sb[I.b],wb=Sb[I.c],mc=Sb[I.d],ta[V]=ub.x,ta[V+1]=ub.y,ta[V+2]=ub.z,ta[V+3]=ub.w,ta[V+4]=vb.x,ta[V+
5]=vb.y,ta[V+6]=vb.z,ta[V+7]=vb.w,ta[V+8]=wb.x,ta[V+9]=wb.y,ta[V+10]=wb.z,ta[V+11]=wb.w,ta[V+12]=mc.x,ta[V+13]=mc.y,ta[V+14]=mc.z,ta[V+15]=mc.w,V+=16;0<V&&(g.bindBuffer(g.ARRAY_BUFFER,fa.__webglSkinIndicesBuffer),g.bufferData(g.ARRAY_BUFFER,ta,Ya),g.bindBuffer(g.ARRAY_BUFFER,fa.__webglSkinWeightsBuffer),g.bufferData(g.ARRAY_BUFFER,ua,Ya))}if(hc&&gb){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],db=I.vertexColors,fb=I.color,3===db.length&&gb===THREE.VertexColors?(ob=db[0],pb=db[1],qb=db[2]):qb=pb=ob=fb,
Ha[za]=ob.r,Ha[za+1]=ob.g,Ha[za+2]=ob.b,Ha[za+3]=pb.r,Ha[za+4]=pb.g,Ha[za+5]=pb.b,Ha[za+6]=qb.r,Ha[za+7]=qb.g,Ha[za+8]=qb.b,za+=9;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],db=I.vertexColors,fb=I.color,4===db.length&&gb===THREE.VertexColors?(ob=db[0],pb=db[1],qb=db[2],kc=db[3]):kc=qb=pb=ob=fb,Ha[za]=ob.r,Ha[za+1]=ob.g,Ha[za+2]=ob.b,Ha[za+3]=pb.r,Ha[za+4]=pb.g,Ha[za+5]=pb.b,Ha[za+6]=qb.r,Ha[za+7]=qb.g,Ha[za+8]=qb.b,Ha[za+9]=kc.r,Ha[za+10]=kc.g,Ha[za+11]=kc.b,za+=12;0<za&&(g.bindBuffer(g.ARRAY_BUFFER,
fa.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,Ha,Ya))}if(gc&&Sa.hasTangents){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],Bb=I.vertexTangents,ib=Bb[0],jb=Bb[1],kb=Bb[2],sa[la]=ib.x,sa[la+1]=ib.y,sa[la+2]=ib.z,sa[la+3]=ib.w,sa[la+4]=jb.x,sa[la+5]=jb.y,sa[la+6]=jb.z,sa[la+7]=jb.w,sa[la+8]=kb.x,sa[la+9]=kb.y,sa[la+10]=kb.z,sa[la+11]=kb.w,la+=12;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],Bb=I.vertexTangents,ib=Bb[0],jb=Bb[1],kb=Bb[2],ic=Bb[3],sa[la]=ib.x,sa[la+1]=ib.y,sa[la+2]=ib.z,sa[la+3]=ib.w,sa[la+4]=
jb.x,sa[la+5]=jb.y,sa[la+6]=jb.z,sa[la+7]=jb.w,sa[la+8]=kb.x,sa[la+9]=kb.y,sa[la+10]=kb.z,sa[la+11]=kb.w,sa[la+12]=ic.x,sa[la+13]=ic.y,sa[la+14]=ic.z,sa[la+15]=ic.w,la+=16;g.bindBuffer(g.ARRAY_BUFFER,fa.__webglTangentBuffer);g.bufferData(g.ARRAY_BUFFER,sa,Ya)}if(fc&&zb){z=0;for(Q=ga.length;z<Q;z++)if(I=Oa[ga[z]],Ub=I.vertexNormals,Gb=I.normal,3===Ub.length&&cb)for(ia=0;3>ia;ia++)Hb=Ub[ia],$a[Na]=Hb.x,$a[Na+1]=Hb.y,$a[Na+2]=Hb.z,Na+=3;else for(ia=0;3>ia;ia++)$a[Na]=Gb.x,$a[Na+1]=Gb.y,$a[Na+2]=Gb.z,
Na+=3;z=0;for(Q=ha.length;z<Q;z++)if(I=Oa[ha[z]],Ub=I.vertexNormals,Gb=I.normal,4===Ub.length&&cb)for(ia=0;4>ia;ia++)Hb=Ub[ia],$a[Na]=Hb.x,$a[Na+1]=Hb.y,$a[Na+2]=Hb.z,Na+=3;else for(ia=0;4>ia;ia++)$a[Na]=Gb.x,$a[Na+1]=Gb.y,$a[Na+2]=Gb.z,Na+=3;g.bindBuffer(g.ARRAY_BUFFER,fa.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,$a,Ya)}if(Tb&&Pc&&Ab){z=0;for(Q=ga.length;z<Q;z++)if(Fb=ga[z],Vb=Pc[Fb],void 0!==Vb)for(ia=0;3>ia;ia++)Xb=Vb[ia],nc[Db]=Xb.u,nc[Db+1]=Xb.v,Db+=2;z=0;for(Q=ha.length;z<Q;z++)if(Fb=
ha[z],Vb=Pc[Fb],void 0!==Vb)for(ia=0;4>ia;ia++)Xb=Vb[ia],nc[Db]=Xb.u,nc[Db+1]=Xb.v,Db+=2;0<Db&&(g.bindBuffer(g.ARRAY_BUFFER,fa.__webglUVBuffer),g.bufferData(g.ARRAY_BUFFER,nc,Ya))}if(Tb&&Qc&&Ab){z=0;for(Q=ga.length;z<Q;z++)if(Fb=ga[z],Wb=Qc[Fb],void 0!==Wb)for(ia=0;3>ia;ia++)Yb=Wb[ia],oc[Eb]=Yb.u,oc[Eb+1]=Yb.v,Eb+=2;z=0;for(Q=ha.length;z<Q;z++)if(Fb=ha[z],Wb=Qc[Fb],void 0!==Wb)for(ia=0;4>ia;ia++)Yb=Wb[ia],oc[Eb]=Yb.u,oc[Eb+1]=Yb.v,Eb+=2;0<Eb&&(g.bindBuffer(g.ARRAY_BUFFER,fa.__webglUV2Buffer),g.bufferData(g.ARRAY_BUFFER,
oc,Ya))}if(ec){z=0;for(Q=ga.length;z<Q;z++)xb[Za]=xa,xb[Za+1]=xa+1,xb[Za+2]=xa+2,Za+=3,Wa[Qa]=xa,Wa[Qa+1]=xa+1,Wa[Qa+2]=xa,Wa[Qa+3]=xa+2,Wa[Qa+4]=xa+1,Wa[Qa+5]=xa+2,Qa+=6,xa+=3;z=0;for(Q=ha.length;z<Q;z++)xb[Za]=xa,xb[Za+1]=xa+1,xb[Za+2]=xa+3,xb[Za+3]=xa+1,xb[Za+4]=xa+2,xb[Za+5]=xa+3,Za+=6,Wa[Qa]=xa,Wa[Qa+1]=xa+1,Wa[Qa+2]=xa,Wa[Qa+3]=xa+3,Wa[Qa+4]=xa+1,Wa[Qa+5]=xa+2,Wa[Qa+6]=xa+2,Wa[Qa+7]=xa+3,Qa+=8,xa+=4;g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,fa.__webglFaceBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,
xb,Ya);g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,fa.__webglLineBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,Wa,Ya)}if(Pb){ia=0;for(Lb=Pb.length;ia<Lb;ia++)if(q=Pb[ia],q.__original.needsUpdate){s=0;if(1===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],q.array[s]=q.value[I.a],q.array[s+1]=q.value[I.b],q.array[s+2]=q.value[I.c],s+=3;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],q.array[s]=q.value[I.a],q.array[s+1]=q.value[I.b],q.array[s+2]=q.value[I.c],q.array[s+3]=
q.value[I.d],s+=4}else{if("faces"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)ja=q.value[ga[z]],q.array[s]=ja,q.array[s+1]=ja,q.array[s+2]=ja,s+=3;z=0;for(Q=ha.length;z<Q;z++)ja=q.value[ha[z]],q.array[s]=ja,q.array[s+1]=ja,q.array[s+2]=ja,q.array[s+3]=ja,s+=4}}else if(2===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],L=q.value[I.a],M=q.value[I.b],N=q.value[I.c],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=M.x,q.array[s+3]=M.y,q.array[s+4]=N.x,q.array[s+
5]=N.y,s+=6;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],L=q.value[I.a],M=q.value[I.b],N=q.value[I.c],da=q.value[I.d],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=M.x,q.array[s+3]=M.y,q.array[s+4]=N.x,q.array[s+5]=N.y,q.array[s+6]=da.x,q.array[s+7]=da.y,s+=8}else{if("faces"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)N=M=L=ja=q.value[ga[z]],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=M.x,q.array[s+3]=M.y,q.array[s+4]=N.x,q.array[s+5]=N.y,s+=6;z=0;for(Q=ha.length;z<Q;z++)da=N=M=L=ja=q.value[ha[z]],q.array[s]=
L.x,q.array[s+1]=L.y,q.array[s+2]=M.x,q.array[s+3]=M.y,q.array[s+4]=N.x,q.array[s+5]=N.y,q.array[s+6]=da.x,q.array[s+7]=da.y,s+=8}}else if(3===q.size){var U;U="c"===q.type?["r","g","b"]:["x","y","z"];if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],L=q.value[I.a],M=q.value[I.b],N=q.value[I.c],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+
8]=N[U[2]],s+=9;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],L=q.value[I.a],M=q.value[I.b],N=q.value[I.c],da=q.value[I.d],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+8]=N[U[2]],q.array[s+9]=da[U[0]],q.array[s+10]=da[U[1]],q.array[s+11]=da[U[2]],s+=12}else if("faces"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)N=M=L=ja=q.value[ga[z]],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+
2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+8]=N[U[2]],s+=9;z=0;for(Q=ha.length;z<Q;z++)da=N=M=L=ja=q.value[ha[z]],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+8]=N[U[2]],q.array[s+9]=da[U[0]],q.array[s+10]=da[U[1]],q.array[s+11]=da[U[2]],s+=12}else if("faceVertices"===q.boundTo){z=0;for(Q=
ga.length;z<Q;z++)ja=q.value[ga[z]],L=ja[0],M=ja[1],N=ja[2],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+8]=N[U[2]],s+=9;z=0;for(Q=ha.length;z<Q;z++)ja=q.value[ha[z]],L=ja[0],M=ja[1],N=ja[2],da=ja[3],q.array[s]=L[U[0]],q.array[s+1]=L[U[1]],q.array[s+2]=L[U[2]],q.array[s+3]=M[U[0]],q.array[s+4]=M[U[1]],q.array[s+5]=M[U[2]],q.array[s+6]=N[U[0]],q.array[s+7]=N[U[1]],q.array[s+
8]=N[U[2]],q.array[s+9]=da[U[0]],q.array[s+10]=da[U[1]],q.array[s+11]=da[U[2]],s+=12}}else if(4===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)I=Oa[ga[z]],L=q.value[I.a],M=q.value[I.b],N=q.value[I.c],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,s+=12;z=0;for(Q=ha.length;z<Q;z++)I=Oa[ha[z]],L=q.value[I.a],
M=q.value[I.b],N=q.value[I.c],da=q.value[I.d],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,q.array[s+12]=da.x,q.array[s+13]=da.y,q.array[s+14]=da.z,q.array[s+15]=da.w,s+=16}else if("faces"===q.boundTo){z=0;for(Q=ga.length;z<Q;z++)N=M=L=ja=q.value[ga[z]],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+
5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,s+=12;z=0;for(Q=ha.length;z<Q;z++)da=N=M=L=ja=q.value[ha[z]],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,q.array[s+12]=da.x,q.array[s+13]=da.y,q.array[s+14]=da.z,q.array[s+15]=da.w,s+=16}else if("faceVertices"===q.boundTo){z=0;for(Q=
ga.length;z<Q;z++)ja=q.value[ga[z]],L=ja[0],M=ja[1],N=ja[2],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,s+=12;z=0;for(Q=ha.length;z<Q;z++)ja=q.value[ha[z]],L=ja[0],M=ja[1],N=ja[2],da=ja[3],q.array[s]=L.x,q.array[s+1]=L.y,q.array[s+2]=L.z,q.array[s+3]=L.w,q.array[s+4]=M.x,q.array[s+5]=M.y,q.array[s+6]=M.z,q.array[s+7]=M.w,q.array[s+8]=N.x,q.array[s+
9]=N.y,q.array[s+10]=N.z,q.array[s+11]=N.w,q.array[s+12]=da.x,q.array[s+13]=da.y,q.array[s+14]=da.z,q.array[s+15]=da.w,s+=16}g.bindBuffer(g.ARRAY_BUFFER,q.buffer);g.bufferData(g.ARRAY_BUFFER,q.array,Ya)}}yb&&(delete fa.__inittedArrays,delete fa.__colorArray,delete fa.__normalArray,delete fa.__tangentArray,delete fa.__uvArray,delete fa.__uv2Array,delete fa.__faceArray,delete fa.__vertexArray,delete fa.__lineArray,delete fa.__skinIndexArray,delete fa.__skinWeightArray)}}J.verticesNeedUpdate=!1;J.morphTargetsNeedUpdate=
!1;J.elementsNeedUpdate=!1;J.uvsNeedUpdate=!1;J.normalsNeedUpdate=!1;J.colorsNeedUpdate=!1;J.tangentsNeedUpdate=!1;J.buffersNeedUpdate=!1;Ja.attributes&&p(Ja)}else if(ea instanceof THREE.Ribbon){Ja=e(ea,J);Ia=Ja.attributes&&r(Ja);if(J.verticesNeedUpdate||J.colorsNeedUpdate||J.normalsNeedUpdate||Ia){var ab=J,zc=g.DYNAMIC_DRAW,pc=void 0,qc=void 0,rc=void 0,Ac=void 0,ka=void 0,Bc=void 0,Cc=void 0,Dc=void 0,ac=void 0,Ka=void 0,Zb=void 0,pa=void 0,Ta=void 0,bc=ab.vertices,cc=ab.colors,dc=ab.normals,wc=
bc.length,xc=cc.length,Nc=dc.length,Ec=ab.__vertexArray,Fc=ab.__colorArray,Gc=ab.__normalArray,Oc=ab.colorsNeedUpdate,Yc=ab.normalsNeedUpdate,Rc=ab.__webglCustomAttributesList;if(ab.verticesNeedUpdate){for(pc=0;pc<wc;pc++)Ac=bc[pc],ka=3*pc,Ec[ka]=Ac.x,Ec[ka+1]=Ac.y,Ec[ka+2]=Ac.z;g.bindBuffer(g.ARRAY_BUFFER,ab.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,Ec,zc)}if(Oc){for(qc=0;qc<xc;qc++)Bc=cc[qc],ka=3*qc,Fc[ka]=Bc.r,Fc[ka+1]=Bc.g,Fc[ka+2]=Bc.b;g.bindBuffer(g.ARRAY_BUFFER,ab.__webglColorBuffer);
g.bufferData(g.ARRAY_BUFFER,Fc,zc)}if(Yc){for(rc=0;rc<Nc;rc++)Cc=dc[rc],ka=3*rc,Gc[ka]=Cc.x,Gc[ka+1]=Cc.y,Gc[ka+2]=Cc.z;g.bindBuffer(g.ARRAY_BUFFER,ab.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,Gc,zc)}if(Rc){Dc=0;for(ac=Rc.length;Dc<ac;Dc++)if(pa=Rc[Dc],pa.needsUpdate&&(void 0===pa.boundTo||"vertices"===pa.boundTo)){ka=0;Zb=pa.value.length;if(1===pa.size)for(Ka=0;Ka<Zb;Ka++)pa.array[Ka]=pa.value[Ka];else if(2===pa.size)for(Ka=0;Ka<Zb;Ka++)Ta=pa.value[Ka],pa.array[ka]=Ta.x,pa.array[ka+1]=Ta.y,
ka+=2;else if(3===pa.size)if("c"===pa.type)for(Ka=0;Ka<Zb;Ka++)Ta=pa.value[Ka],pa.array[ka]=Ta.r,pa.array[ka+1]=Ta.g,pa.array[ka+2]=Ta.b,ka+=3;else for(Ka=0;Ka<Zb;Ka++)Ta=pa.value[Ka],pa.array[ka]=Ta.x,pa.array[ka+1]=Ta.y,pa.array[ka+2]=Ta.z,ka+=3;else if(4===pa.size)for(Ka=0;Ka<Zb;Ka++)Ta=pa.value[Ka],pa.array[ka]=Ta.x,pa.array[ka+1]=Ta.y,pa.array[ka+2]=Ta.z,pa.array[ka+3]=Ta.w,ka+=4;g.bindBuffer(g.ARRAY_BUFFER,pa.buffer);g.bufferData(g.ARRAY_BUFFER,pa.array,zc)}}}J.verticesNeedUpdate=!1;J.colorsNeedUpdate=
!1;J.normalsNeedUpdate=!1;Ja.attributes&&p(Ja)}else if(ea instanceof THREE.Line){Ja=e(ea,J);Ia=Ja.attributes&&r(Ja);if(J.verticesNeedUpdate||J.colorsNeedUpdate||J.lineDistancesNeedUpdate||Ia){var bb=J,Hc=g.DYNAMIC_DRAW,sc=void 0,tc=void 0,uc=void 0,Ic=void 0,va=void 0,Jc=void 0,Tc=bb.vertices,Uc=bb.colors,Vc=bb.lineDistances,Zc=Tc.length,$c=Uc.length,ad=Vc.length,Kc=bb.__vertexArray,Lc=bb.__colorArray,Wc=bb.__lineDistanceArray,bd=bb.colorsNeedUpdate,cd=bb.lineDistancesNeedUpdate,Sc=bb.__webglCustomAttributesList,
Mc=void 0,Xc=void 0,La=void 0,$b=void 0,Ua=void 0,qa=void 0;if(bb.verticesNeedUpdate){for(sc=0;sc<Zc;sc++)Ic=Tc[sc],va=3*sc,Kc[va]=Ic.x,Kc[va+1]=Ic.y,Kc[va+2]=Ic.z;g.bindBuffer(g.ARRAY_BUFFER,bb.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,Kc,Hc)}if(bd){for(tc=0;tc<$c;tc++)Jc=Uc[tc],va=3*tc,Lc[va]=Jc.r,Lc[va+1]=Jc.g,Lc[va+2]=Jc.b;g.bindBuffer(g.ARRAY_BUFFER,bb.__webglColorBuffer);g.bufferData(g.ARRAY_BUFFER,Lc,Hc)}if(cd){for(uc=0;uc<ad;uc++)Wc[uc]=Vc[uc];g.bindBuffer(g.ARRAY_BUFFER,bb.__webglLineDistanceBuffer);
g.bufferData(g.ARRAY_BUFFER,Wc,Hc)}if(Sc){Mc=0;for(Xc=Sc.length;Mc<Xc;Mc++)if(qa=Sc[Mc],qa.needsUpdate&&(void 0===qa.boundTo||"vertices"===qa.boundTo)){va=0;$b=qa.value.length;if(1===qa.size)for(La=0;La<$b;La++)qa.array[La]=qa.value[La];else if(2===qa.size)for(La=0;La<$b;La++)Ua=qa.value[La],qa.array[va]=Ua.x,qa.array[va+1]=Ua.y,va+=2;else if(3===qa.size)if("c"===qa.type)for(La=0;La<$b;La++)Ua=qa.value[La],qa.array[va]=Ua.r,qa.array[va+1]=Ua.g,qa.array[va+2]=Ua.b,va+=3;else for(La=0;La<$b;La++)Ua=
qa.value[La],qa.array[va]=Ua.x,qa.array[va+1]=Ua.y,qa.array[va+2]=Ua.z,va+=3;else if(4===qa.size)for(La=0;La<$b;La++)Ua=qa.value[La],qa.array[va]=Ua.x,qa.array[va+1]=Ua.y,qa.array[va+2]=Ua.z,qa.array[va+3]=Ua.w,va+=4;g.bindBuffer(g.ARRAY_BUFFER,qa.buffer);g.bufferData(g.ARRAY_BUFFER,qa.array,Hc)}}}J.verticesNeedUpdate=!1;J.colorsNeedUpdate=!1;J.lineDistancesNeedUpdate=!1;Ja.attributes&&p(Ja)}else ea instanceof THREE.ParticleSystem&&(J instanceof THREE.BufferGeometry?((J.verticesNeedUpdate||J.colorsNeedUpdate)&&
k(J,g.DYNAMIC_DRAW,!J.dynamic),J.verticesNeedUpdate=!1,J.colorsNeedUpdate=!1):(Ja=e(ea,J),Ia=Ja.attributes&&r(Ja),(J.verticesNeedUpdate||J.colorsNeedUpdate||ea.sortParticles||Ia)&&i(J,g.DYNAMIC_DRAW,ea),J.verticesNeedUpdate=!1,J.colorsNeedUpdate=!1,Ja.attributes&&p(Ja)))}};this.initMaterial=function(a,b,c,d){var e,f,h,i,j,k,l,m,n;a instanceof THREE.MeshDepthMaterial?n="depth":a instanceof THREE.MeshNormalMaterial?n="normal":a instanceof THREE.MeshBasicMaterial?n="basic":a instanceof THREE.MeshLambertMaterial?
n="lambert":a instanceof THREE.MeshPhongMaterial?n="phong":a instanceof THREE.LineBasicMaterial?n="basic":a instanceof THREE.LineDashedMaterial?n="dashed":a instanceof THREE.ParticleBasicMaterial&&(n="particle_basic");if(n){var o=THREE.ShaderLib[n];a.uniforms=THREE.UniformsUtils.clone(o.uniforms);a.vertexShader=o.vertexShader;a.fragmentShader=o.fragmentShader}var p,r,t;e=p=r=t=o=0;for(f=b.length;e<f;e++)h=b[e],h.onlyShadow||(h instanceof THREE.DirectionalLight&&p++,h instanceof THREE.PointLight&&
r++,h instanceof THREE.SpotLight&&t++,h instanceof THREE.HemisphereLight&&o++);e=p;f=r;h=t;i=o;o=p=0;for(t=b.length;o<t;o++)r=b[o],r.castShadow&&(r instanceof THREE.SpotLight&&p++,r instanceof THREE.DirectionalLight&&!r.shadowCascade&&p++);m=p;Pb&&d&&d.useVertexTexture?l=1024:(b=g.getParameter(g.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+
", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),l=b);var u;a:{r=a.fragmentShader;t=a.vertexShader;o=a.uniforms;b=a.attributes;p=a.defines;var c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:l,useVertexTexture:Pb&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,
boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:f,maxSpotLights:h,maxHemiLights:i,maxShadows:m,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapSoft:this.shadowMapSoft,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===
THREE.DoubleSide,flipSided:a.side===THREE.BackSide},v,w,x,d=[];n?d.push(n):(d.push(r),d.push(t));for(w in p)d.push(w),d.push(p[w]);for(v in c)d.push(v),d.push(c[v]);n=d.join();v=0;for(w=Ba.length;v<w;v++)if(d=Ba[v],d.code===n){d.usedTimes++;u=d.program;break a}v=[];for(x in p)w=p[x],!1!==w&&(w="#define "+x+" "+w,v.push(w));w=v.join("\n");x=g.createProgram();v=["precision "+X+" float;",w,hc?"#define VERTEX_TEXTURES":"",F.gammaInput?"#define GAMMA_INPUT":"",F.gammaOutput?"#define GAMMA_OUTPUT":"",F.physicallyBasedShading?
"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?
"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
w=["precision "+X+" float;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",w,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",F.gammaInput?"#define GAMMA_INPUT":"",F.gammaOutput?"#define GAMMA_OUTPUT":"",F.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"",
c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");w=H("fragment",w+r);v=H("vertex",v+t);g.attachShader(x,v);g.attachShader(x,w);g.linkProgram(x);g.getProgramParameter(x,g.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+g.getProgramParameter(x,g.VALIDATE_STATUS)+
", gl error ["+g.getError()+"]");g.deleteShader(w);g.deleteShader(v);x.uniforms={};x.attributes={};var y;v="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?v.push("boneTexture"):v.push("boneGlobalMatrices");for(y in o)v.push(y);y=v;v=0;for(w=y.length;v<w;v++)d=y[v],x.uniforms[d]=g.getUniformLocation(x,d);v="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(y=0;y<c.maxMorphTargets;y++)v.push("morphTarget"+
y);for(y=0;y<c.maxMorphNormals;y++)v.push("morphNormal"+y);for(u in b)v.push(u);u=v;y=0;for(b=u.length;y<b;y++)v=u[y],x.attributes[v]=g.getAttribLocation(x,v);x.id=Va++;Ba.push({program:x,code:n,usedTimes:1});F.info.memory.programs=Ba.length;u=x}a.program=u;u=a.program.attributes;0<=u.position&&g.enableVertexAttribArray(u.position);0<=u.color&&g.enableVertexAttribArray(u.color);0<=u.normal&&g.enableVertexAttribArray(u.normal);0<=u.tangent&&g.enableVertexAttribArray(u.tangent);0<=u.lineDistance&&g.enableVertexAttribArray(u.lineDistance);
a.skinning&&(0<=u.skinIndex&&0<=u.skinWeight)&&(g.enableVertexAttribArray(u.skinIndex),g.enableVertexAttribArray(u.skinWeight));if(a.attributes)for(k in a.attributes)void 0!==u[k]&&0<=u[k]&&g.enableVertexAttribArray(u[k]);if(a.morphTargets){a.numSupportedMorphTargets=0;x="morphTarget";for(k=0;k<this.maxMorphTargets;k++)y=x+k,0<=u[y]&&(g.enableVertexAttribArray(u[y]),a.numSupportedMorphTargets++)}if(a.morphNormals){a.numSupportedMorphNormals=0;x="morphNormal";for(k=0;k<this.maxMorphNormals;k++)y=x+
k,0<=u[y]&&(g.enableVertexAttribArray(u[y]),a.numSupportedMorphNormals++)}a.uniformsList=[];for(j in a.uniforms)a.uniformsList.push([a.uniforms[j],j])};this.setFaceCulling=function(a,b){a?(!b||"ccw"===b?g.frontFace(g.CCW):g.frontFace(g.CW),"back"===a?g.cullFace(g.BACK):"front"===a?g.cullFace(g.FRONT):g.cullFace(g.FRONT_AND_BACK),g.enable(g.CULL_FACE)):g.disable(g.CULL_FACE)};this.setMaterialFaces=function(a){var b=a.side===THREE.DoubleSide,a=a.side===THREE.BackSide;na!==b&&(b?g.disable(g.CULL_FACE):
g.enable(g.CULL_FACE),na=b);Pa!==a&&(a?g.frontFace(g.CW):g.frontFace(g.CCW),Pa=a)};this.setDepthTest=function(a){Xa!==a&&(a?g.enable(g.DEPTH_TEST):g.disable(g.DEPTH_TEST),Xa=a)};this.setDepthWrite=function(a){eb!==a&&(g.depthMask(a),eb=a)};this.setBlending=function(a,b,c,d){a!==Ia&&(a===THREE.NoBlending?g.disable(g.BLEND):a===THREE.AdditiveBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,g.ONE)):a===THREE.SubtractiveBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),
g.blendFunc(g.ZERO,g.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.ZERO,g.SRC_COLOR)):a===THREE.CustomBlending?g.enable(g.BLEND):(g.enable(g.BLEND),g.blendEquationSeparate(g.FUNC_ADD,g.FUNC_ADD),g.blendFuncSeparate(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA)),Ia=a);if(a===THREE.CustomBlending){if(b!==ra&&(g.blendEquation(E(b)),ra=b),c!==yb||d!==zb)g.blendFunc(E(c),E(d)),yb=c,zb=d}else zb=yb=ra=null};this.setTexture=
function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.__webglTexture=g.createTexture(),F.info.memory.textures++);g.activeTexture(g.TEXTURE0+b);g.bindTexture(g.TEXTURE_2D,a.__webglTexture);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,a.flipY);g.pixelStorei(g.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=E(a.format),f=E(a.type);$(g.TEXTURE_2D,a,d);if(a instanceof THREE.CompressedTexture)for(var f=a.mipmaps,h=0,i=f.length;h<
i;h++)c=f[h],g.compressedTexImage2D(g.TEXTURE_2D,h,e,c.width,c.height,0,c.data);else a instanceof THREE.DataTexture?g.texImage2D(g.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data):g.texImage2D(g.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&g.generateMipmap(g.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else g.activeTexture(g.TEXTURE0+b),g.bindTexture(g.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===
a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.__webglTexture=g.createTexture();var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=E(a.format),e=E(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];g.bindTexture(g.TEXTURE_CUBE_MAP,a.__webglTexture);$(g.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=g.createFramebuffer();a.__webglRenderbuffer[f]=g.createRenderbuffer();g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,
a.height,0,d,e,null);var h=a,i=g.TEXTURE_CUBE_MAP_POSITIVE_X+f;g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer[f]);g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,i,h.__webglTexture,0);B(a.__webglRenderbuffer[f],a)}c&&g.generateMipmap(g.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=g.createFramebuffer(),a.__webglRenderbuffer=g.createRenderbuffer(),g.bindTexture(g.TEXTURE_2D,a.__webglTexture),$(g.TEXTURE_2D,a,c),g.texImage2D(g.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=g.TEXTURE_2D,
g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,d,a.__webglTexture,0),B(a.__webglRenderbuffer,a),c&&g.generateMipmap(g.TEXTURE_2D);b?g.bindTexture(g.TEXTURE_CUBE_MAP,null):g.bindTexture(g.TEXTURE_2D,null);g.bindRenderbuffer(g.RENDERBUFFER,null);g.bindFramebuffer(g.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=Tb,a=fc,d=Mb,e=ec);b!==Ma&&(g.bindFramebuffer(g.FRAMEBUFFER,
b),g.viewport(d,e,c,a),Ma=b);bc=c;cc=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.anisotropy=this.anisotropy;a.minFilter=this.minFilter;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;return a};
THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};
THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsLength=0;this.material=this.color=null;this.uvs=[[]];this.z=null};
THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsLength=0;this.material=this.color=null;this.uvs=[[]];this.z=null};
THREE.RenderableObject=function(){this.z=this.object=null};THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=this.object=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=
!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=
{};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1",
"cf2",3355443);b("cf3","cf4",3355443);this.camera=a;this.update(a)};THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){function a(a,d,e,f){THREE.CameraHelper.__v.set(d,e,f);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);a=b.pointMap[a];if(void 0!==a){d=0;for(e=a.length;d<e;d++)b.geometry.vertices[a[d]].copy(THREE.CameraHelper.__v)}}var b=this;THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,1,-1);a("f1",-1,-1,1);
a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",0.7,1.1,-1);a("u2",-0.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;
THREE.DirectionalLightHelper=function(a,b,c){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.sub(a.target.position,a.position);this.color=a.color.clone();var d=THREE.Math.clamp(a.intensity,0,1);this.color.r*=d;this.color.g*=d;this.color.b*=d;var d=this.color.getHex(),e=new THREE.SphereGeometry(b,16,8),f=new THREE.AsteriskGeometry(1.25*b,2.25*b),h=new THREE.MeshBasicMaterial({color:d,fog:!1}),j=new THREE.LineBasicMaterial({color:d,fog:!1});
this.lightArrow=new THREE.ArrowHelper(this.direction,null,c,d);this.lightSphere=new THREE.Mesh(e,h);this.lightArrow.cone.material.fog=!1;this.lightArrow.line.material.fog=!1;this.lightRays=new THREE.Line(f,j,THREE.LinePieces);this.add(this.lightArrow);this.add(this.lightSphere);this.add(this.lightRays);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;a.target.properties.targetInverse&&(b=new THREE.SphereGeometry(b,
8,4),c=new THREE.MeshBasicMaterial({color:d,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(b,c),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,a=new THREE.LineDashedMaterial({color:d,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),
d.computeLineDistances(),this.targetLine=new THREE.Line(d,a),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){this.direction.sub(this.light.target.position,this.light.position);this.lightArrow.setDirection(this.direction);this.color.copy(this.light.color);var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=a;this.color.g*=a;this.color.b*=a;this.lightArrow.setColor(this.color.getHex());this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.targetSphere.material.color.copy(this.color);this.targetLine.material.color.copy(this.color);
this.targetLine.geometry.vertices[0].copy(this.light.position);this.targetLine.geometry.vertices[1].copy(this.light.target.position);this.targetLine.geometry.computeLineDistances();this.targetLine.geometry.verticesNeedUpdate=!0};
THREE.HemisphereLightHelper=function(a,b,c){THREE.Object3D.call(this);this.light=a;this.position=a.position;var d=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.r*=d;this.color.g*=d;this.color.b*=d;var e=this.color.getHex();this.groundColor=a.groundColor.clone();this.groundColor.r*=d;this.groundColor.g*=d;this.groundColor.b*=d;for(var d=this.groundColor.getHex(),f=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0,0.5*Math.PI),h=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0.5*
Math.PI,Math.PI),j=new THREE.MeshBasicMaterial({color:e,fog:!1}),i=new THREE.MeshBasicMaterial({color:d,fog:!1}),k=0,l=f.faces.length;k<l;k++)f.faces[k].materialIndex=0;k=0;for(l=h.faces.length;k<l;k++)h.faces[k].materialIndex=1;THREE.GeometryUtils.merge(f,h);this.lightSphere=new THREE.Mesh(f,new THREE.MeshFaceMaterial([j,i]));this.lightArrow=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,1.1*(b+c),0),c,e);this.lightArrow.rotation.x=Math.PI;this.lightArrowGround=new THREE.ArrowHelper(new THREE.Vector3(0,
1,0),new THREE.Vector3(0,-1.1*(b+c),0),c,d);b=new THREE.Object3D;b.rotation.x=0.5*-Math.PI;b.add(this.lightSphere);b.add(this.lightArrow);b.add(this.lightArrowGround);this.add(b);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0;this.target=new THREE.Vector3;this.lookAt(this.target)};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.update=function(){var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.groundColor.copy(this.light.groundColor);this.color.r*=a;this.color.g*=a;this.color.b*=a;this.groundColor.r*=a;this.groundColor.g*=a;this.groundColor.b*=a;this.lightSphere.material.materials[0].color.copy(this.color);this.lightSphere.material.materials[1].color.copy(this.groundColor);this.lightArrow.setColor(this.color.getHex());this.lightArrowGround.setColor(this.groundColor.getHex());
this.lookAt(this.target)};
THREE.PointLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.color=a.color.clone();var c=THREE.Math.clamp(a.intensity,0,1);this.color.r*=c;this.color.g*=c;this.color.b*=c;var d=this.color.getHex(),c=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),f=new THREE.IcosahedronGeometry(1,2),h=new THREE.MeshBasicMaterial({color:d,fog:!1}),j=new THREE.LineBasicMaterial({color:d,fog:!1}),d=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,
opacity:0.1,transparent:!0});this.lightSphere=new THREE.Mesh(c,h);this.lightRays=new THREE.Line(e,j,THREE.LinePieces);this.lightDistance=new THREE.Mesh(f,d);c=a.distance;0===c?this.lightDistance.visible=!1:this.lightDistance.scale.set(c,c,c);this.add(this.lightSphere);this.add(this.lightRays);this.add(this.lightDistance);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0};
THREE.PointLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.PointLightHelper.prototype.update=function(){this.color.copy(this.light.color);var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=a;this.color.g*=a;this.color.b*=a;this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightDistance.material.color.copy(this.color);a=this.light.distance;0===a?this.lightDistance.visible=!1:(this.lightDistance.visible=!0,this.lightDistance.scale.set(a,a,a))};
THREE.SpotLightHelper=function(a,b,c){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.sub(a.target.position,a.position);this.color=a.color.clone();var d=THREE.Math.clamp(a.intensity,0,1);this.color.r*=d;this.color.g*=d;this.color.b*=d;var d=this.color.getHex(),e=new THREE.SphereGeometry(b,16,8),f=new THREE.AsteriskGeometry(1.25*b,2.25*b),h=new THREE.CylinderGeometry(1E-4,1,1,8,1,!0),j=new THREE.Matrix4;j.rotateX(-Math.PI/2);j.translate(new THREE.Vector3(0,
-0.5,0));h.applyMatrix(j);var i=new THREE.MeshBasicMaterial({color:d,fog:!1}),j=new THREE.LineBasicMaterial({color:d,fog:!1}),k=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,opacity:0.3,transparent:!0});this.lightArrow=new THREE.ArrowHelper(this.direction,null,c,d);this.lightSphere=new THREE.Mesh(e,i);this.lightCone=new THREE.Mesh(h,k);c=a.distance?a.distance:1E4;e=2*c*Math.tan(0.5*a.angle);this.lightCone.scale.set(e,e,c);this.lightArrow.cone.material.fog=!1;this.lightArrow.line.material.fog=
!1;this.lightRays=new THREE.Line(f,j,THREE.LinePieces);this.gyroscope=new THREE.Gyroscope;this.gyroscope.add(this.lightArrow);this.gyroscope.add(this.lightSphere);this.gyroscope.add(this.lightRays);this.add(this.gyroscope);this.add(this.lightCone);this.lookAt(a.target.position);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;a.target.properties.targetInverse&&(b=new THREE.SphereGeometry(b,8,4),f=new THREE.MeshBasicMaterial({color:d,
wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(b,f),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,a=new THREE.LineDashedMaterial({color:d,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),d.computeLineDistances(),this.targetLine=
new THREE.Line(d,a),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){this.direction.sub(this.light.target.position,this.light.position);this.lightArrow.setDirection(this.direction);this.lookAt(this.light.target.position);var a=this.light.distance?this.light.distance:1E4,b=2*a*Math.tan(0.5*this.light.angle);this.lightCone.scale.set(b,b,a);this.color.copy(this.light.color);a=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=a;this.color.g*=a;this.color.b*=a;this.lightArrow.setColor(this.color.getHex());this.lightSphere.material.color.copy(this.color);
this.lightRays.material.color.copy(this.color);this.lightCone.material.color.copy(this.color);this.targetSphere.material.color.copy(this.color);this.targetLine.material.color.copy(this.color);this.targetLine.geometry.vertices[0].copy(this.light.position);this.targetLine.geometry.vertices[1].copy(this.light.target.position);this.targetLine.geometry.computeLineDistances();this.targetLine.geometry.verticesNeedUpdate=!0};
THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlarePlugin=function(){function a(a){var c=b.createProgram(),d=b.createShader(b.FRAGMENT_SHADER),e=b.createShader(b.VERTEX_SHADER);b.shaderSource(d,a.fragmentShader);b.shaderSource(e,a.vertexShader);b.compileShader(d);b.compileShader(e);b.attachShader(c,d);b.attachShader(c,e);b.linkProgram(c);return c}var b,c,d,e,f,h,j,i,k,l,o,n,u;this.init=function(m){b=m.context;c=m;d=new Float32Array(16);e=new Uint16Array(6);m=0;d[m++]=-1;d[m++]=-1;d[m++]=0;d[m++]=0;d[m++]=1;d[m++]=-1;d[m++]=1;d[m++]=
0;d[m++]=1;d[m++]=1;d[m++]=1;d[m++]=1;d[m++]=-1;d[m++]=1;d[m++]=0;d[m++]=1;m=0;e[m++]=0;e[m++]=1;e[m++]=2;e[m++]=0;e[m++]=2;e[m++]=3;f=b.createBuffer();h=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,f);b.bufferData(b.ARRAY_BUFFER,d,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.bufferData(b.ELEMENT_ARRAY_BUFFER,e,b.STATIC_DRAW);j=b.createTexture();i=b.createTexture();b.bindTexture(b.TEXTURE_2D,j);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,
b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,i);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(k=!1,l=a(THREE.ShaderFlares.lensFlare)):(k=!0,l=a(THREE.ShaderFlares.lensFlareVertexTexture));o={};n={};o.vertex=b.getAttribLocation(l,"position");o.uv=b.getAttribLocation(l,"uv");n.renderType=b.getUniformLocation(l,"renderType");n.map=b.getUniformLocation(l,"map");n.occlusionMap=b.getUniformLocation(l,"occlusionMap");n.opacity=b.getUniformLocation(l,"opacity");n.color=b.getUniformLocation(l,
"color");n.scale=b.getUniformLocation(l,"scale");n.rotation=b.getUniformLocation(l,"rotation");n.screenPosition=b.getUniformLocation(l,"screenPosition");u=!1};this.render=function(a,d,e,p){var a=a.__webglFlares,A=a.length;if(A){var x=new THREE.Vector3,t=p/e,G=0.5*e,C=0.5*p,w=16/p,y=new THREE.Vector2(w*t,w),D=new THREE.Vector3(1,1,0),R=new THREE.Vector2(1,1),H=n,w=o;b.useProgram(l);u||(b.enableVertexAttribArray(o.vertex),b.enableVertexAttribArray(o.uv),u=!0);b.uniform1i(H.occlusionMap,0);b.uniform1i(H.map,
1);b.bindBuffer(b.ARRAY_BUFFER,f);b.vertexAttribPointer(w.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(w.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.disable(b.CULL_FACE);b.depthMask(!1);var $,B,K,E,O;for($=0;$<A;$++)if(w=16/p,y.set(w*t,w),E=a[$],x.set(E.matrixWorld.elements[12],E.matrixWorld.elements[13],E.matrixWorld.elements[14]),d.matrixWorldInverse.multiplyVector3(x),d.projectionMatrix.multiplyVector3(x),D.copy(x),R.x=D.x*G+G,R.y=D.y*C+C,k||0<R.x&&R.x<e&&0<R.y&&R.y<p){b.activeTexture(b.TEXTURE1);
b.bindTexture(b.TEXTURE_2D,j);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,R.x-8,R.y-8,16,16,0);b.uniform1i(H.renderType,0);b.uniform2f(H.scale,y.x,y.y);b.uniform3f(H.screenPosition,D.x,D.y,D.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,i);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,R.x-8,R.y-8,16,16,0);b.uniform1i(H.renderType,1);b.disable(b.DEPTH_TEST);b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,
j);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);E.positionScreen.copy(D);E.customUpdateCallback?E.customUpdateCallback(E):E.updateLensFlares();b.uniform1i(H.renderType,2);b.enable(b.BLEND);B=0;for(K=E.lensFlares.length;B<K;B++)O=E.lensFlares[B],0.0010<O.opacity&&0.0010<O.scale&&(D.x=O.x,D.y=O.y,D.z=O.z,w=O.size*O.scale/p,y.x=w*t,y.y=w,b.uniform3f(H.screenPosition,D.x,D.y,D.z),b.uniform2f(H.scale,y.x,y.y),b.uniform1f(H.rotation,O.rotation),b.uniform1f(H.opacity,O.opacity),b.uniform3f(H.color,O.color.r,
O.color.g,O.color.b),c.setBlending(O.blending,O.blendEquation,O.blendSrc,O.blendDst),c.setTexture(O.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};
THREE.ShadowMapPlugin=function(){var a,b,c,d,e,f,h=new THREE.Frustum,j=new THREE.Matrix4,i=new THREE.Vector3,k=new THREE.Vector3;this.init=function(h){a=h.context;b=h;var h=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(h.uniforms);c=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i});d=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,
vertexShader:h.vertexShader,uniforms:i,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(l,o){var n,u,m,v,r,p,A,x,t,G=[];v=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFrontFaces?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);n=0;for(u=l.__lights.length;n<u;n++)if(m=l.__lights[n],m.castShadow)if(m instanceof THREE.DirectionalLight&&m.shadowCascade)for(r=0;r<m.shadowCascadeCount;r++){var C;if(m.shadowCascadeArray[r])C=m.shadowCascadeArray[r];else{t=m;A=r;C=new THREE.DirectionalLight;C.isVirtual=!0;C.onlyShadow=!0;C.castShadow=!0;C.shadowCameraNear=t.shadowCameraNear;C.shadowCameraFar=t.shadowCameraFar;C.shadowCameraLeft=t.shadowCameraLeft;C.shadowCameraRight=t.shadowCameraRight;
C.shadowCameraBottom=t.shadowCameraBottom;C.shadowCameraTop=t.shadowCameraTop;C.shadowCameraVisible=t.shadowCameraVisible;C.shadowDarkness=t.shadowDarkness;C.shadowBias=t.shadowCascadeBias[A];C.shadowMapWidth=t.shadowCascadeWidth[A];C.shadowMapHeight=t.shadowCascadeHeight[A];C.pointsWorld=[];C.pointsFrustum=[];x=C.pointsWorld;p=C.pointsFrustum;for(var w=0;8>w;w++)x[w]=new THREE.Vector3,p[w]=new THREE.Vector3;x=t.shadowCascadeNearZ[A];t=t.shadowCascadeFarZ[A];p[0].set(-1,-1,x);p[1].set(1,-1,x);p[2].set(-1,
1,x);p[3].set(1,1,x);p[4].set(-1,-1,t);p[5].set(1,-1,t);p[6].set(-1,1,t);p[7].set(1,1,t);C.originalCamera=o;p=new THREE.Gyroscope;p.position=m.shadowCascadeOffset;p.add(C);p.add(C.target);o.add(p);m.shadowCascadeArray[r]=C;console.log("Created virtualLight",C)}A=m;x=r;t=A.shadowCascadeArray[x];t.position.copy(A.position);t.target.position.copy(A.target.position);t.lookAt(t.target);t.shadowCameraVisible=A.shadowCameraVisible;t.shadowDarkness=A.shadowDarkness;t.shadowBias=A.shadowCascadeBias[x];p=A.shadowCascadeNearZ[x];
A=A.shadowCascadeFarZ[x];t=t.pointsFrustum;t[0].z=p;t[1].z=p;t[2].z=p;t[3].z=p;t[4].z=A;t[5].z=A;t[6].z=A;t[7].z=A;G[v]=C;v++}else G[v]=m,v++;n=0;for(u=G.length;n<u;n++){m=G[n];m.shadowMap||(m.shadowMap=new THREE.WebGLRenderTarget(m.shadowMapWidth,m.shadowMapHeight,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),m.shadowMapSize=new THREE.Vector2(m.shadowMapWidth,m.shadowMapHeight),m.shadowMatrix=new THREE.Matrix4);if(!m.shadowCamera){if(m instanceof THREE.SpotLight)m.shadowCamera=
new THREE.PerspectiveCamera(m.shadowCameraFov,m.shadowMapWidth/m.shadowMapHeight,m.shadowCameraNear,m.shadowCameraFar);else if(m instanceof THREE.DirectionalLight)m.shadowCamera=new THREE.OrthographicCamera(m.shadowCameraLeft,m.shadowCameraRight,m.shadowCameraTop,m.shadowCameraBottom,m.shadowCameraNear,m.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}l.add(m.shadowCamera);b.autoUpdateScene&&l.updateMatrixWorld()}m.shadowCameraVisible&&!m.cameraHelper&&(m.cameraHelper=
new THREE.CameraHelper(m.shadowCamera),m.shadowCamera.add(m.cameraHelper));if(m.isVirtual&&C.originalCamera==o){r=o;v=m.shadowCamera;p=m.pointsFrustum;t=m.pointsWorld;i.set(Infinity,Infinity,Infinity);k.set(-Infinity,-Infinity,-Infinity);for(A=0;8>A;A++)if(x=t[A],x.copy(p[A]),THREE.ShadowMapPlugin.__projector.unprojectVector(x,r),v.matrixWorldInverse.multiplyVector3(x),x.x<i.x&&(i.x=x.x),x.x>k.x&&(k.x=x.x),x.y<i.y&&(i.y=x.y),x.y>k.y&&(k.y=x.y),x.z<i.z&&(i.z=x.z),x.z>k.z)k.z=x.z;v.left=i.x;v.right=
k.x;v.top=k.y;v.bottom=i.y;v.updateProjectionMatrix()}v=m.shadowMap;p=m.shadowMatrix;r=m.shadowCamera;r.position.copy(m.matrixWorld.getPosition());r.lookAt(m.target.matrixWorld.getPosition());r.updateMatrixWorld();r.matrixWorldInverse.getInverse(r.matrixWorld);m.cameraHelper&&(m.cameraHelper.visible=m.shadowCameraVisible);m.shadowCameraVisible&&m.cameraHelper.update();p.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);p.multiplySelf(r.projectionMatrix);p.multiplySelf(r.matrixWorldInverse);r._viewMatrixArray||
(r._viewMatrixArray=new Float32Array(16));r._projectionMatrixArray||(r._projectionMatrixArray=new Float32Array(16));r.matrixWorldInverse.flattenToArray(r._viewMatrixArray);r.projectionMatrix.flattenToArray(r._projectionMatrixArray);j.multiply(r.projectionMatrix,r.matrixWorldInverse);h.setFromMatrix(j);b.setRenderTarget(v);b.clear();t=l.__webglObjects;m=0;for(v=t.length;m<v;m++)if(A=t[m],p=A.object,A.render=!1,p.visible&&p.castShadow&&(!(p instanceof THREE.Mesh||p instanceof THREE.ParticleSystem)||
!p.frustumCulled||h.contains(p)))p._modelViewMatrix.multiply(r.matrixWorldInverse,p.matrixWorld),A.render=!0;m=0;for(v=t.length;m<v;m++)A=t[m],A.render&&(p=A.object,A=A.buffer,w=p.material instanceof THREE.MeshFaceMaterial?p.material.materials[0]:p.material,x=0<p.geometry.morphTargets.length&&w.morphTargets,w=p instanceof THREE.SkinnedMesh&&w.skinning,x=p.customDepthMaterial?p.customDepthMaterial:w?x?f:e:x?d:c,A instanceof THREE.BufferGeometry?b.renderBufferDirect(r,l.__lights,null,x,A,p):b.renderBuffer(r,
l.__lights,null,x,A,p));t=l.__webglObjectsImmediate;m=0;for(v=t.length;m<v;m++)A=t[m],p=A.object,p.visible&&p.castShadow&&(p._modelViewMatrix.multiply(r.matrixWorldInverse,p.matrixWorld),b.renderImmediateObject(r,l.__lights,null,c,p))}n=b.getClearColor();u=b.getClearAlpha();a.clearColor(n.r,n.g,n.b,u);a.enable(a.BLEND);b.shadowMapCullFrontFaces&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;
THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,f,h,j,i,k,l;this.init=function(a){b=a.context;c=a;d=new Float32Array(16);e=new Uint16Array(6);a=0;d[a++]=-1;d[a++]=-1;d[a++]=0;d[a++]=0;d[a++]=1;d[a++]=-1;d[a++]=1;d[a++]=0;d[a++]=1;d[a++]=1;d[a++]=1;d[a++]=1;d[a++]=-1;d[a++]=1;d[a++]=0;d[a++]=1;a=0;e[a++]=0;e[a++]=1;e[a++]=2;e[a++]=0;e[a++]=2;e[a++]=3;f=b.createBuffer();h=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,f);b.bufferData(b.ARRAY_BUFFER,d,b.STATIC_DRAW);
b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.bufferData(b.ELEMENT_ARRAY_BUFFER,e,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,n=b.createProgram(),u=b.createShader(b.FRAGMENT_SHADER),m=b.createShader(b.VERTEX_SHADER);b.shaderSource(u,a.fragmentShader);b.shaderSource(m,a.vertexShader);b.compileShader(u);b.compileShader(m);b.attachShader(n,u);b.attachShader(n,m);b.linkProgram(n);j=n;i={};k={};i.position=b.getAttribLocation(j,"position");i.uv=b.getAttribLocation(j,"uv");k.uvOffset=b.getUniformLocation(j,
"uvOffset");k.uvScale=b.getUniformLocation(j,"uvScale");k.rotation=b.getUniformLocation(j,"rotation");k.scale=b.getUniformLocation(j,"scale");k.alignment=b.getUniformLocation(j,"alignment");k.color=b.getUniformLocation(j,"color");k.map=b.getUniformLocation(j,"map");k.opacity=b.getUniformLocation(j,"opacity");k.useScreenCoordinates=b.getUniformLocation(j,"useScreenCoordinates");k.affectedByDistance=b.getUniformLocation(j,"affectedByDistance");k.screenPosition=b.getUniformLocation(j,"screenPosition");
k.modelViewMatrix=b.getUniformLocation(j,"modelViewMatrix");k.projectionMatrix=b.getUniformLocation(j,"projectionMatrix");k.fogType=b.getUniformLocation(j,"fogType");k.fogDensity=b.getUniformLocation(j,"fogDensity");k.fogNear=b.getUniformLocation(j,"fogNear");k.fogFar=b.getUniformLocation(j,"fogFar");k.fogColor=b.getUniformLocation(j,"fogColor");l=!1};this.render=function(d,e,u,m){var v=d.__webglSprites,r=v.length;if(r){var p=i,A=k,x=m/u,u=0.5*u,t=0.5*m,G=!0;b.useProgram(j);l||(b.enableVertexAttribArray(p.position),
b.enableVertexAttribArray(p.uv),l=!0);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.depthMask(!0);b.bindBuffer(b.ARRAY_BUFFER,f);b.vertexAttribPointer(p.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(p.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.uniformMatrix4fv(A.projectionMatrix,!1,e._projectionMatrixArray);b.activeTexture(b.TEXTURE0);b.uniform1i(A.map,0);var C=p=0,w=d.fog;w?(b.uniform3f(A.fogColor,w.color.r,w.color.g,w.color.b),w instanceof THREE.Fog?(b.uniform1f(A.fogNear,w.near),
b.uniform1f(A.fogFar,w.far),b.uniform1i(A.fogType,1),C=p=1):w instanceof THREE.FogExp2&&(b.uniform1f(A.fogDensity,w.density),b.uniform1i(A.fogType,2),C=p=2)):(b.uniform1i(A.fogType,0),C=p=0);for(var y,D=[],w=0;w<r;w++)y=v[w],y.visible&&0!==y.opacity&&(y.useScreenCoordinates?y.z=-y.position.z:(y._modelViewMatrix.multiply(e.matrixWorldInverse,y.matrixWorld),y.z=-y._modelViewMatrix.elements[14]));v.sort(a);for(w=0;w<r;w++)if(y=v[w],y.visible&&0!==y.opacity&&y.map&&y.map.image&&y.map.image.width)y.useScreenCoordinates?
(b.uniform1i(A.useScreenCoordinates,1),b.uniform3f(A.screenPosition,(y.position.x-u)/u,(t-y.position.y)/t,Math.max(0,Math.min(1,y.position.z)))):(b.uniform1i(A.useScreenCoordinates,0),b.uniform1i(A.affectedByDistance,y.affectedByDistance?1:0),b.uniformMatrix4fv(A.modelViewMatrix,!1,y._modelViewMatrix.elements)),e=d.fog&&y.fog?C:0,p!==e&&(b.uniform1i(A.fogType,e),p=e),e=1/(y.scaleByViewport?m:1),D[0]=e*x*y.scale.x,D[1]=e*y.scale.y,b.uniform2f(A.uvScale,y.uvScale.x,y.uvScale.y),b.uniform2f(A.uvOffset,
y.uvOffset.x,y.uvOffset.y),b.uniform2f(A.alignment,y.alignment.x,y.alignment.y),b.uniform1f(A.opacity,y.opacity),b.uniform3f(A.color,y.color.r,y.color.g,y.color.b),b.uniform1f(A.rotation,y.rotation),b.uniform2fv(A.scale,D),y.mergeWith3D&&!G?(b.enable(b.DEPTH_TEST),G=!0):!y.mergeWith3D&&G&&(b.disable(b.DEPTH_TEST),G=!1),c.setBlending(y.blending,y.blendEquation,y.blendSrc,y.blendDst),c.setTexture(y.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);
b.depthMask(!0)}}};
THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
lensFlare:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};
THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
