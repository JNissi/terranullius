// three.js - http://github.com/mrdoob/three.js
'use strict';THREE.ColorUtils={adjustHSV:function(b,a,c,d){var e=THREE.ColorUtils.__hsv;b.getHSV(e);e.h=THREE.Math.clamp(e.h+a,0,1);e.s=THREE.Math.clamp(e.s+c,0,1);e.v=THREE.Math.clamp(e.v+d,0,1);b.setHSV(e.h,e.s,e.v)}};THREE.ColorUtils.__hsv={h:0,s:0,v:0};
THREE.GeometryUtils={merge:function(b,a){var c,d,e=b.vertices.length,f=a instanceof THREE.Mesh?a.geometry:a,g=b.vertices,h=f.vertices,j=b.faces,i=f.faces,k=b.faceVertexUvs[0],f=f.faceVertexUvs[0];a instanceof THREE.Mesh&&(a.matrixAutoUpdate&&a.updateMatrix(),c=a.matrix,d=new THREE.Matrix4,d.extractRotation(c,a.scale));for(var m=0,n=h.length;m<n;m++){var p=h[m].clone();c&&c.multiplyVector3(p);g.push(p)}m=0;for(n=i.length;m<n;m++){var p=i[m],l,r,w=p.vertexNormals,s=p.vertexColors;p instanceof THREE.Face3?
l=new THREE.Face3(p.a+e,p.b+e,p.c+e):p instanceof THREE.Face4&&(l=new THREE.Face4(p.a+e,p.b+e,p.c+e,p.d+e));l.normal.copy(p.normal);d&&d.multiplyVector3(l.normal);g=0;for(h=w.length;g<h;g++)r=w[g].clone(),d&&d.multiplyVector3(r),l.vertexNormals.push(r);l.color.copy(p.color);g=0;for(h=s.length;g<h;g++)r=s[g],l.vertexColors.push(r.clone());l.materialIndex=p.materialIndex;l.centroid.copy(p.centroid);c&&c.multiplyVector3(l.centroid);j.push(l)}m=0;for(n=f.length;m<n;m++){c=f[m];d=[];g=0;for(h=c.length;g<
h;g++)d.push(new THREE.UV(c[g].u,c[g].v));k.push(d)}},removeMaterials:function(b,a){for(var c={},d=0,e=a.length;d<e;d++)c[a[d]]=!0;for(var f,g=[],d=0,e=b.faces.length;d<e;d++)f=b.faces[d],f.materialIndex in c||g.push(f);b.faces=g},randomPointInTriangle:function(b,a,c){var d,e,f,g=new THREE.Vector3,h=THREE.GeometryUtils.__v1;d=THREE.GeometryUtils.random();e=THREE.GeometryUtils.random();1<d+e&&(d=1-d,e=1-e);f=1-d-e;g.copy(b);g.multiplyScalar(d);h.copy(a);h.multiplyScalar(e);g.addSelf(h);h.copy(c);h.multiplyScalar(f);
g.addSelf(h);return g},randomPointInFace:function(b,a,c){var d,e,f;if(b instanceof THREE.Face3)return d=a.vertices[b.a],e=a.vertices[b.b],f=a.vertices[b.c],THREE.GeometryUtils.randomPointInTriangle(d,e,f);if(b instanceof THREE.Face4){d=a.vertices[b.a];e=a.vertices[b.b];f=a.vertices[b.c];var a=a.vertices[b.d],g;c?b._area1&&b._area2?(c=b._area1,g=b._area2):(c=THREE.GeometryUtils.triangleArea(d,e,a),g=THREE.GeometryUtils.triangleArea(e,f,a),b._area1=c,b._area2=g):(c=THREE.GeometryUtils.triangleArea(d,
e,a),g=THREE.GeometryUtils.triangleArea(e,f,a));return THREE.GeometryUtils.random()*(c+g)<c?THREE.GeometryUtils.randomPointInTriangle(d,e,a):THREE.GeometryUtils.randomPointInTriangle(e,f,a)}},randomPointsInGeometry:function(b,a){function c(a){function b(c,d){if(d<c)return c;var e=c+Math.floor((d-c)/2);return i[e]>a?b(c,e-1):i[e]<a?b(e+1,d):e}return b(0,i.length-1)}var d,e,f=b.faces,g=b.vertices,h=f.length,j=0,i=[],k,m,n,p;for(e=0;e<h;e++)d=f[e],d instanceof THREE.Face3?(k=g[d.a],m=g[d.b],n=g[d.c],
d._area=THREE.GeometryUtils.triangleArea(k,m,n)):d instanceof THREE.Face4&&(k=g[d.a],m=g[d.b],n=g[d.c],p=g[d.d],d._area1=THREE.GeometryUtils.triangleArea(k,m,p),d._area2=THREE.GeometryUtils.triangleArea(m,n,p),d._area=d._area1+d._area2),j+=d._area,i[e]=j;d=[];for(e=0;e<a;e++)g=THREE.GeometryUtils.random()*j,g=c(g),d[e]=THREE.GeometryUtils.randomPointInFace(f[g],b,!0);return d},triangleArea:function(b,a,c){var d,e=THREE.GeometryUtils.__v1;e.sub(b,a);d=e.length();e.sub(b,c);b=e.length();e.sub(a,c);
c=e.length();a=0.5*(d+b+c);return Math.sqrt(a*(a-d)*(a-b)*(a-c))},center:function(b){b.computeBoundingBox();var a=b.boundingBox,c=new THREE.Vector3;c.add(a.min,a.max);c.multiplyScalar(-0.5);b.applyMatrix((new THREE.Matrix4).makeTranslation(c.x,c.y,c.z));b.computeBoundingBox();return c},normalizeUVs:function(b){for(var b=b.faceVertexUvs[0],a=0,c=b.length;a<c;a++)for(var d=b[a],e=0,f=d.length;e<f;e++)if(1!==d[e].u&&(d[e].u-=Math.floor(d[e].u)),1!==d[e].v)d[e].v-=Math.floor(d[e].v)},triangulateQuads:function(b){var a,
c,d,e,f=[],g=[],h=[];a=0;for(c=b.faceUvs.length;a<c;a++)g[a]=[];a=0;for(c=b.faceVertexUvs.length;a<c;a++)h[a]=[];a=0;for(c=b.faces.length;a<c;a++)if(d=b.faces[a],d instanceof THREE.Face4){e=d.a;var j=d.b,i=d.c,k=d.d,m=new THREE.Face3,n=new THREE.Face3;m.color.copy(d.color);n.color.copy(d.color);m.materialIndex=d.materialIndex;n.materialIndex=d.materialIndex;m.a=e;m.b=j;m.c=k;n.a=j;n.b=i;n.c=k;4===d.vertexColors.length&&(m.vertexColors[0]=d.vertexColors[0].clone(),m.vertexColors[1]=d.vertexColors[1].clone(),
m.vertexColors[2]=d.vertexColors[3].clone(),n.vertexColors[0]=d.vertexColors[1].clone(),n.vertexColors[1]=d.vertexColors[2].clone(),n.vertexColors[2]=d.vertexColors[3].clone());f.push(m,n);d=0;for(e=b.faceVertexUvs.length;d<e;d++)b.faceVertexUvs[d].length&&(m=b.faceVertexUvs[d][a],j=m[1],i=m[2],k=m[3],m=[m[0].clone(),j.clone(),k.clone()],j=[j.clone(),i.clone(),k.clone()],h[d].push(m,j));d=0;for(e=b.faceUvs.length;d<e;d++)b.faceUvs[d].length&&(j=b.faceUvs[d][a],g[d].push(j,j))}else{f.push(d);d=0;for(e=
b.faceUvs.length;d<e;d++)g[d].push(b.faceUvs[d][a]);d=0;for(e=b.faceVertexUvs.length;d<e;d++)h[d].push(b.faceVertexUvs[d][a])}b.faces=f;b.faceUvs=g;b.faceVertexUvs=h;b.computeCentroids();b.computeFaceNormals();b.computeVertexNormals();b.hasTangents&&b.computeTangents()},explode:function(b){for(var a=[],c=0,d=b.faces.length;c<d;c++){var e=a.length,f=b.faces[c];if(f instanceof THREE.Face4){var g=f.a,h=f.b,j=f.c,g=b.vertices[g],h=b.vertices[h],j=b.vertices[j],i=b.vertices[f.d];a.push(g.clone());a.push(h.clone());
a.push(j.clone());a.push(i.clone());f.a=e;f.b=e+1;f.c=e+2;f.d=e+3}else g=f.a,h=f.b,j=f.c,g=b.vertices[g],h=b.vertices[h],j=b.vertices[j],a.push(g.clone()),a.push(h.clone()),a.push(j.clone()),f.a=e,f.b=e+1,f.c=e+2}b.vertices=a;delete b.__tmpVertices},tessellate:function(b,a){var c,d,e,f,g,h,j,i,k,m,n,p,l,r,w,s,u,v,o,B=[],x=[];c=0;for(d=b.faceVertexUvs.length;c<d;c++)x[c]=[];c=0;for(d=b.faces.length;c<d;c++)if(e=b.faces[c],e instanceof THREE.Face3)if(f=e.a,g=e.b,h=e.c,i=b.vertices[f],k=b.vertices[g],
m=b.vertices[h],p=i.distanceTo(k),l=k.distanceTo(m),n=i.distanceTo(m),p>a||l>a||n>a){j=b.vertices.length;v=e.clone();o=e.clone();p>=l&&p>=n?(i=i.clone(),i.lerpSelf(k,0.5),v.a=f,v.b=j,v.c=h,o.a=j,o.b=g,o.c=h,3===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),f.lerpSelf(e.vertexNormals[1],0.5),v.vertexNormals[1].copy(f),o.vertexNormals[0].copy(f)),3===e.vertexColors.length&&(f=e.vertexColors[0].clone(),f.lerpSelf(e.vertexColors[1],0.5),v.vertexColors[1].copy(f),o.vertexColors[0].copy(f)),e=0):
l>=p&&l>=n?(i=k.clone(),i.lerpSelf(m,0.5),v.a=f,v.b=g,v.c=j,o.a=j,o.b=h,o.c=f,3===e.vertexNormals.length&&(f=e.vertexNormals[1].clone(),f.lerpSelf(e.vertexNormals[2],0.5),v.vertexNormals[2].copy(f),o.vertexNormals[0].copy(f),o.vertexNormals[1].copy(e.vertexNormals[2]),o.vertexNormals[2].copy(e.vertexNormals[0])),3===e.vertexColors.length&&(f=e.vertexColors[1].clone(),f.lerpSelf(e.vertexColors[2],0.5),v.vertexColors[2].copy(f),o.vertexColors[0].copy(f),o.vertexColors[1].copy(e.vertexColors[2]),o.vertexColors[2].copy(e.vertexColors[0])),
e=1):(i=i.clone(),i.lerpSelf(m,0.5),v.a=f,v.b=g,v.c=j,o.a=j,o.b=g,o.c=h,3===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),f.lerpSelf(e.vertexNormals[2],0.5),v.vertexNormals[2].copy(f),o.vertexNormals[0].copy(f)),3===e.vertexColors.length&&(f=e.vertexColors[0].clone(),f.lerpSelf(e.vertexColors[2],0.5),v.vertexColors[2].copy(f),o.vertexColors[0].copy(f)),e=2);B.push(v,o);b.vertices.push(i);f=0;for(g=b.faceVertexUvs.length;f<g;f++)b.faceVertexUvs[f].length&&(i=b.faceVertexUvs[f][c],o=i[0],h=
i[1],v=i[2],0===e?(k=o.clone(),k.lerpSelf(h,0.5),i=[o.clone(),k.clone(),v.clone()],h=[k.clone(),h.clone(),v.clone()]):1===e?(k=h.clone(),k.lerpSelf(v,0.5),i=[o.clone(),h.clone(),k.clone()],h=[k.clone(),v.clone(),o.clone()]):(k=o.clone(),k.lerpSelf(v,0.5),i=[o.clone(),h.clone(),k.clone()],h=[k.clone(),h.clone(),v.clone()]),x[f].push(i,h))}else{B.push(e);f=0;for(g=b.faceVertexUvs.length;f<g;f++)x[f].push(b.faceVertexUvs[f][c])}else if(f=e.a,g=e.b,h=e.c,j=e.d,i=b.vertices[f],k=b.vertices[g],m=b.vertices[h],
n=b.vertices[j],p=i.distanceTo(k),l=k.distanceTo(m),r=m.distanceTo(n),w=i.distanceTo(n),p>a||l>a||r>a||w>a){s=b.vertices.length;u=b.vertices.length+1;v=e.clone();o=e.clone();p>=l&&p>=r&&p>=w||r>=l&&r>=p&&r>=w?(p=i.clone(),p.lerpSelf(k,0.5),k=m.clone(),k.lerpSelf(n,0.5),v.a=f,v.b=s,v.c=u,v.d=j,o.a=s,o.b=g,o.c=h,o.d=u,4===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),f.lerpSelf(e.vertexNormals[1],0.5),g=e.vertexNormals[2].clone(),g.lerpSelf(e.vertexNormals[3],0.5),v.vertexNormals[1].copy(f),
v.vertexNormals[2].copy(g),o.vertexNormals[0].copy(f),o.vertexNormals[3].copy(g)),4===e.vertexColors.length&&(f=e.vertexColors[0].clone(),f.lerpSelf(e.vertexColors[1],0.5),g=e.vertexColors[2].clone(),g.lerpSelf(e.vertexColors[3],0.5),v.vertexColors[1].copy(f),v.vertexColors[2].copy(g),o.vertexColors[0].copy(f),o.vertexColors[3].copy(g)),e=0):(p=k.clone(),p.lerpSelf(m,0.5),k=n.clone(),k.lerpSelf(i,0.5),v.a=f,v.b=g,v.c=s,v.d=u,o.a=u,o.b=s,o.c=h,o.d=j,4===e.vertexNormals.length&&(f=e.vertexNormals[1].clone(),
f.lerpSelf(e.vertexNormals[2],0.5),g=e.vertexNormals[3].clone(),g.lerpSelf(e.vertexNormals[0],0.5),v.vertexNormals[2].copy(f),v.vertexNormals[3].copy(g),o.vertexNormals[0].copy(g),o.vertexNormals[1].copy(f)),4===e.vertexColors.length&&(f=e.vertexColors[1].clone(),f.lerpSelf(e.vertexColors[2],0.5),g=e.vertexColors[3].clone(),g.lerpSelf(e.vertexColors[0],0.5),v.vertexColors[2].copy(f),v.vertexColors[3].copy(g),o.vertexColors[0].copy(g),o.vertexColors[1].copy(f)),e=1);B.push(v,o);b.vertices.push(p,k);
f=0;for(g=b.faceVertexUvs.length;f<g;f++)b.faceVertexUvs[f].length&&(i=b.faceVertexUvs[f][c],o=i[0],h=i[1],v=i[2],i=i[3],0===e?(k=o.clone(),k.lerpSelf(h,0.5),m=v.clone(),m.lerpSelf(i,0.5),o=[o.clone(),k.clone(),m.clone(),i.clone()],h=[k.clone(),h.clone(),v.clone(),m.clone()]):(k=h.clone(),k.lerpSelf(v,0.5),m=i.clone(),m.lerpSelf(o,0.5),o=[o.clone(),h.clone(),k.clone(),m.clone()],h=[m.clone(),k.clone(),v.clone(),i.clone()]),x[f].push(o,h))}else{B.push(e);f=0;for(g=b.faceVertexUvs.length;f<g;f++)x[f].push(b.faceVertexUvs[f][c])}b.faces=
B;b.faceVertexUvs=x}};THREE.GeometryUtils.random=THREE.Math.random16;THREE.GeometryUtils.__v1=new THREE.Vector3;
THREE.ImageUtils={crossOrigin:"anonymous",loadTexture:function(b,a,c,d){var e=new Image,f=new THREE.Texture(e,a),a=new THREE.ImageLoader;a.addEventListener("load",function(a){f.image=a.content;f.needsUpdate=!0;c&&c(f)});a.addEventListener("error",function(a){d&&d(a.message)});a.crossOrigin=this.crossOrigin;a.load(b,e);f.sourceFile=b;return f},loadCompressedTexture:function(b,a,c,d){var e=new THREE.CompressedTexture;e.mapping=a;var f=new XMLHttpRequest;f.onload=function(){var a=THREE.ImageUtils.parseDDS(f.response,
!0);e.format=a.format;e.mipmaps=a.mipmaps;e.image.width=a.width;e.image.height=a.height;e.generateMipmaps=!1;e.needsUpdate=!0;c&&c(e)};f.onerror=d;f.open("GET",b,!0);f.responseType="arraybuffer";f.send(null);return e},loadTextureCube:function(b,a,c,d){var e=[];e.loadCount=0;var f=new THREE.Texture;f.image=e;void 0!==a&&(f.mapping=a);f.flipY=!1;for(var a=0,g=b.length;a<g;++a){var h=new Image;e[a]=h;h.onload=function(){e.loadCount=e.loadCount+1;if(e.loadCount===6){f.needsUpdate=true;c&&c()}};h.onerror=
d;h.crossOrigin=this.crossOrigin;h.src=b[a]}return f},loadCompressedTextureCube:function(b,a,c,d){var e=[];e.loadCount=0;var f=new THREE.CompressedTexture;f.image=e;void 0!==a&&(f.mapping=a);f.flipY=!1;f.generateMipmaps=!1;for(var a=function(a,b){return function(){var d=THREE.ImageUtils.parseDDS(a.response,true);b.format=d.format;b.mipmaps=d.mipmaps;b.width=d.width;b.height=d.height;e.loadCount=e.loadCount+1;if(e.loadCount===6){f.format=d.format;f.needsUpdate=true;c&&c()}}},g=0,h=b.length;g<h;++g){var j=
{};e[g]=j;var i=new XMLHttpRequest;i.onload=a(i,j);i.onerror=d;i.open("GET",b[g],!0);i.responseType="arraybuffer";i.send(null)}return f},parseDDS:function(b,a){function c(a){return a.charCodeAt(0)+(a.charCodeAt(1)<<8)+(a.charCodeAt(2)<<16)+(a.charCodeAt(3)<<24)}var d={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},e=c("DXT1"),f=c("DXT3"),g=c("DXT5"),h=new Int32Array(b,0,31);if(542327876!==h[0])return console.error("ImageUtils.parseDDS(): Invalid magic number in DDS header"),d;if(!h[20]&4)return console.error("ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code"),
d;var j=h[21];switch(j){case e:e=8;d.format=THREE.RGB_S3TC_DXT1_Format;break;case f:e=16;d.format=THREE.RGBA_S3TC_DXT3_Format;break;case g:e=16;d.format=THREE.RGBA_S3TC_DXT5_Format;break;default:return console.error("ImageUtils.parseDDS(): Unsupported FourCC code: ",String.fromCharCode(j&255,j>>8&255,j>>16&255,j>>24&255)),d}d.mipmapCount=1;h[2]&131072&&!1!==a&&(d.mipmapCount=Math.max(1,h[7]));d.width=h[4];d.height=h[3];h=h[1]+4;f=d.width;g=d.height;for(j=0;j<d.mipmapCount;j++){var i=Math.max(4,f)/
4*Math.max(4,g)/4*e,k={data:new Uint8Array(b,h,i),width:f,height:g};d.mipmaps.push(k);h+=i;f=Math.max(0.5*f,1);g=Math.max(0.5*g,1)}return d},getNormalMap:function(b,a){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]},a=a|1,d=b.width,e=b.height,f=document.createElement("canvas");f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(b,0,0);for(var h=g.getImageData(0,0,d,e).data,j=g.createImageData(d,e),i=j.data,k=0;k<d;k++)for(var m=0;m<e;m++){var n=
0>m-1?0:m-1,p=m+1>e-1?e-1:m+1,l=0>k-1?0:k-1,r=k+1>d-1?d-1:k+1,w=[],s=[0,0,h[4*(m*d+k)]/255*a];w.push([-1,0,h[4*(m*d+l)]/255*a]);w.push([-1,-1,h[4*(n*d+l)]/255*a]);w.push([0,-1,h[4*(n*d+k)]/255*a]);w.push([1,-1,h[4*(n*d+r)]/255*a]);w.push([1,0,h[4*(m*d+r)]/255*a]);w.push([1,1,h[4*(p*d+r)]/255*a]);w.push([0,1,h[4*(p*d+k)]/255*a]);w.push([-1,1,h[4*(p*d+l)]/255*a]);n=[];l=w.length;for(p=0;p<l;p++){var r=w[p],u=w[(p+1)%l],r=[r[0]-s[0],r[1]-s[1],r[2]-s[2]],u=[u[0]-s[0],u[1]-s[1],u[2]-s[2]];n.push(c([r[1]*
u[2]-r[2]*u[1],r[2]*u[0]-r[0]*u[2],r[0]*u[1]-r[1]*u[0]]))}w=[0,0,0];for(p=0;p<n.length;p++)w[0]+=n[p][0],w[1]+=n[p][1],w[2]+=n[p][2];w[0]/=n.length;w[1]/=n.length;w[2]/=n.length;s=4*(m*d+k);i[s]=255*((w[0]+1)/2)|0;i[s+1]=255*((w[1]+1)/2)|0;i[s+2]=255*w[2]|0;i[s+3]=255}g.putImageData(j,0,0);return f},generateDataTexture:function(b,a,c){for(var d=b*a,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g),c=Math.floor(255*c.b),h=0;h<d;h++)e[3*h]=f,e[3*h+1]=g,e[3*h+2]=c;b=new THREE.DataTexture(e,
b,a,THREE.RGBFormat);b.needsUpdate=!0;return b}};THREE.SceneUtils={createMultiMaterialObject:function(b,a){for(var c=new THREE.Object3D,d=0,e=a.length;d<e;d++)c.add(new THREE.Mesh(b,a[d]));return c},detach:function(b,a,c){b.applyMatrix(a.matrixWorld);a.remove(b);c.add(b)},attach:function(b,a,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);b.applyMatrix(d);a.remove(b);c.add(b)}};
THREE.ShaderUtils={lib:{fresnel:{uniforms:{mRefractionRatio:{type:"f",value:1.02},mFresnelBias:{type:"f",value:0.1},mFresnelPower:{type:"f",value:2},mFresnelScale:{type:"f",value:1},tCube:{type:"t",value:null}},fragmentShader:"uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
vertexShader:"uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\nvec3 I = worldPosition.xyz - cameraPosition;\nvReflect = reflect( I, worldNormal );\nvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"},
normal:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,
1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},uRefractionRatio:{type:"f",value:0.98},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,
1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"}}};
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){return this.faces[this.face][this.weight][this.style]},loadFace:function(b){var a=b.familyName.toLowerCase();this.faces[a]=this.faces[a]||{};this.faces[a][b.cssFontWeight]=this.faces[a][b.cssFontWeight]||{};this.faces[a][b.cssFontWeight][b.cssFontStyle]=b;return this.faces[a][b.cssFontWeight][b.cssFontStyle]=b},drawText:function(b){for(var a=this.getFace(),c=this.size/a.resolution,d=
0,e=String(b).split(""),f=e.length,g=[],b=0;b<f;b++){var h=new THREE.Path,h=this.extractGlyphPoints(e[b],a,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(b,a,c,d,e){var f=[],g,h,j,i,k,m,n,p,l,r,w,s=a.glyphs[b]||a.glyphs["?"];if(s){if(s.o){a=s._cachedOutline||(s._cachedOutline=s.o.split(" "));i=a.length;for(b=0;b<i;)switch(j=a[b++],j){case "m":j=a[b++]*c+d;k=a[b++]*c;e.moveTo(j,k);break;case "l":j=a[b++]*c+d;k=a[b++]*c;e.lineTo(j,k);break;case "q":j=a[b++]*
c+d;k=a[b++]*c;p=a[b++]*c+d;l=a[b++]*c;e.quadraticCurveTo(p,l,j,k);if(g=f[f.length-1]){m=g.x;n=g.y;g=1;for(h=this.divisions;g<=h;g++){var u=g/h;THREE.Shape.Utils.b2(u,m,p,j);THREE.Shape.Utils.b2(u,n,l,k)}}break;case "b":if(j=a[b++]*c+d,k=a[b++]*c,p=a[b++]*c+d,l=a[b++]*-c,r=a[b++]*c+d,w=a[b++]*-c,e.bezierCurveTo(j,k,p,l,r,w),g=f[f.length-1]){m=g.x;n=g.y;g=1;for(h=this.divisions;g<=h;g++)u=g/h,THREE.Shape.Utils.b3(u,m,p,r,j),THREE.Shape.Utils.b3(u,n,l,w,k)}}}return{offset:s.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(b,a){var a=a||{},c=void 0!==a.curveSegments?a.curveSegments:4,d=void 0!==a.font?a.font:"helvetiker",e=void 0!==a.weight?a.weight:"normal",f=void 0!==a.style?a.style:"normal";THREE.FontUtils.size=void 0!==a.size?a.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(b).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(b){var a=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return 0.5*e};b.Triangulate=function(b,d){var e=b.length;if(3>e)return null;var f=[],g=[],h=[],j,i,k;if(0<a(b))for(i=0;i<e;i++)g[i]=i;else for(i=0;i<e;i++)g[i]=e-1-i;var m=2*e;for(i=e-1;2<e;){if(0>=m--){console.log("Warning, unable to triangulate polygon!");break}j=i;e<=j&&(j=0);i=j+1;e<=i&&(i=0);k=i+1;e<=k&&(k=0);var n;a:{n=b;var p=j,l=i,r=k,w=e,s=g,u=void 0,v=void 0,o=void 0,B=void 0,x=void 0,
t=void 0,q=void 0,C=void 0,y=void 0,v=n[s[p]].x,o=n[s[p]].y,B=n[s[l]].x,x=n[s[l]].y,t=n[s[r]].x,q=n[s[r]].y;if(1E-10>(B-v)*(q-o)-(x-o)*(t-v))n=!1;else{for(u=0;u<w;u++)if(!(u==p||u==l||u==r)){var C=n[s[u]].x,y=n[s[u]].y,D=void 0,F=void 0,A=void 0,H=void 0,G=void 0,E=void 0,J=void 0,I=void 0,L=void 0,M=void 0,N=void 0,z=void 0,D=A=G=void 0,D=t-B,F=q-x,A=v-t,H=o-q,G=B-v,E=x-o,J=C-v,I=y-o,L=C-B,M=y-x,N=C-t,z=y-q,D=D*M-F*L,G=G*I-E*J,A=A*z-H*N;if(0<=D&&0<=A&&0<=G){n=!1;break a}}n=!0}}if(n){f.push([b[g[j]],
b[g[i]],b[g[k]]]);h.push([g[j],g[i],g[k]]);j=i;for(k=i+1;k<e;j++,k++)g[j]=g[k];e--;m=2*e}}return d?h:f};b.Triangulate.area=a;return b})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(){console.log("Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(b){b=this.getUtoTmapping(b);return this.getPoint(b)};
THREE.Curve.prototype.getPoints=function(b){b||(b=5);var a,c=[];for(a=0;a<=b;a++)c.push(this.getPoint(a/b));return c};THREE.Curve.prototype.getSpacedPoints=function(b){b||(b=5);var a,c=[];for(a=0;a<=b;a++)c.push(this.getPointAt(a/b));return c};THREE.Curve.prototype.getLength=function(){var b=this.getLengths();return b[b.length-1]};
THREE.Curve.prototype.getLengths=function(b){b||(b=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==b+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var a=[],c,d=this.getPoint(0),e,f=0;a.push(0);for(e=1;e<=b;e++)c=this.getPoint(e/b),f+=c.distanceTo(d),a.push(f),d=c;return this.cacheArcLengths=a};THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};
THREE.Curve.prototype.getUtoTmapping=function(b,a){var c=this.getLengths(),d=0,e=c.length,f;f=a?a:b*c[e-1];for(var g=0,h=e-1,j;g<=h;)if(d=Math.floor(g+(h-g)/2),j=c[d]-f,0>j)g=d+1;else if(0<j)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getNormalVector=function(b){b=this.getTangent(b);return new THREE.Vector2(-b.y,b.x)};
THREE.Curve.prototype.getTangent=function(b){var a=b-1E-4,b=b+1E-4;0>a&&(a=0);1<b&&(b=1);a=this.getPoint(a);return this.getPoint(b).clone().subSelf(a).normalize()};THREE.Curve.prototype.getTangentAt=function(b){b=this.getUtoTmapping(b);return this.getTangent(b)};THREE.LineCurve=function(b,a){this.v1=b;this.v2=a};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.getPoint=function(b){var a=this.v2.clone().subSelf(this.v1);a.multiplyScalar(b).addSelf(this.v1);return a};
THREE.LineCurve.prototype.getPointAt=function(b){return this.getPoint(b)};THREE.LineCurve.prototype.getTangent=function(){return this.v2.clone().subSelf(this.v1).normalize()};THREE.QuadraticBezierCurve=function(b,a,c){this.v0=b;this.v1=a;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.QuadraticBezierCurve.prototype.getPoint=function(b){var a;a=THREE.Shape.Utils.b2(b,this.v0.x,this.v1.x,this.v2.x);b=THREE.Shape.Utils.b2(b,this.v0.y,this.v1.y,this.v2.y);return new THREE.Vector2(a,b)};THREE.QuadraticBezierCurve.prototype.getTangent=function(b){var a;a=THREE.Curve.Utils.tangentQuadraticBezier(b,this.v0.x,this.v1.x,this.v2.x);b=THREE.Curve.Utils.tangentQuadraticBezier(b,this.v0.y,this.v1.y,this.v2.y);a=new THREE.Vector2(a,b);a.normalize();return a};
THREE.CubicBezierCurve=function(b,a,c,d){this.v0=b;this.v1=a;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.getPoint=function(b){var a;a=THREE.Shape.Utils.b3(b,this.v0.x,this.v1.x,this.v2.x,this.v3.x);b=THREE.Shape.Utils.b3(b,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(a,b)};
THREE.CubicBezierCurve.prototype.getTangent=function(b){var a;a=THREE.Curve.Utils.tangentCubicBezier(b,this.v0.x,this.v1.x,this.v2.x,this.v3.x);b=THREE.Curve.Utils.tangentCubicBezier(b,this.v0.y,this.v1.y,this.v2.y,this.v3.y);a=new THREE.Vector2(a,b);a.normalize();return a};THREE.SplineCurve=function(b){this.points=void 0==b?[]:b};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.SplineCurve.prototype.getPoint=function(b){var a=new THREE.Vector2,c=[],d=this.points,e;e=(d.length-1)*b;b=Math.floor(e);e-=b;c[0]=0==b?b:b-1;c[1]=b;c[2]=b>d.length-2?d.length-1:b+1;c[3]=b>d.length-3?d.length-1:b+2;a.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);a.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);return a};
THREE.EllipseCurve=function(b,a,c,d,e,f,g){this.aX=b;this.aY=a;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.getPoint=function(b){var a=this.aEndAngle-this.aStartAngle;this.aClockwise||(b=1-b);a=this.aStartAngle+b*a;b=this.aX+this.xRadius*Math.cos(a);a=this.aY+this.yRadius*Math.sin(a);return new THREE.Vector2(b,a)};
THREE.ArcCurve=function(b,a,c,d,e,f){THREE.EllipseCurve.call(this,b,a,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);
THREE.Curve.Utils={tangentQuadraticBezier:function(b,a,c,d){return 2*(1-b)*(c-a)+2*b*(d-c)},tangentCubicBezier:function(b,a,c,d,e){return-3*a*(1-b)*(1-b)+3*c*(1-b)*(1-b)-6*b*c*(1-b)+6*b*d*(1-b)-3*b*b*d+3*b*b*e},tangentSpline:function(b){return 6*b*b-6*b+(3*b*b-4*b+1)+(-6*b*b+6*b)+(3*b*b-2*b)},interpolate:function(b,a,c,d,e){var b=0.5*(c-b),d=0.5*(d-a),f=e*e;return(2*a-2*c+b+d)*e*f+(-3*a+3*c-2*b-d)*f+b*e+a}};
THREE.Curve.create=function(b,a){b.prototype=Object.create(THREE.Curve.prototype);b.prototype.getPoint=a;return b};THREE.LineCurve3=THREE.Curve.create(function(b,a){this.v1=b;this.v2=a},function(b){var a=new THREE.Vector3;a.sub(this.v2,this.v1);a.multiplyScalar(b);a.addSelf(this.v1);return a});
THREE.QuadraticBezierCurve3=THREE.Curve.create(function(b,a,c){this.v0=b;this.v1=a;this.v2=c},function(b){var a,c;a=THREE.Shape.Utils.b2(b,this.v0.x,this.v1.x,this.v2.x);c=THREE.Shape.Utils.b2(b,this.v0.y,this.v1.y,this.v2.y);b=THREE.Shape.Utils.b2(b,this.v0.z,this.v1.z,this.v2.z);return new THREE.Vector3(a,c,b)});
THREE.CubicBezierCurve3=THREE.Curve.create(function(b,a,c,d){this.v0=b;this.v1=a;this.v2=c;this.v3=d},function(b){var a,c;a=THREE.Shape.Utils.b3(b,this.v0.x,this.v1.x,this.v2.x,this.v3.x);c=THREE.Shape.Utils.b3(b,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=THREE.Shape.Utils.b3(b,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return new THREE.Vector3(a,c,b)});
THREE.SplineCurve3=THREE.Curve.create(function(b){this.points=void 0==b?[]:b},function(b){var a=new THREE.Vector3,c=[],d=this.points,e,b=(d.length-1)*b;e=Math.floor(b);b-=e;c[0]=0==e?e:e-1;c[1]=e;c[2]=e>d.length-2?d.length-1:e+1;c[3]=e>d.length-3?d.length-1:e+2;e=d[c[0]];var f=d[c[1]],g=d[c[2]],c=d[c[3]];a.x=THREE.Curve.Utils.interpolate(e.x,f.x,g.x,c.x,b);a.y=THREE.Curve.Utils.interpolate(e.y,f.y,g.y,c.y,b);a.z=THREE.Curve.Utils.interpolate(e.z,f.z,g.z,c.z,b);return a});
THREE.ClosedSplineCurve3=THREE.Curve.create(function(b){this.points=void 0==b?[]:b},function(b){var a=new THREE.Vector3,c=[],d=this.points,e;e=(d.length-0)*b;b=Math.floor(e);e-=b;b+=0<b?0:(Math.floor(Math.abs(b)/d.length)+1)*d.length;c[0]=(b-1)%d.length;c[1]=b%d.length;c[2]=(b+1)%d.length;c[3]=(b+2)%d.length;a.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);a.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);a.z=THREE.Curve.Utils.interpolate(d[c[0]].z,
d[c[1]].z,d[c[2]].z,d[c[3]].z,e);return a});THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.add=function(b){this.curves.push(b)};THREE.CurvePath.prototype.checkConnection=function(){};THREE.CurvePath.prototype.closePath=function(){var b=this.curves[0].getPoint(0),a=this.curves[this.curves.length-1].getPoint(1);b.equals(a)||this.curves.push(new THREE.LineCurve(a,b))};
THREE.CurvePath.prototype.getPoint=function(b){for(var a=b*this.getLength(),c=this.getCurveLengths(),b=0;b<c.length;){if(c[b]>=a)return a=c[b]-a,b=this.curves[b],a=1-a/b.getLength(),b.getPointAt(a);b++}return null};THREE.CurvePath.prototype.getLength=function(){var b=this.getCurveLengths();return b[b.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var b=[],a=0,c,d=this.curves.length;for(c=0;c<d;c++)a+=this.curves[c].getLength(),b.push(a);return this.cacheLengths=b};
THREE.CurvePath.prototype.getBoundingBox=function(){var b=this.getPoints(),a,c,d,e,f,g;a=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var h,j,i,k,m=b[0]instanceof THREE.Vector3;k=m?new THREE.Vector3:new THREE.Vector2;j=0;for(i=b.length;j<i;j++)h=b[j],h.x>a?a=h.x:h.x<e&&(e=h.x),h.y>c?c=h.y:h.y<f&&(f=h.y),m&&(h.z>d?d=h.z:h.z<g&&(g=h.z)),k.addSelf(h);b={minX:e,minY:f,maxX:a,maxY:c,centroid:k.divideScalar(i)};m&&(b.maxZ=d,b.minZ=g);return b};
THREE.CurvePath.prototype.createPointsGeometry=function(b){b=this.getPoints(b,!0);return this.createGeometry(b)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(b){b=this.getSpacedPoints(b,!0);return this.createGeometry(b)};THREE.CurvePath.prototype.createGeometry=function(b){for(var a=new THREE.Geometry,c=0;c<b.length;c++)a.vertices.push(new THREE.Vector3(b[c].x,b[c].y,b[c].z||0));return a};THREE.CurvePath.prototype.addWrapPath=function(b){this.bends.push(b)};
THREE.CurvePath.prototype.getTransformedPoints=function(b,a){var c=this.getPoints(b),d,e;a||(a=this.bends);d=0;for(e=a.length;d<e;d++)c=this.getWrapPoints(c,a[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(b,a){var c=this.getSpacedPoints(b),d,e;a||(a=this.bends);d=0;for(e=a.length;d<e;d++)c=this.getWrapPoints(c,a[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(b,a){var c=this.getBoundingBox(),d,e,f,g,h,j;d=0;for(e=b.length;d<e;d++)f=b[d],g=f.x,h=f.y,j=g/c.maxX,j=a.getUtoTmapping(j,g),g=a.getPoint(j),h=a.getNormalVector(j).multiplyScalar(h),f.x=g.x+h.x,f.y=g.y+h.y;return b};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(b){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||b)this.parent?(this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=
!1,b=!0;for(var a=0,c=this.children.length;a<c;a++)this.children[a].updateMatrixWorld(b)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;
THREE.Path=function(b){THREE.CurvePath.call(this);this.actions=[];b&&this.fromPoints(b)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};THREE.Path.prototype.fromPoints=function(b){this.moveTo(b[0].x,b[0].y);for(var a=1,c=b.length;a<c;a++)this.lineTo(b[a].x,b[a].y)};
THREE.Path.prototype.moveTo=function(b,a){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};THREE.Path.prototype.lineTo=function(b,a){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(b,a));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(b,a,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(b,a),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(b,a,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args,h=new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(b,a),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(h);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(b){var a=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,b);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:a})};THREE.Path.prototype.arc=function(b,a,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(b+g[g.length-2],a+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(b,a,c,d,e,f){this.absellipse(b,a,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(b,a,c,d,e,f,g){var h=this.actions[this.actions.length-1].args;this.absellipse(b+h[h.length-2],a+h[h.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(b,a,c,d,e,f,g){var h=Array.prototype.slice.call(arguments),j=new THREE.EllipseCurve(b,a,c,d,e,f,g);this.curves.push(j);j=j.getPoint(g?1:0);h.push(j.x);h.push(j.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:h})};
THREE.Path.prototype.getSpacedPoints=function(b){b||(b=40);for(var a=[],c=0;c<b;c++)a.push(this.getPoint(c/b));return a};
THREE.Path.prototype.getPoints=function(b,a){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(b,a);var b=b||12,c=[],d,e,f,g,h,j,i,k,m,n,p,l,r;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];j=f[3];m=f[0];n=f[1];0<c.length?(g=c[c.length-1],p=g.x,
l=g.y):(g=this.actions[d-1].args,p=g[g.length-2],l=g[g.length-1]);for(f=1;f<=b;f++)r=f/b,g=THREE.Shape.Utils.b2(r,p,m,h),r=THREE.Shape.Utils.b2(r,l,n,j),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];j=f[5];m=f[0];n=f[1];i=f[2];k=f[3];0<c.length?(g=c[c.length-1],p=g.x,l=g.y):(g=this.actions[d-1].args,p=g[g.length-2],l=g[g.length-1]);for(f=1;f<=b;f++)r=f/b,g=THREE.Shape.Utils.b3(r,p,m,i,h),r=THREE.Shape.Utils.b3(r,l,n,k,j),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;r=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=b*f[0].length;r=r.concat(f[0]);r=new THREE.SplineCurve(r);for(f=1;f<=g;f++)c.push(r.getPointAt(f/g));break;case THREE.PathActions.ARC:h=f[0];j=f[1];n=f[2];i=f[3];g=f[4];m=!!f[5];p=g-i;l=2*b;for(f=1;f<=l;f++)r=f/l,m||(r=1-r),r=i+r*p,g=h+n*Math.cos(r),r=j+n*Math.sin(r),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.ELLIPSE:h=f[0];j=f[1];n=f[2];k=f[3];i=f[4];g=f[5];m=!!f[6];p=g-i;l=2*b;for(f=1;f<=l;f++)r=f/l,m||
(r=1-r),r=i+r*p,g=h+n*Math.cos(r),r=j+k*Math.sin(r),c.push(new THREE.Vector2(g,r))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);a&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(){var b,a,c,d,e=[],f=new THREE.Path;b=0;for(a=this.actions.length;b<a;b++)c=this.actions[b],d=c.args,c=c.action,c==THREE.PathActions.MOVE_TO&&0!=f.actions.length&&(e.push(f),f=new THREE.Path),f[c].apply(f,d);0!=f.actions.length&&e.push(f);if(0==e.length)return[];var g;d=[];b=!THREE.Shape.Utils.isClockWise(e[0].getPoints());if(1==e.length)return f=e[0],g=new THREE.Shape,g.actions=f.actions,g.curves=f.curves,d.push(g),d;if(b){g=new THREE.Shape;b=0;for(a=e.length;b<
a;b++)f=e[b],THREE.Shape.Utils.isClockWise(f.getPoints())?(g.actions=f.actions,g.curves=f.curves,d.push(g),g=new THREE.Shape):g.holes.push(f)}else{b=0;for(a=e.length;b<a;b++)f=e[b],THREE.Shape.Utils.isClockWise(f.getPoints())?(g&&d.push(g),g=new THREE.Shape,g.actions=f.actions,g.curves=f.curves):g.holes.push(f);d.push(g)}return d};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);
THREE.Shape.prototype.extrude=function(b){return new THREE.ExtrudeGeometry(this,b)};THREE.Shape.prototype.makeGeometry=function(b){return new THREE.ShapeGeometry(this,b)};THREE.Shape.prototype.getPointsHoles=function(b){var a,c=this.holes.length,d=[];for(a=0;a<c;a++)d[a]=this.holes[a].getTransformedPoints(b,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(b){var a,c=this.holes.length,d=[];for(a=0;a<c;a++)d[a]=this.holes[a].getTransformedSpacedPoints(b,this.bends);return d};
THREE.Shape.prototype.extractAllPoints=function(b){return{shape:this.getTransformedPoints(b),holes:this.getPointsHoles(b)}};THREE.Shape.prototype.extractPoints=function(b){return this.useSpacedPoints?this.extractAllSpacedPoints(b):this.extractAllPoints(b)};THREE.Shape.prototype.extractAllSpacedPoints=function(b){return{shape:this.getTransformedSpacedPoints(b),holes:this.getSpacedPointsHoles(b)}};
THREE.Shape.Utils={removeHoles:function(b,a){var c=b.concat(),d=c.concat(),e,f,g,h,j,i,k,m,n,p,l=[];for(j=0;j<a.length;j++){i=a[j];Array.prototype.push.apply(d,i);f=Number.POSITIVE_INFINITY;for(e=0;e<i.length;e++){n=i[e];p=[];for(m=0;m<c.length;m++)k=c[m],k=n.distanceToSquared(k),p.push(k),k<f&&(f=k,g=e,h=m)}e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:i.length-1;var r=[i[g],c[h],c[e]];m=THREE.FontUtils.Triangulate.area(r);var w=[i[g],i[f],c[h]];n=THREE.FontUtils.Triangulate.area(w);p=h;k=g;h+=1;g+=-1;0>
h&&(h+=c.length);h%=c.length;0>g&&(g+=i.length);g%=i.length;e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:i.length-1;r=[i[g],c[h],c[e]];r=THREE.FontUtils.Triangulate.area(r);w=[i[g],i[f],c[h]];w=THREE.FontUtils.Triangulate.area(w);m+n>r+w&&(h=p,g=k,0>h&&(h+=c.length),h%=c.length,0>g&&(g+=i.length),g%=i.length,e=0<=h-1?h-1:c.length-1,f=0<=g-1?g-1:i.length-1);m=c.slice(0,h);n=c.slice(h);p=i.slice(g);k=i.slice(0,g);f=[i[g],i[f],c[h]];l.push([i[g],c[h],c[e]]);l.push(f);c=m.concat(p).concat(k).concat(n)}return{shape:c,
isolatedPts:l,allpoints:d}},triangulateShape:function(b,a){var c=THREE.Shape.Utils.removeHoles(b,a),d=c.allpoints,e=c.isolatedPts,c=THREE.FontUtils.Triangulate(c.shape,!1),f,g,h,j,i={};f=0;for(g=d.length;f<g;f++)j=d[f].x+":"+d[f].y,void 0!==i[j]&&console.log("Duplicate point",j),i[j]=f;f=0;for(g=c.length;f<g;f++){h=c[f];for(d=0;3>d;d++)j=h[d].x+":"+h[d].y,j=i[j],void 0!==j&&(h[d]=j)}f=0;for(g=e.length;f<g;f++){h=e[f];for(d=0;3>d;d++)j=h[d].x+":"+h[d].y,j=i[j],void 0!==j&&(h[d]=j)}return c.concat(e)},
isClockWise:function(b){return 0>THREE.FontUtils.Triangulate.area(b)},b2p0:function(b,a){var c=1-b;return c*c*a},b2p1:function(b,a){return 2*(1-b)*b*a},b2p2:function(b,a){return b*b*a},b2:function(b,a,c,d){return this.b2p0(b,a)+this.b2p1(b,c)+this.b2p2(b,d)},b3p0:function(b,a){var c=1-b;return c*c*c*a},b3p1:function(b,a){var c=1-b;return 3*c*c*b*a},b3p2:function(b,a){return 3*(1-b)*b*b*a},b3p3:function(b,a){return b*b*b*a},b3:function(b,a,c,d,e){return this.b3p0(b,a)+this.b3p1(b,c)+this.b3p2(b,d)+
this.b3p3(b,e)}};
THREE.AnimationHandler=function(){var b=[],a={},c={update:function(a){for(var c=0;c<b.length;c++)b[c].update(a)},addToUpdate:function(a){-1===b.indexOf(a)&&b.push(a)},removeFromUpdate:function(a){a=b.indexOf(a);-1!==a&&b.splice(a,1)},add:function(b){void 0!==a[b.name]&&console.log("THREE.AnimationHandler.add: Warning! "+b.name+" already exists in library. Overwriting.");a[b.name]=b;if(!0!==b.initialized){for(var c=0;c<b.hierarchy.length;c++){for(var d=0;d<b.hierarchy[c].keys.length;d++)if(0>b.hierarchy[c].keys[d].time&&
(b.hierarchy[c].keys[d].time=0),void 0!==b.hierarchy[c].keys[d].rot&&!(b.hierarchy[c].keys[d].rot instanceof THREE.Quaternion)){var h=b.hierarchy[c].keys[d].rot;b.hierarchy[c].keys[d].rot=new THREE.Quaternion(h[0],h[1],h[2],h[3])}if(b.hierarchy[c].keys.length&&void 0!==b.hierarchy[c].keys[0].morphTargets){h={};for(d=0;d<b.hierarchy[c].keys.length;d++)for(var j=0;j<b.hierarchy[c].keys[d].morphTargets.length;j++){var i=b.hierarchy[c].keys[d].morphTargets[j];h[i]=-1}b.hierarchy[c].usedMorphTargets=h;
for(d=0;d<b.hierarchy[c].keys.length;d++){var k={};for(i in h){for(j=0;j<b.hierarchy[c].keys[d].morphTargets.length;j++)if(b.hierarchy[c].keys[d].morphTargets[j]===i){k[i]=b.hierarchy[c].keys[d].morphTargetsInfluences[j];break}j===b.hierarchy[c].keys[d].morphTargets.length&&(k[i]=0)}b.hierarchy[c].keys[d].morphTargetsInfluences=k}}for(d=1;d<b.hierarchy[c].keys.length;d++)b.hierarchy[c].keys[d].time===b.hierarchy[c].keys[d-1].time&&(b.hierarchy[c].keys.splice(d,1),d--);for(d=0;d<b.hierarchy[c].keys.length;d++)b.hierarchy[c].keys[d].index=
d}d=parseInt(b.length*b.fps,10);b.JIT={};b.JIT.hierarchy=[];for(c=0;c<b.hierarchy.length;c++)b.JIT.hierarchy.push(Array(d));b.initialized=!0}},get:function(b){if("string"===typeof b){if(a[b])return a[b];console.log("THREE.AnimationHandler.get: Couldn't find animation "+b);return null}},parse:function(a){var b=[];if(a instanceof THREE.SkinnedMesh)for(var c=0;c<a.bones.length;c++)b.push(a.bones[c]);else d(a,b);return b}},d=function(a,b){b.push(a);for(var c=0;c<a.children.length;c++)d(a.children[c],
b)};c.LINEAR=0;c.CATMULLROM=1;c.CATMULLROM_FORWARD=2;return c}();THREE.Animation=function(b,a,c){this.root=b;this.data=THREE.AnimationHandler.get(a);this.hierarchy=THREE.AnimationHandler.parse(b);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=this.isPaused=!0;this.interpolationType=void 0!==c?c:THREE.AnimationHandler.LINEAR;this.points=[];this.target=new THREE.Vector3};
THREE.Animation.prototype.play=function(b,a){if(!1===this.isPlaying){this.isPlaying=!0;this.loop=void 0!==b?b:!0;this.currentTime=void 0!==a?a:0;var c,d=this.hierarchy.length,e;for(c=0;c<d;c++){e=this.hierarchy[c];this.interpolationType!==THREE.AnimationHandler.CATMULLROM_FORWARD&&(e.useQuaternion=!0);e.matrixAutoUpdate=!0;void 0===e.animationCache&&(e.animationCache={},e.animationCache.prevKey={pos:0,rot:0,scl:0},e.animationCache.nextKey={pos:0,rot:0,scl:0},e.animationCache.originalMatrix=e instanceof
THREE.Bone?e.skinMatrix:e.matrix);var f=e.animationCache.prevKey;e=e.animationCache.nextKey;f.pos=this.data.hierarchy[c].keys[0];f.rot=this.data.hierarchy[c].keys[0];f.scl=this.data.hierarchy[c].keys[0];e.pos=this.getNextKeyWith("pos",c,1);e.rot=this.getNextKeyWith("rot",c,1);e.scl=this.getNextKeyWith("scl",c,1)}this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};
THREE.Animation.prototype.pause=function(){!0===this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};THREE.Animation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this)};
THREE.Animation.prototype.update=function(b){if(!1!==this.isPlaying){var a=["pos","rot","scl"],c,d,e,f,g,h,j,i,k;k=this.currentTime+=b*this.timeScale;i=this.currentTime%=this.data.length;parseInt(Math.min(i*this.data.fps,this.data.length*this.data.fps),10);for(var m=0,n=this.hierarchy.length;m<n;m++){b=this.hierarchy[m];j=b.animationCache;for(var p=0;3>p;p++){c=a[p];g=j.prevKey[c];h=j.nextKey[c];if(h.time<=k){if(i<k)if(this.loop){g=this.data.hierarchy[m].keys[0];for(h=this.getNextKeyWith(c,m,1);h.time<
i;)g=h,h=this.getNextKeyWith(c,m,h.index+1)}else{this.stop();return}else{do g=h,h=this.getNextKeyWith(c,m,h.index+1);while(h.time<i)}j.prevKey[c]=g;j.nextKey[c]=h}b.matrixAutoUpdate=!0;b.matrixWorldNeedsUpdate=!0;d=(i-g.time)/(h.time-g.time);e=g[c];f=h[c];if(0>d||1<d)console.log("THREE.Animation.update: Warning! Scale out of bounds:"+d+" on bone "+m),d=0>d?0:1;if("pos"===c)if(c=b.position,this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+
(f[2]-e[2])*d;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)this.points[0]=this.getPrevKeyWith("pos",m,g.index-1).pos,this.points[1]=e,this.points[2]=f,this.points[3]=this.getNextKeyWith("pos",m,h.index+1).pos,d=0.33*d+0.33,e=this.interpolateCatmullRom(this.points,d),c.x=e[0],c.y=e[1],c.z=e[2],this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(d=this.interpolateCatmullRom(this.points,1.01*d),
this.target.set(d[0],d[1],d[2]),this.target.subSelf(c),this.target.y=0,this.target.normalize(),d=Math.atan2(this.target.x,this.target.z),b.rotation.set(0,d,0))}else"rot"===c?THREE.Quaternion.slerp(e,f,b.quaternion,d):"scl"===c&&(c=b.scale,c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+(f[2]-e[2])*d)}}}};
THREE.Animation.prototype.interpolateCatmullRom=function(b,a){var c=[],d=[],e,f,g,h,j,i;e=(b.length-1)*a;f=Math.floor(e);e-=f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>b.length-2?f:f+1;c[3]=f>b.length-3?f:f+2;f=b[c[0]];h=b[c[1]];j=b[c[2]];i=b[c[3]];c=e*e;g=e*c;d[0]=this.interpolate(f[0],h[0],j[0],i[0],e,c,g);d[1]=this.interpolate(f[1],h[1],j[1],i[1],e,c,g);d[2]=this.interpolate(f[2],h[2],j[2],i[2],e,c,g);return d};
THREE.Animation.prototype.interpolate=function(b,a,c,d,e,f,g){b=0.5*(c-b);d=0.5*(d-a);return(2*(a-c)+b+d)*g+(-3*(a-c)-2*b-d)*f+b*e+a};THREE.Animation.prototype.getNextKeyWith=function(b,a,c){for(var d=this.data.hierarchy[a].keys,c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][b])return d[c];return this.data.hierarchy[a].keys[0]};
THREE.Animation.prototype.getPrevKeyWith=function(b,a,c){for(var d=this.data.hierarchy[a].keys,c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][b])return d[c];return this.data.hierarchy[a].keys[d.length-1]};
THREE.KeyFrameAnimation=function(b,a,c){this.root=b;this.data=THREE.AnimationHandler.get(a);this.hierarchy=THREE.AnimationHandler.parse(b);this.currentTime=0;this.timeScale=0.0010;this.isPlaying=!1;this.loop=this.isPaused=!0;this.JITCompile=void 0!==c?c:!0;b=0;for(a=this.hierarchy.length;b<a;b++){var c=this.data.hierarchy[b].sids,d=this.hierarchy[b];if(this.data.hierarchy[b].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,b,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[b].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype.play=function(b,a){if(!this.isPlaying){this.isPlaying=!0;this.loop=void 0!==b?b:!0;this.currentTime=void 0!==a?a:0;this.startTimeMs=a;this.startTime=1E7;this.endTime=-this.startTime;var c,d=this.hierarchy.length,e,f;for(c=0;c<d;c++)if(e=this.hierarchy[c],f=this.data.hierarchy[c],e.useQuaternion=!0,void 0===f.animationCache&&(f.animationCache={},f.animationCache.prevKey=null,f.animationCache.nextKey=null,f.animationCache.originalMatrix=e instanceof THREE.Bone?e.skinMatrix:
e.matrix),e=this.data.hierarchy[c].keys,e.length)f.animationCache.prevKey=e[0],f.animationCache.nextKey=e[1],this.startTime=Math.min(e[0].time,this.startTime),this.endTime=Math.max(e[e.length-1].time,this.endTime);this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};THREE.KeyFrameAnimation.prototype.pause=function(){this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this);for(var b=0;b<this.data.hierarchy.length;b++){var a=this.hierarchy[b],c=this.data.hierarchy[b];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;a instanceof THREE.Bone?(d.copy(a.skinMatrix),a.skinMatrix=d):(d.copy(a.matrix),a.matrix=d);delete c.animationCache}}};
THREE.KeyFrameAnimation.prototype.update=function(b){if(this.isPlaying){var a,c,d,e,f=this.data.JIT.hierarchy,g,h,j;h=this.currentTime+=b*this.timeScale;g=this.currentTime%=this.data.length;g<this.startTimeMs&&(g=this.currentTime=this.startTimeMs+g);e=parseInt(Math.min(g*this.data.fps,this.data.length*this.data.fps),10);if((j=g<h)&&!this.loop){for(var b=0,i=this.hierarchy.length;b<i;b++){var k=this.data.hierarchy[b].keys,f=this.data.hierarchy[b].sids;d=k.length-1;e=this.hierarchy[b];if(k.length){for(k=
0;k<f.length;k++)g=f[k],(h=this.getPrevKeyWith(g,b,d))&&h.apply(g);this.data.hierarchy[b].node.updateMatrix();e.matrixWorldNeedsUpdate=!0}}this.stop()}else if(!(g<this.startTime)){b=0;for(i=this.hierarchy.length;b<i;b++){d=this.hierarchy[b];a=this.data.hierarchy[b];var k=a.keys,m=a.animationCache;if(this.JITCompile&&void 0!==f[b][e])d instanceof THREE.Bone?(d.skinMatrix=f[b][e],d.matrixWorldNeedsUpdate=!1):(d.matrix=f[b][e],d.matrixWorldNeedsUpdate=!0);else if(k.length){this.JITCompile&&m&&(d instanceof
THREE.Bone?d.skinMatrix=m.originalMatrix:d.matrix=m.originalMatrix);a=m.prevKey;c=m.nextKey;if(a&&c){if(c.time<=h){if(j&&this.loop){a=k[0];for(c=k[1];c.time<g;)a=c,c=k[a.index+1]}else if(!j)for(var n=k.length-1;c.time<g&&c.index!==n;)a=c,c=k[a.index+1];m.prevKey=a;m.nextKey=c}c.time>=g?a.interpolate(c,g):a.interpolate(c,c.time)}this.data.hierarchy[b].node.updateMatrix();d.matrixWorldNeedsUpdate=!0}}if(this.JITCompile&&void 0===f[0][e]){this.hierarchy[0].updateMatrixWorld(!0);for(b=0;b<this.hierarchy.length;b++)f[b][e]=
this.hierarchy[b]instanceof THREE.Bone?this.hierarchy[b].skinMatrix.clone():this.hierarchy[b].matrix.clone()}}}};THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(b,a,c){a=this.data.hierarchy[a].keys;for(c%=a.length;c<a.length;c++)if(a[c].hasTarget(b))return a[c];return a[0]};THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(b,a,c){a=this.data.hierarchy[a].keys;for(c=0<=c?c:c+a.length;0<=c;c--)if(a[c].hasTarget(b))return a[c];return a[a.length-1]};
THREE.CubeCamera=function(b,a,c){THREE.Object3D.call(this);var d=new THREE.PerspectiveCamera(90,1,b,a);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,b,a);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,b,a);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,b,a);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));this.add(g);var h=new THREE.PerspectiveCamera(90,
1,b,a);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var j=new THREE.PerspectiveCamera(90,1,b,a);j.up.set(0,-1,0);j.lookAt(new THREE.Vector3(0,0,-1));this.add(j);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,n=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=
2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.generateMipmaps=n;c.activeCubeFace=5;a.render(b,j,c)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CombinedCamera=function(b,a,c,d,e,f,g){THREE.Camera.call(this);this.fov=c;this.left=-b/2;this.right=b/2;this.top=a/2;this.bottom=-a/2;this.cameraO=new THREE.OrthographicCamera(b/-2,b/2,a/2,a/-2,f,g);this.cameraP=new THREE.PerspectiveCamera(c,b/a,d,e);this.zoom=1;this.toPerspective()};
THREE.CombinedCamera.prototype=Object.create(THREE.Camera.prototype);THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near;this.far=this.cameraP.far;this.cameraP.fov=this.fov/this.zoom;this.cameraP.updateProjectionMatrix();this.projectionMatrix=this.cameraP.projectionMatrix;this.inPerspectiveMode=!0;this.inOrthographicMode=!1};
THREE.CombinedCamera.prototype.toOrthographic=function(){var b=this.cameraP.aspect,a=(this.cameraP.near+this.cameraP.far)/2,a=Math.tan(this.fov/2)*a,b=2*a*b/2,a=a/this.zoom,b=b/this.zoom;this.cameraO.left=-b;this.cameraO.right=b;this.cameraO.top=a;this.cameraO.bottom=-a;this.cameraO.updateProjectionMatrix();this.near=this.cameraO.near;this.far=this.cameraO.far;this.projectionMatrix=this.cameraO.projectionMatrix;this.inPerspectiveMode=!1;this.inOrthographicMode=!0};
THREE.CombinedCamera.prototype.setSize=function(b,a){this.cameraP.aspect=b/a;this.left=-b/2;this.right=b/2;this.top=a/2;this.bottom=-a/2};THREE.CombinedCamera.prototype.setFov=function(b){this.fov=b;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.updateProjectionMatrix=function(){this.inPerspectiveMode?this.toPerspective():(this.toPerspective(),this.toOrthographic())};
THREE.CombinedCamera.prototype.setLens=function(b,a){void 0===a&&(a=24);var c=2*Math.atan(a/(2*b))*(180/Math.PI);this.setFov(c);return c};THREE.CombinedCamera.prototype.setZoom=function(b){this.zoom=b;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0;this.rotation.y=Math.PI;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0;this.rotation.y=-Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0;this.rotation.y=Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.AsteriskGeometry=function(b,a){THREE.Geometry.call(this);for(var c=0.707*b,d=0.707*a,c=[[b,0,0],[a,0,0],[-b,0,0],[-a,0,0],[0,b,0],[0,a,0],[0,-b,0],[0,-a,0],[0,0,b],[0,0,a],[0,0,-b],[0,0,-a],[c,c,0],[d,d,0],[-c,-c,0],[-d,-d,0],[c,-c,0],[d,-d,0],[-c,c,0],[-d,d,0],[c,0,c],[d,0,d],[-c,0,-c],[-d,0,-d],[c,0,-c],[d,0,-d],[-c,0,c],[-d,0,d],[0,c,c],[0,d,d],[0,-c,-c],[0,-d,-d],[0,c,-c],[0,d,-d],[0,-c,c],[0,-d,d]],d=0,e=c.length;d<e;d++)this.vertices.push(new THREE.Vector3(c[d][0],c[d][1],c[d][2]))};
THREE.AsteriskGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CircleGeometry=function(b,a,c,d){THREE.Geometry.call(this);var b=b||50,c=void 0!==c?c:0,d=void 0!==d?d:2*Math.PI,a=void 0!==a?Math.max(3,a):8,e,f=[];e=new THREE.Vector3;var g=new THREE.UV(0.5,0.5);this.vertices.push(e);f.push(g);for(e=0;e<=a;e++){var h=new THREE.Vector3;h.x=b*Math.cos(c+e/a*d);h.y=b*Math.sin(c+e/a*d);this.vertices.push(h);f.push(new THREE.UV((h.x/b+1)/2,-(h.y/b+1)/2+1))}c=new THREE.Vector3(0,0,-1);for(e=1;e<=a;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c,c,c])),this.faceVertexUvs[0].push([f[e],
f[e+1],g]);this.computeCentroids();this.computeFaceNormals();this.boundingSphere={radius:b}};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CubeGeometry=function(b,a,c,d,e,f){function g(a,b,c,d,e,f,g,r){var w,s=h.widthSegments,u=h.heightSegments,v=e/2,o=f/2,B=h.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)w="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)w="y",u=h.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)w="x",s=h.depthSegments;var x=s+1,t=u+1,q=e/s,C=f/u,y=new THREE.Vector3;y[w]=0<g?1:-1;for(e=0;e<t;e++)for(f=0;f<x;f++){var D=new THREE.Vector3;D[a]=(f*q-v)*c;D[b]=(e*C-o)*d;D[w]=g;h.vertices.push(D)}for(e=
0;e<u;e++)for(f=0;f<s;f++)a=new THREE.Face4(f+x*e+B,f+x*(e+1)+B,f+1+x*(e+1)+B,f+1+x*e+B),a.normal.copy(y),a.vertexNormals.push(y.clone(),y.clone(),y.clone(),y.clone()),a.materialIndex=r,h.faces.push(a),h.faceVertexUvs[0].push([new THREE.UV(f/s,1-e/u),new THREE.UV(f/s,1-(e+1)/u),new THREE.UV((f+1)/s,1-(e+1)/u),new THREE.UV((f+1)/s,1-e/u)])}THREE.Geometry.call(this);var h=this;this.width=b;this.height=a;this.depth=c;this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;b=this.width/
2;a=this.height/2;c=this.depth/2;g("z","y",-1,-1,this.depth,this.height,b,0);g("z","y",1,-1,this.depth,this.height,-b,1);g("x","z",1,1,this.width,this.depth,a,2);g("x","z",1,-1,this.width,this.depth,-a,3);g("x","y",1,-1,this.width,this.height,c,4);g("x","y",-1,-1,this.width,this.height,-c,5);this.computeCentroids();this.mergeVertices()};THREE.CubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CylinderGeometry=function(b,a,c,d,e,f){THREE.Geometry.call(this);var b=void 0!==b?b:20,a=void 0!==a?a:20,c=void 0!==c?c:100,g=c/2,d=d||8,e=e||1,h,j,i=[],k=[];for(j=0;j<=e;j++){var m=[],n=[],p=j/e,l=p*(a-b)+b;for(h=0;h<=d;h++){var r=h/d,w=new THREE.Vector3;w.x=l*Math.sin(2*r*Math.PI);w.y=-p*c+g;w.z=l*Math.cos(2*r*Math.PI);this.vertices.push(w);m.push(this.vertices.length-1);n.push(new THREE.UV(r,1-p))}i.push(m);k.push(n)}c=(a-b)/c;for(h=0;h<d;h++){0!==b?(m=this.vertices[i[0][h]].clone(),n=this.vertices[i[0][h+
1]].clone()):(m=this.vertices[i[1][h]].clone(),n=this.vertices[i[1][h+1]].clone());m.setY(Math.sqrt(m.x*m.x+m.z*m.z)*c).normalize();n.setY(Math.sqrt(n.x*n.x+n.z*n.z)*c).normalize();for(j=0;j<e;j++){var p=i[j][h],l=i[j+1][h],r=i[j+1][h+1],w=i[j][h+1],s=m.clone(),u=m.clone(),v=n.clone(),o=n.clone(),B=k[j][h].clone(),x=k[j+1][h].clone(),t=k[j+1][h+1].clone(),q=k[j][h+1].clone();this.faces.push(new THREE.Face4(p,l,r,w,[s,u,v,o]));this.faceVertexUvs[0].push([B,x,t,q])}}if(!f&&0<b){this.vertices.push(new THREE.Vector3(0,
g,0));for(h=0;h<d;h++)p=i[0][h],l=i[0][h+1],r=this.vertices.length-1,s=new THREE.Vector3(0,1,0),u=new THREE.Vector3(0,1,0),v=new THREE.Vector3(0,1,0),B=k[0][h].clone(),x=k[0][h+1].clone(),t=new THREE.UV(x.u,0),this.faces.push(new THREE.Face3(p,l,r,[s,u,v])),this.faceVertexUvs[0].push([B,x,t])}if(!f&&0<a){this.vertices.push(new THREE.Vector3(0,-g,0));for(h=0;h<d;h++)p=i[j][h+1],l=i[j][h],r=this.vertices.length-1,s=new THREE.Vector3(0,-1,0),u=new THREE.Vector3(0,-1,0),v=new THREE.Vector3(0,-1,0),B=
k[j][h+1].clone(),x=k[j][h].clone(),t=new THREE.UV(x.u,1),this.faces.push(new THREE.Face3(p,l,r,[s,u,v])),this.faceVertexUvs[0].push([B,x,t])}this.computeCentroids();this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry=function(b,a){"undefined"!==typeof b&&(THREE.Geometry.call(this),b=b instanceof Array?b:[b],this.shapebb=b[b.length-1].getBoundingBox(),this.addShapeList(b,a),this.computeCentroids(),this.computeFaceNormals())};
THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.addShapeList=function(b,a){for(var c=b.length,d=0;d<c;d++)this.addShape(b[d],a)};
THREE.ExtrudeGeometry.prototype.addShape=function(b,a){function c(a,b,c){b||console.log("die");return b.clone().multiplyScalar(c).addSelf(a)}function d(a,b,c){var d=THREE.ExtrudeGeometry.__v1,e=THREE.ExtrudeGeometry.__v2,f=THREE.ExtrudeGeometry.__v3,g=THREE.ExtrudeGeometry.__v4,h=THREE.ExtrudeGeometry.__v5,i=THREE.ExtrudeGeometry.__v6;d.set(a.x-b.x,a.y-b.y);e.set(a.x-c.x,a.y-c.y);d=d.normalize();e=e.normalize();f.set(-d.y,d.x);g.set(e.y,-e.x);h.copy(a).addSelf(f);i.copy(a).addSelf(g);if(h.equals(i))return g.clone();
h.copy(b).addSelf(f);i.copy(c).addSelf(g);f=d.dot(g);g=i.subSelf(h).dot(g);0===f&&(console.log("Either infinite or no solutions!"),0===g?console.log("Its finite solutions."):console.log("Too bad, no solutions."));g/=f;0>g?(b=Math.atan2(b.y-a.y,b.x-a.x),a=Math.atan2(c.y-a.y,c.x-a.x),b>a&&(a+=2*Math.PI),c=(b+a)/2,a=-Math.cos(c),c=-Math.sin(c),a=new THREE.Vector2(a,c)):a=d.multiplyScalar(g).addSelf(h).subSelf(a).clone();return a}function e(c,d){var e,f;for(z=c.length;0<=--z;){e=z;f=z-1;0>f&&(f=c.length-
1);for(var g=0,h=n+2*k,g=0;g<h;g++){var i=L*g,j=L*(g+1),m=d+e+i,i=d+f+i,l=d+f+j,j=d+e+j,p=c,o=g,r=h,q=e,t=f,m=m+D,i=i+D,l=l+D,j=j+D;y.faces.push(new THREE.Face4(m,i,l,j,null,null,s));m=u.generateSideWallUV(y,b,p,a,m,i,l,j,o,r,q,t);y.faceVertexUvs[0].push(m)}}}function f(a,b,c){y.vertices.push(new THREE.Vector3(a,b,c))}function g(c,d,e,f){c+=D;d+=D;e+=D;y.faces.push(new THREE.Face3(c,d,e,null,null,w));c=f?u.generateBottomUV(y,b,a,c,d,e):u.generateTopUV(y,b,a,c,d,e);y.faceVertexUvs[0].push(c)}var h=
void 0!==a.amount?a.amount:100,j=void 0!==a.bevelThickness?a.bevelThickness:6,i=void 0!==a.bevelSize?a.bevelSize:j-2,k=void 0!==a.bevelSegments?a.bevelSegments:3,m=void 0!==a.bevelEnabled?a.bevelEnabled:!0,n=void 0!==a.steps?a.steps:1,p=a.extrudePath,l,r=!1,w=a.material,s=a.extrudeMaterial,u=void 0!==a.UVGenerator?a.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,v,o,B,x;p&&(l=p.getSpacedPoints(n),r=!0,m=!1,v=void 0!==a.frames?a.frames:new THREE.TubeGeometry.FrenetFrames(p,n,!1),o=new THREE.Vector3,
B=new THREE.Vector3,x=new THREE.Vector3);m||(i=j=k=0);var t,q,C,y=this,D=this.vertices.length,p=b.extractPoints(),F=p.shape,p=p.holes,A=!THREE.Shape.Utils.isClockWise(F);if(A){F=F.reverse();q=0;for(C=p.length;q<C;q++)t=p[q],THREE.Shape.Utils.isClockWise(t)&&(p[q]=t.reverse());A=!1}var H=THREE.Shape.Utils.triangulateShape(F,p),A=F;q=0;for(C=p.length;q<C;q++)t=p[q],F=F.concat(t);var G,E,J,I,L=F.length,M=H.length,N=[],z=0,K=A.length;G=K-1;for(E=z+1;z<K;z++,G++,E++)G===K&&(G=0),E===K&&(E=0),N[z]=d(A[z],
A[G],A[E]);var Q=[],O,P=N.concat();q=0;for(C=p.length;q<C;q++){t=p[q];O=[];z=0;K=t.length;G=K-1;for(E=z+1;z<K;z++,G++,E++)G===K&&(G=0),E===K&&(E=0),O[z]=d(t[z],t[G],t[E]);Q.push(O);P=P.concat(O)}for(G=0;G<k;G++){t=G/k;J=j*(1-t);E=i*Math.sin(t*Math.PI/2);z=0;for(K=A.length;z<K;z++)I=c(A[z],N[z],E),f(I.x,I.y,-J);q=0;for(C=p.length;q<C;q++){t=p[q];O=Q[q];z=0;for(K=t.length;z<K;z++)I=c(t[z],O[z],E),f(I.x,I.y,-J)}}E=i;for(z=0;z<L;z++)I=m?c(F[z],P[z],E):F[z],r?(B.copy(v.normals[0]).multiplyScalar(I.x),
o.copy(v.binormals[0]).multiplyScalar(I.y),x.copy(l[0]).addSelf(B).addSelf(o),f(x.x,x.y,x.z)):f(I.x,I.y,0);for(t=1;t<=n;t++)for(z=0;z<L;z++)I=m?c(F[z],P[z],E):F[z],r?(B.copy(v.normals[t]).multiplyScalar(I.x),o.copy(v.binormals[t]).multiplyScalar(I.y),x.copy(l[t]).addSelf(B).addSelf(o),f(x.x,x.y,x.z)):f(I.x,I.y,h/n*t);for(G=k-1;0<=G;G--){t=G/k;J=j*(1-t);E=i*Math.sin(t*Math.PI/2);z=0;for(K=A.length;z<K;z++)I=c(A[z],N[z],E),f(I.x,I.y,h+J);q=0;for(C=p.length;q<C;q++){t=p[q];O=Q[q];z=0;for(K=t.length;z<
K;z++)I=c(t[z],O[z],E),r?f(I.x,I.y+l[n-1].y,l[n-1].x+J):f(I.x,I.y,h+J)}}if(m){j=0*L;for(z=0;z<M;z++)h=H[z],g(h[2]+j,h[1]+j,h[0]+j,!0);j=L*(n+2*k);for(z=0;z<M;z++)h=H[z],g(h[0]+j,h[1]+j,h[2]+j,!1)}else{for(z=0;z<M;z++)h=H[z],g(h[2],h[1],h[0],!0);for(z=0;z<M;z++)h=H[z],g(h[0]+L*n,h[1]+L*n,h[2]+L*n,!1)}h=0;e(A,h);h+=A.length;q=0;for(C=p.length;q<C;q++)t=p[q],e(t,h),h+=t.length};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(b,a,c,d,e,f){a=b.vertices[e].x;e=b.vertices[e].y;c=b.vertices[f].x;f=b.vertices[f].y;return[new THREE.UV(b.vertices[d].x,b.vertices[d].y),new THREE.UV(a,e),new THREE.UV(c,f)]},generateBottomUV:function(b,a,c,d,e,f){return this.generateTopUV(b,a,c,d,e,f)},generateSideWallUV:function(b,a,c,d,e,f,g,h){var a=b.vertices[e].x,c=b.vertices[e].y,e=b.vertices[e].z,d=b.vertices[f].x,j=b.vertices[f].y,f=b.vertices[f].z,i=b.vertices[g].x,k=b.vertices[g].y,
g=b.vertices[g].z,m=b.vertices[h].x,n=b.vertices[h].y,b=b.vertices[h].z;return 0.01>Math.abs(c-j)?[new THREE.UV(a,1-e),new THREE.UV(d,1-f),new THREE.UV(i,1-g),new THREE.UV(m,1-b)]:[new THREE.UV(c,1-e),new THREE.UV(j,1-f),new THREE.UV(k,1-g),new THREE.UV(n,1-b)]}};THREE.ExtrudeGeometry.__v1=new THREE.Vector2;THREE.ExtrudeGeometry.__v2=new THREE.Vector2;THREE.ExtrudeGeometry.__v3=new THREE.Vector2;THREE.ExtrudeGeometry.__v4=new THREE.Vector2;THREE.ExtrudeGeometry.__v5=new THREE.Vector2;
THREE.ExtrudeGeometry.__v6=new THREE.Vector2;THREE.ShapeGeometry=function(b,a){THREE.Geometry.call(this);!1===b instanceof Array&&(b=[b]);this.shapebb=b[b.length-1].getBoundingBox();this.addShapeList(b,a);this.computeCentroids();this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.addShapeList=function(b,a){for(var c=0,d=b.length;c<d;c++)this.addShape(b[c],a);return this};
THREE.ShapeGeometry.prototype.addShape=function(b,a){void 0===a&&(a={});var c=a.material,d=void 0===a.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:a.UVGenerator,e,f,g,h=this.vertices.length;e=b.extractPoints();var j=e.shape,i=e.holes;if(!THREE.Shape.Utils.isClockWise(j)){j=j.reverse();e=0;for(f=i.length;e<f;e++)g=i[e],THREE.Shape.Utils.isClockWise(g)&&(i[e]=g.reverse())}var k=THREE.Shape.Utils.triangulateShape(j,i);e=0;for(f=i.length;e<f;e++)g=i[e],j=j.concat(g);i=j.length;f=k.length;for(e=
0;e<i;e++)g=j[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)i=k[e],j=i[0]+h,g=i[1]+h,i=i[2]+h,this.faces.push(new THREE.Face3(j,g,i,null,null,c)),this.faceVertexUvs[0].push(d.generateBottomUV(this,b,a,j,g,i))};
THREE.LatheGeometry=function(b,a,c){THREE.Geometry.call(this);for(var a=a||12,c=c||2*Math.PI,d=[],e=(new THREE.Matrix4).makeRotationZ(c/a),f=0;f<b.length;f++)d[f]=b[f].clone(),this.vertices.push(d[f]);for(var g=a+1,c=0;c<g;c++)for(f=0;f<d.length;f++)d[f]=e.multiplyVector3(d[f].clone()),this.vertices.push(d[f]);for(c=0;c<a;c++){d=0;for(e=b.length;d<e-1;d++)this.faces.push(new THREE.Face4(c*e+d,(c+1)%g*e+d,(c+1)%g*e+(d+1)%e,c*e+(d+1)%e)),this.faceVertexUvs[0].push([new THREE.UV(1-c/a,d/e),new THREE.UV(1-
(c+1)/a,d/e),new THREE.UV(1-(c+1)/a,(d+1)/e),new THREE.UV(1-c/a,(d+1)/e)])}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry=function(b,a,c,d){THREE.Geometry.call(this);this.width=b;this.height=a;this.widthSegments=c||1;this.heightSegments=d||1;for(var c=b/2,e=a/2,d=this.widthSegments,f=this.heightSegments,g=d+1,h=f+1,j=this.width/d,i=this.height/f,k=new THREE.Vector3(0,0,1),b=0;b<h;b++)for(a=0;a<g;a++)this.vertices.push(new THREE.Vector3(a*j-c,-(b*i-e),0));for(b=0;b<f;b++)for(a=0;a<d;a++)c=new THREE.Face4(a+g*b,a+g*(b+1),a+1+g*(b+1),a+1+g*b),c.normal.copy(k),c.vertexNormals.push(k.clone(),k.clone(),
k.clone(),k.clone()),this.faces.push(c),this.faceVertexUvs[0].push([new THREE.UV(a/d,1-b/f),new THREE.UV(a/d,1-(b+1)/f),new THREE.UV((a+1)/d,1-(b+1)/f),new THREE.UV((a+1)/d,1-b/f)]);this.computeCentroids()};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry=function(b,a,c,d,e,f,g){THREE.Geometry.call(this);this.radius=b||50;this.widthSegments=Math.max(3,Math.floor(a)||8);this.heightSegments=Math.max(2,Math.floor(c)||6);for(var d=void 0!==d?d:0,e=void 0!==e?e:2*Math.PI,f=void 0!==f?f:0,g=void 0!==g?g:Math.PI,c=[],h=[],a=0;a<=this.heightSegments;a++){for(var j=[],i=[],b=0;b<=this.widthSegments;b++){var k=b/this.widthSegments,m=a/this.heightSegments,n=new THREE.Vector3;n.x=-this.radius*Math.cos(d+k*e)*Math.sin(f+m*g);n.y=this.radius*
Math.cos(f+m*g);n.z=this.radius*Math.sin(d+k*e)*Math.sin(f+m*g);this.vertices.push(n);j.push(this.vertices.length-1);i.push(new THREE.UV(k,1-m))}c.push(j);h.push(i)}for(a=0;a<this.heightSegments;a++)for(b=0;b<this.widthSegments;b++){var d=c[a][b+1],e=c[a][b],f=c[a+1][b],g=c[a+1][b+1],j=this.vertices[d].clone().normalize(),i=this.vertices[e].clone().normalize(),k=this.vertices[f].clone().normalize(),m=this.vertices[g].clone().normalize(),n=h[a][b+1].clone(),p=h[a][b].clone(),l=h[a+1][b].clone(),r=
h[a+1][b+1].clone();Math.abs(this.vertices[d].y)===this.radius?(this.faces.push(new THREE.Face3(d,f,g,[j,k,m])),this.faceVertexUvs[0].push([n,l,r])):Math.abs(this.vertices[f].y)===this.radius?(this.faces.push(new THREE.Face3(d,e,f,[j,i,k])),this.faceVertexUvs[0].push([n,p,l])):(this.faces.push(new THREE.Face4(d,e,f,g,[j,i,k,m])),this.faceVertexUvs[0].push([n,p,l,r]))}this.computeCentroids();this.computeFaceNormals();this.boundingSphere={radius:this.radius}};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TextGeometry=function(b,a){var c=THREE.FontUtils.generateShapes(b,a);a.amount=void 0!==a.height?a.height:50;void 0===a.bevelThickness&&(a.bevelThickness=10);void 0===a.bevelSize&&(a.bevelSize=8);void 0===a.bevelEnabled&&(a.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,a)};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TorusGeometry=function(b,a,c,d,e){THREE.Geometry.call(this);this.radius=b||100;this.tube=a||40;this.radialSegments=c||8;this.tubularSegments=d||6;this.arc=e||2*Math.PI;e=new THREE.Vector3;b=[];a=[];for(c=0;c<=this.radialSegments;c++)for(d=0;d<=this.tubularSegments;d++){var f=d/this.tubularSegments*this.arc,g=2*c/this.radialSegments*Math.PI;e.x=this.radius*Math.cos(f);e.y=this.radius*Math.sin(f);var h=new THREE.Vector3;h.x=(this.radius+this.tube*Math.cos(g))*Math.cos(f);h.y=(this.radius+this.tube*
Math.cos(g))*Math.sin(f);h.z=this.tube*Math.sin(g);this.vertices.push(h);b.push(new THREE.UV(d/this.tubularSegments,c/this.radialSegments));a.push(h.clone().subSelf(e).normalize())}for(c=1;c<=this.radialSegments;c++)for(d=1;d<=this.tubularSegments;d++){var e=(this.tubularSegments+1)*c+d-1,f=(this.tubularSegments+1)*(c-1)+d-1,g=(this.tubularSegments+1)*(c-1)+d,h=(this.tubularSegments+1)*c+d,j=new THREE.Face4(e,f,g,h,[a[e],a[f],a[g],a[h]]);j.normal.addSelf(a[e]);j.normal.addSelf(a[f]);j.normal.addSelf(a[g]);
j.normal.addSelf(a[h]);j.normal.normalize();this.faces.push(j);this.faceVertexUvs[0].push([b[e].clone(),b[f].clone(),b[g].clone(),b[h].clone()])}this.computeCentroids()};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry=function(b,a,c,d,e,f,g){function h(a,b,c,d,e,f){var g=Math.cos(a);Math.cos(b);b=Math.sin(a);a*=c/d;c=Math.cos(a);g*=0.5*e*(2+c);b=0.5*e*(2+c)*b;e=0.5*f*e*Math.sin(a);return new THREE.Vector3(g,b,e)}THREE.Geometry.call(this);this.radius=b||200;this.tube=a||40;this.radialSegments=c||64;this.tubularSegments=d||8;this.p=e||2;this.q=f||3;this.heightScale=g||1;this.grid=Array(this.radialSegments);c=new THREE.Vector3;d=new THREE.Vector3;e=new THREE.Vector3;for(b=0;b<this.radialSegments;++b){this.grid[b]=
Array(this.tubularSegments);for(a=0;a<this.tubularSegments;++a){var j=2*(b/this.radialSegments)*this.p*Math.PI,g=2*(a/this.tubularSegments)*Math.PI,f=h(j,g,this.q,this.p,this.radius,this.heightScale),j=h(j+0.01,g,this.q,this.p,this.radius,this.heightScale);c.sub(j,f);d.add(j,f);e.cross(c,d);d.cross(e,c);e.normalize();d.normalize();j=-this.tube*Math.cos(g);g=this.tube*Math.sin(g);f.x+=j*d.x+g*e.x;f.y+=j*d.y+g*e.y;f.z+=j*d.z+g*e.z;this.grid[b][a]=this.vertices.push(new THREE.Vector3(f.x,f.y,f.z))-1}}for(b=
0;b<this.radialSegments;++b)for(a=0;a<this.tubularSegments;++a){var e=(b+1)%this.radialSegments,f=(a+1)%this.tubularSegments,c=this.grid[b][a],d=this.grid[e][a],e=this.grid[e][f],f=this.grid[b][f],g=new THREE.UV(b/this.radialSegments,a/this.tubularSegments),j=new THREE.UV((b+1)/this.radialSegments,a/this.tubularSegments),i=new THREE.UV((b+1)/this.radialSegments,(a+1)/this.tubularSegments),k=new THREE.UV(b/this.radialSegments,(a+1)/this.tubularSegments);this.faces.push(new THREE.Face4(c,d,e,f));this.faceVertexUvs[0].push([g,
j,i,k])}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry=function(b,a,c,d,e,f){THREE.Geometry.call(this);this.path=b;this.segments=a||64;this.radius=c||1;this.radiusSegments=d||8;this.closed=e||!1;f&&(this.debug=new THREE.Object3D);this.grid=[];var g,h,f=this.segments+1,j,i,k,m=new THREE.Vector3,n,p,l,a=new THREE.TubeGeometry.FrenetFrames(b,a,e);n=a.tangents;p=a.normals;l=a.binormals;this.tangents=n;this.normals=p;this.binormals=l;for(a=0;a<f;a++){this.grid[a]=[];d=a/(f-1);k=b.getPointAt(d);d=n[a];g=p[a];h=l[a];this.debug&&(this.debug.add(new THREE.ArrowHelper(d,
k,c,255)),this.debug.add(new THREE.ArrowHelper(g,k,c,16711680)),this.debug.add(new THREE.ArrowHelper(h,k,c,65280)));for(d=0;d<this.radiusSegments;d++)j=2*(d/this.radiusSegments)*Math.PI,i=-this.radius*Math.cos(j),j=this.radius*Math.sin(j),m.copy(k),m.x+=i*g.x+j*h.x,m.y+=i*g.y+j*h.y,m.z+=i*g.z+j*h.z,this.grid[a][d]=this.vertices.push(new THREE.Vector3(m.x,m.y,m.z))-1}for(a=0;a<this.segments;a++)for(d=0;d<this.radiusSegments;d++)f=e?(a+1)%this.segments:a+1,m=(d+1)%this.radiusSegments,b=this.grid[a][d],
c=this.grid[f][d],f=this.grid[f][m],m=this.grid[a][m],n=new THREE.UV(a/this.segments,d/this.radiusSegments),p=new THREE.UV((a+1)/this.segments,d/this.radiusSegments),l=new THREE.UV((a+1)/this.segments,(d+1)/this.radiusSegments),g=new THREE.UV(a/this.segments,(d+1)/this.radiusSegments),this.faces.push(new THREE.Face4(b,c,f,m)),this.faceVertexUvs[0].push([n,p,l,g]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.FrenetFrames=function(b,a,c){new THREE.Vector3;var d=new THREE.Vector3;new THREE.Vector3;var e=[],f=[],g=[],h=new THREE.Vector3,j=new THREE.Matrix4,a=a+1,i,k,m;this.tangents=e;this.normals=f;this.binormals=g;for(i=0;i<a;i++)k=i/(a-1),e[i]=b.getTangentAt(k),e[i].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;b=Number.MAX_VALUE;i=Math.abs(e[0].x);k=Math.abs(e[0].y);m=Math.abs(e[0].z);i<=b&&(b=i,d.set(1,0,0));k<=b&&(b=k,d.set(0,1,0));m<=b&&d.set(0,0,1);h.cross(e[0],d).normalize();
f[0].cross(e[0],h);g[0].cross(e[0],f[0]);for(i=1;i<a;i++)f[i]=f[i-1].clone(),g[i]=g[i-1].clone(),h.cross(e[i-1],e[i]),1E-4<h.length()&&(h.normalize(),d=Math.acos(e[i-1].dot(e[i])),j.makeRotationAxis(h,d).multiplyVector3(f[i])),g[i].cross(e[i],f[i]);if(c){d=Math.acos(f[0].dot(f[a-1]));d/=a-1;0<e[0].dot(h.cross(f[0],f[a-1]))&&(d=-d);for(i=1;i<a;i++)j.makeRotationAxis(e[i],d*i).multiplyVector3(f[i]),g[i].cross(e[i],f[i])}};
THREE.PolyhedronGeometry=function(b,a,c,d){function e(a){var b=a.normalize().clone();b.index=j.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+0.5,a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+0.5;b.uv=new THREE.UV(c,1-a);return b}function f(a,b,c,d){1>d?(d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]),d.centroid.addSelf(a).addSelf(b).addSelf(c).divideScalar(3),d.normal=d.centroid.clone().normalize(),j.faces.push(d),d=Math.atan2(d.centroid.z,-d.centroid.x),
j.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])):(d-=1,f(a,g(a,b),g(a,c),d),f(g(a,b),b,g(b,c),d),f(g(a,c),g(b,c),c,d),f(g(a,b),g(b,c),g(a,c),d))}function g(a,b){m[a.index]||(m[a.index]=[]);m[b.index]||(m[b.index]=[]);var c=m[a.index][b.index];void 0===c&&(m[a.index][b.index]=m[b.index][a.index]=c=e((new THREE.Vector3).add(a,b).divideScalar(2)));return c}function h(a,b,c){0>c&&1===a.u&&(a=new THREE.UV(a.u-1,a.v));0===b.x&&0===b.z&&(a=new THREE.UV(c/2/Math.PI+0.5,a.v));return a}THREE.Geometry.call(this);
for(var c=c||1,d=d||0,j=this,i=0,k=b.length;i<k;i++)e(new THREE.Vector3(b[i][0],b[i][1],b[i][2]));for(var m=[],b=this.vertices,i=0,k=a.length;i<k;i++)f(b[a[i][0]],b[a[i][1]],b[a[i][2]],d);this.mergeVertices();i=0;for(k=this.vertices.length;i<k;i++)this.vertices[i].multiplyScalar(c);this.computeCentroids();this.boundingSphere={radius:c}};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry=function(b,a){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[[-1,c,0],[1,c,0],[-1,-c,0],[1,-c,0],[0,-1,c],[0,1,c],[0,-1,-c],[0,1,-c],[c,0,-1],[c,0,1],[-c,0,-1],[-c,0,1]],[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]],b,a)};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry=function(b,a){THREE.PolyhedronGeometry.call(this,[[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]],[[0,2,4],[0,4,3],[0,3,5],[0,5,2],[1,2,5],[1,5,3],[1,3,4],[1,4,2]],b,a)};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry=function(b,a){THREE.PolyhedronGeometry.call(this,[[1,1,1],[-1,-1,1],[-1,1,-1],[1,-1,-1]],[[2,1,0],[0,3,2],[1,3,0],[2,3,1]],b,a)};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry=function(b,a,c,d){THREE.Geometry.call(this);var e=this.vertices,f=this.faces,g=this.faceVertexUvs[0],d=void 0===d?!1:d,h,j,i,k,m=a+1;for(h=0;h<=c;h++){k=h/c;for(j=0;j<=a;j++)i=j/a,i=b(i,k),e.push(i)}var n,p,l,r;for(h=0;h<c;h++)for(j=0;j<a;j++)b=h*m+j,e=h*m+j+1,k=(h+1)*m+j,i=(h+1)*m+j+1,n=new THREE.UV(j/a,h/c),p=new THREE.UV((j+1)/a,h/c),l=new THREE.UV(j/a,(h+1)/c),r=new THREE.UV((j+1)/a,(h+1)/c),d?(f.push(new THREE.Face3(b,e,k)),f.push(new THREE.Face3(e,i,k)),g.push([n,p,
l]),g.push([p,r,l])):(f.push(new THREE.Face4(b,e,i,k)),g.push([n,p,r,l]));this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ConvexGeometry=function(b){function a(a){var b=a.length();return new THREE.UV(a.x/b,a.y/b)}THREE.Geometry.call(this);for(var c=[[0,1,2],[0,2,1]],d=3;d<b.length;d++){var e=d,f=b[e].clone(),g=f.length();f.x+=g*2E-6*(Math.random()-0.5);f.y+=g*2E-6*(Math.random()-0.5);f.z+=g*2E-6*(Math.random()-0.5);for(var g=[],h=0;h<c.length;){var j=c[h],i=f,k=b[j[0]],m;m=k;var n=b[j[1]],p=b[j[2]],l=new THREE.Vector3,r=new THREE.Vector3;l.sub(p,n);r.sub(m,n);l.crossSelf(r);l.normalize();m=l;k=m.dot(k);if(m.dot(i)>=
k){for(i=0;3>i;i++){k=[j[i],j[(i+1)%3]];m=!0;for(n=0;n<g.length;n++)if(g[n][0]===k[1]&&g[n][1]===k[0]){g[n]=g[g.length-1];g.pop();m=!1;break}m&&g.push(k)}c[h]=c[c.length-1];c.pop()}else h++}for(n=0;n<g.length;n++)c.push([g[n][0],g[n][1],e])}e=0;f=Array(b.length);for(d=0;d<c.length;d++){g=c[d];for(h=0;3>h;h++)void 0===f[g[h]]&&(f[g[h]]=e++,this.vertices.push(b[g[h]])),g[h]=f[g[h]]}for(d=0;d<c.length;d++)this.faces.push(new THREE.Face3(c[d][0],c[d][1],c[d][2]));for(d=0;d<this.faces.length;d++)g=this.faces[d],
this.faceVertexUvs[0].push([a(this.vertices[g.a]),a(this.vertices[g.b]),a(this.vertices[g.c])]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.ConvexGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.AxisHelper=function(b){var a=new THREE.Geometry;a.vertices.push(new THREE.Vector3,new THREE.Vector3(b||1,0,0),new THREE.Vector3,new THREE.Vector3(0,b||1,0),new THREE.Vector3,new THREE.Vector3(0,0,b||1));a.colors.push(new THREE.Color(16711680),new THREE.Color(16755200),new THREE.Color(65280),new THREE.Color(11206400),new THREE.Color(255),new THREE.Color(43775));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,a,b,THREE.LinePieces)};
THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);
THREE.ArrowHelper=function(b,a,c,d){THREE.Object3D.call(this);void 0===d&&(d=16776960);void 0===c&&(c=20);var e=new THREE.Geometry;e.vertices.push(new THREE.Vector3(0,0,0));e.vertices.push(new THREE.Vector3(0,1,0));this.line=new THREE.Line(e,new THREE.LineBasicMaterial({color:d}));this.add(this.line);e=new THREE.CylinderGeometry(0,0.05,0.25,5,1);this.cone=new THREE.Mesh(e,new THREE.MeshBasicMaterial({color:d}));this.cone.position.set(0,1,0);this.add(this.cone);a instanceof THREE.Vector3&&(this.position=
a);this.setDirection(b);this.setLength(c)};THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.setDirection=function(b){var a=(new THREE.Vector3(0,1,0)).crossSelf(b),b=Math.acos((new THREE.Vector3(0,1,0)).dot(b.clone().normalize()));this.matrix=(new THREE.Matrix4).makeRotationAxis(a.normalize(),b);this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder)};THREE.ArrowHelper.prototype.setLength=function(b){this.scale.set(b,b,b)};
THREE.ArrowHelper.prototype.setColor=function(b){this.line.material.color.setHex(b);this.cone.material.color.setHex(b)};
THREE.CameraHelper=function(b){function a(a,b,d){c(a,d);c(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=b.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=
{};a("n1","n2",16755200);a("n2","n4",16755200);a("n4","n3",16755200);a("n3","n1",16755200);a("f1","f2",16755200);a("f2","f4",16755200);a("f4","f3",16755200);a("f3","f1",16755200);a("n1","f1",16755200);a("n2","f2",16755200);a("n3","f3",16755200);a("n4","f4",16755200);a("p","n1",16711680);a("p","n2",16711680);a("p","n3",16711680);a("p","n4",16711680);a("u1","u2",43775);a("u2","u3",43775);a("u3","u1",43775);a("c","t",16777215);a("p","c",3355443);a("cn1","cn2",3355443);a("cn3","cn4",3355443);a("cf1",
"cf2",3355443);a("cf3","cf4",3355443);this.camera=b;this.update(b)};THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){function b(b,d,e,f){THREE.CameraHelper.__v.set(d,e,f);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);b=a.pointMap[b];if(void 0!==b){d=0;for(e=b.length;d<e;d++)a.geometry.vertices[b[d]].copy(THREE.CameraHelper.__v)}}var a=this;THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);b("c",0,0,-1);b("t",0,0,1);b("n1",-1,-1,-1);b("n2",1,-1,-1);b("n3",-1,1,-1);b("n4",1,1,-1);b("f1",-1,-1,1);
b("f2",1,-1,1);b("f3",-1,1,1);b("f4",1,1,1);b("u1",0.7,1.1,-1);b("u2",-0.7,1.1,-1);b("u3",0,2,-1);b("cf1",-1,0,1);b("cf2",1,0,1);b("cf3",0,-1,1);b("cf4",0,1,1);b("cn1",-1,0,-1);b("cn2",1,0,-1);b("cn3",0,-1,-1);b("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;
THREE.DirectionalLightHelper=function(b,a,c){THREE.Object3D.call(this);this.light=b;this.position=b.position;this.direction=new THREE.Vector3;this.direction.sub(b.target.position,b.position);this.color=b.color.clone();var d=THREE.Math.clamp(b.intensity,0,1);this.color.r*=d;this.color.g*=d;this.color.b*=d;var d=this.color.getHex(),e=new THREE.SphereGeometry(a,16,8),f=new THREE.AsteriskGeometry(1.25*a,2.25*a),g=new THREE.MeshBasicMaterial({color:d,fog:!1}),h=new THREE.LineBasicMaterial({color:d,fog:!1});
this.lightArrow=new THREE.ArrowHelper(this.direction,null,c,d);this.lightSphere=new THREE.Mesh(e,g);this.lightArrow.cone.material.fog=!1;this.lightArrow.line.material.fog=!1;this.lightRays=new THREE.Line(f,h,THREE.LinePieces);this.add(this.lightArrow);this.add(this.lightSphere);this.add(this.lightRays);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=b;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;b.target.properties.targetInverse&&(a=new THREE.SphereGeometry(a,
8,4),c=new THREE.MeshBasicMaterial({color:d,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(a,c),this.targetSphere.position=b.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=b.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,b=new THREE.LineDashedMaterial({color:d,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),
d.computeLineDistances(),this.targetLine=new THREE.Line(d,b),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){this.direction.sub(this.light.target.position,this.light.position);this.lightArrow.setDirection(this.direction);this.color.copy(this.light.color);var b=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=b;this.color.g*=b;this.color.b*=b;this.lightArrow.setColor(this.color.getHex());this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.targetSphere.material.color.copy(this.color);this.targetLine.material.color.copy(this.color);
this.targetLine.geometry.vertices[0].copy(this.light.position);this.targetLine.geometry.vertices[1].copy(this.light.target.position);this.targetLine.geometry.computeLineDistances();this.targetLine.geometry.verticesNeedUpdate=!0};
THREE.HemisphereLightHelper=function(b,a,c){THREE.Object3D.call(this);this.light=b;this.position=b.position;var d=THREE.Math.clamp(b.intensity,0,1);this.color=b.color.clone();this.color.r*=d;this.color.g*=d;this.color.b*=d;var e=this.color.getHex();this.groundColor=b.groundColor.clone();this.groundColor.r*=d;this.groundColor.g*=d;this.groundColor.b*=d;for(var d=this.groundColor.getHex(),f=new THREE.SphereGeometry(a,16,8,0,2*Math.PI,0,0.5*Math.PI),g=new THREE.SphereGeometry(a,16,8,0,2*Math.PI,0.5*
Math.PI,Math.PI),h=new THREE.MeshBasicMaterial({color:e,fog:!1}),j=new THREE.MeshBasicMaterial({color:d,fog:!1}),i=0,k=f.faces.length;i<k;i++)f.faces[i].materialIndex=0;i=0;for(k=g.faces.length;i<k;i++)g.faces[i].materialIndex=1;THREE.GeometryUtils.merge(f,g);this.lightSphere=new THREE.Mesh(f,new THREE.MeshFaceMaterial([h,j]));this.lightArrow=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,1.1*(a+c),0),c,e);this.lightArrow.rotation.x=Math.PI;this.lightArrowGround=new THREE.ArrowHelper(new THREE.Vector3(0,
1,0),new THREE.Vector3(0,-1.1*(a+c),0),c,d);a=new THREE.Object3D;a.rotation.x=0.5*-Math.PI;a.add(this.lightSphere);a.add(this.lightArrow);a.add(this.lightArrowGround);this.add(a);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=b;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0;this.target=new THREE.Vector3;this.lookAt(this.target)};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.update=function(){var b=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.groundColor.copy(this.light.groundColor);this.color.r*=b;this.color.g*=b;this.color.b*=b;this.groundColor.r*=b;this.groundColor.g*=b;this.groundColor.b*=b;this.lightSphere.material.materials[0].color.copy(this.color);this.lightSphere.material.materials[1].color.copy(this.groundColor);this.lightArrow.setColor(this.color.getHex());this.lightArrowGround.setColor(this.groundColor.getHex());
this.lookAt(this.target)};
THREE.PointLightHelper=function(b,a){THREE.Object3D.call(this);this.light=b;this.position=b.position;this.color=b.color.clone();var c=THREE.Math.clamp(b.intensity,0,1);this.color.r*=c;this.color.g*=c;this.color.b*=c;var d=this.color.getHex(),c=new THREE.SphereGeometry(a,16,8),e=new THREE.AsteriskGeometry(1.25*a,2.25*a),f=new THREE.IcosahedronGeometry(1,2),g=new THREE.MeshBasicMaterial({color:d,fog:!1}),h=new THREE.LineBasicMaterial({color:d,fog:!1}),d=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,
opacity:0.1,transparent:!0});this.lightSphere=new THREE.Mesh(c,g);this.lightRays=new THREE.Line(e,h,THREE.LinePieces);this.lightDistance=new THREE.Mesh(f,d);c=b.distance;0===c?this.lightDistance.visible=!1:this.lightDistance.scale.set(c,c,c);this.add(this.lightSphere);this.add(this.lightRays);this.add(this.lightDistance);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=b;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0};
THREE.PointLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.PointLightHelper.prototype.update=function(){this.color.copy(this.light.color);var b=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=b;this.color.g*=b;this.color.b*=b;this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightDistance.material.color.copy(this.color);b=this.light.distance;0===b?this.lightDistance.visible=!1:(this.lightDistance.visible=!0,this.lightDistance.scale.set(b,b,b))};
THREE.SpotLightHelper=function(b,a,c){THREE.Object3D.call(this);this.light=b;this.position=b.position;this.direction=new THREE.Vector3;this.direction.sub(b.target.position,b.position);this.color=b.color.clone();var d=THREE.Math.clamp(b.intensity,0,1);this.color.r*=d;this.color.g*=d;this.color.b*=d;var d=this.color.getHex(),e=new THREE.SphereGeometry(a,16,8),f=new THREE.AsteriskGeometry(1.25*a,2.25*a),g=new THREE.CylinderGeometry(1E-4,1,1,8,1,!0),h=new THREE.Matrix4;h.rotateX(-Math.PI/2);h.translate(new THREE.Vector3(0,
-0.5,0));g.applyMatrix(h);var j=new THREE.MeshBasicMaterial({color:d,fog:!1}),h=new THREE.LineBasicMaterial({color:d,fog:!1}),i=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,opacity:0.3,transparent:!0});this.lightArrow=new THREE.ArrowHelper(this.direction,null,c,d);this.lightSphere=new THREE.Mesh(e,j);this.lightCone=new THREE.Mesh(g,i);c=b.distance?b.distance:1E4;e=2*c*Math.tan(0.5*b.angle);this.lightCone.scale.set(e,e,c);this.lightArrow.cone.material.fog=!1;this.lightArrow.line.material.fog=
!1;this.lightRays=new THREE.Line(f,h,THREE.LinePieces);this.gyroscope=new THREE.Gyroscope;this.gyroscope.add(this.lightArrow);this.gyroscope.add(this.lightSphere);this.gyroscope.add(this.lightRays);this.add(this.gyroscope);this.add(this.lightCone);this.lookAt(b.target.position);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=b;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;b.target.properties.targetInverse&&(a=new THREE.SphereGeometry(a,8,4),f=new THREE.MeshBasicMaterial({color:d,
wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(a,f),this.targetSphere.position=b.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=b.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,b=new THREE.LineDashedMaterial({color:d,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),d.computeLineDistances(),this.targetLine=
new THREE.Line(d,b),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){this.direction.sub(this.light.target.position,this.light.position);this.lightArrow.setDirection(this.direction);this.lookAt(this.light.target.position);var b=this.light.distance?this.light.distance:1E4,a=2*b*Math.tan(0.5*this.light.angle);this.lightCone.scale.set(a,a,b);this.color.copy(this.light.color);b=THREE.Math.clamp(this.light.intensity,0,1);this.color.r*=b;this.color.g*=b;this.color.b*=b;this.lightArrow.setColor(this.color.getHex());this.lightSphere.material.color.copy(this.color);
this.lightRays.material.color.copy(this.color);this.lightCone.material.color.copy(this.color);this.targetSphere.material.color.copy(this.color);this.targetLine.material.color.copy(this.color);this.targetLine.geometry.vertices[0].copy(this.light.position);this.targetLine.geometry.vertices[1].copy(this.light.target.position);this.targetLine.geometry.computeLineDistances();this.targetLine.geometry.verticesNeedUpdate=!0};
THREE.SubdivisionModifier=function(b){this.subdivisions=void 0===b?1:b;this.useOldVertexColors=!1;this.supportUVs=!0;this.debug=!1};THREE.SubdivisionModifier.prototype.modify=function(b){for(var a=this.subdivisions;0<a--;)this.smooth(b)};THREE.GeometryUtils.orderedKey=function(b,a){return Math.min(b,a)+"_"+Math.max(b,a)};
THREE.GeometryUtils.computeEdgeFaces=function(b){function a(a,b){void 0===g[a]&&(g[a]=[]);g[a].push(b)}var c,d,e,f,g={},h=THREE.GeometryUtils.orderedKey;c=0;for(d=b.faces.length;c<d;c++)e=b.faces[c],e instanceof THREE.Face3?(f=h(e.a,e.b),a(f,c),f=h(e.b,e.c),a(f,c),f=h(e.c,e.a),a(f,c)):e instanceof THREE.Face4&&(f=h(e.a,e.b),a(f,c),f=h(e.b,e.c),a(f,c),f=h(e.c,e.d),a(f,c),f=h(e.d,e.a),a(f,c));return g};
THREE.SubdivisionModifier.prototype.smooth=function(b){function a(){k.debug&&(console&&console.assert)&&console.assert.apply(console,arguments)}function c(){k.debug&&console.log.apply(console,arguments)}function d(){console&&console.log.apply(console,arguments)}function e(a,b,d,e,g,h,m){var l=new THREE.Face4(a,b,d,e,null,g.color,g.materialIndex);if(k.useOldVertexColors){l.vertexColors=[];for(var n,o,p,q=0;4>q;q++){p=h[q];n=new THREE.Color;n.setRGB(0,0,0);for(var r=0;r<p.length;r++)o=g.vertexColors[p[r]-
1],n.r+=o.r,n.g+=o.g,n.b+=o.b;n.r/=p.length;n.g/=p.length;n.b/=p.length;l.vertexColors[q]=n}}j.push(l);k.supportUVs&&(g=[f(a,""),f(b,m),f(d,m),f(e,m)],g[0]?g[1]?g[2]?g[3]?i.push(g):c("d :( ",e+":"+m):c("c :( ",d+":"+m):c("b :( ",b+":"+m):c("a :( ",a+":"+m))}function f(a,b){var e=a+":"+b,f=v[e];return!f?(a>=r&&a<r+l.length?c("face pt"):c("edge pt"),d("warning, UV not found for",e),null):f}function g(a,b,c){var e=a+":"+b;e in v?d("dup vertexNo",a,"oldFaceNo",b,"value",c,"key",e,v[e]):v[e]=c}var h=[],
j=[],i=[],k=this,m=THREE.GeometryUtils.orderedKey,n=THREE.GeometryUtils.computeEdgeFaces,p=b.vertices,l=b.faces,r=p.length,h=p.concat(),w=[],s={},u={},v={},o,B,x,t,q,C=b.faceVertexUvs[0],y;c("originalFaces, uvs, originalVerticesLength",l.length,C.length,r);if(k.supportUVs){o=0;for(B=C.length;o<B;o++){x=0;for(t=C[o].length;x<t;x++)y=l[o]["abcd".charAt(x)],g(y,o,C[o][x])}}0==C.length&&(k.supportUVs=!1);o=0;for(var D in v)o++;o||(k.supportUVs=!1,c("no uvs"));o=0;for(B=l.length;o<B;o++)q=l[o],w.push(q.centroid),
h.push(q.centroid),k.supportUVs&&(t=new THREE.UV,q instanceof THREE.Face3?(t.u=f(q.a,o).u+f(q.b,o).u+f(q.c,o).u,t.v=f(q.a,o).v+f(q.b,o).v+f(q.c,o).v,t.u/=3,t.v/=3):q instanceof THREE.Face4&&(t.u=f(q.a,o).u+f(q.b,o).u+f(q.c,o).u+f(q.d,o).u,t.v=f(q.a,o).v+f(q.b,o).v+f(q.c,o).v+f(q.d,o).v,t.u/=4,t.v/=4),g(r+o,"",t));var n=n(b),F;B=0;var A,H;D={};C={};for(o in n){y=n[o];A=o.split("_");H=A[0];A=A[1];x=H;q=[H,A];void 0===D[x]&&(D[x]=[]);D[x].push(q);x=A;q=[H,A];void 0===D[x]&&(D[x]=[]);D[x].push(q);x=0;
for(t=y.length;x<t;x++){q=y[x];F=H;var G=q,E=o;void 0===C[F]&&(C[F]={});C[F][G]=E;F=A;G=o;void 0===C[F]&&(C[F]={});C[F][q]=G}2>y.length&&(u[o]=!0)}for(o in n)if(y=n[o],q=y[0],F=y[1],A=o.split("_"),H=A[0],A=A[1],t=new THREE.Vector3,a(0<y.length,"an edge without faces?!"),1==y.length?(t.addSelf(p[H]),t.addSelf(p[A]),t.multiplyScalar(0.5)):(t.addSelf(w[q]),t.addSelf(w[F]),t.addSelf(p[H]),t.addSelf(p[A]),t.multiplyScalar(0.25)),s[o]=r+l.length+B,h.push(t),B++,k.supportUVs)t=new THREE.UV,t.u=f(H,q).u+
f(A,q).u,t.v=f(H,q).v+f(A,q).v,t.u/=2,t.v/=2,g(s[o],q,t),2<=y.length&&(a(2==y.length,"did we plan for more than 2 edges?"),t=new THREE.UV,t.u=f(H,F).u+f(A,F).u,t.v=f(H,F).v+f(A,F).v,t.u/=2,t.v/=2,g(s[o],F,t));c("-- Step 2 done");var J,I;t=["123","12","2","23"];F=["123","23","3","31"];var G=["123","31","1","12"],E=["1234","12","2","23"],L=["1234","23","3","34"],M=["1234","34","4","41"],N=["1234","41","1","12"];o=0;for(B=w.length;o<B;o++)q=l[o],y=r+o,q instanceof THREE.Face3?(H=m(q.a,q.b),A=m(q.b,q.c),
J=m(q.c,q.a),e(y,s[H],q.b,s[A],q,t,o),e(y,s[A],q.c,s[J],q,F,o),e(y,s[J],q.a,s[H],q,G,o)):q instanceof THREE.Face4?(H=m(q.a,q.b),A=m(q.b,q.c),J=m(q.c,q.d),I=m(q.d,q.a),e(y,s[H],q.b,s[A],q,E,o),e(y,s[A],q.c,s[J],q,L,o),e(y,s[J],q.d,s[I],q,M,o),e(y,s[I],q.a,s[H],q,N,o)):c("face should be a face!",q);s=new THREE.Vector3;q=new THREE.Vector3;o=0;for(B=p.length;o<B;o++)if(void 0!==D[o]){s.set(0,0,0);q.set(0,0,0);A=new THREE.Vector3(0,0,0);y=0;for(x in C[o])s.addSelf(w[x]),y++;F=0;H=D[o].length;t=y!=H;for(x=
0;x<H;x++)u[m(D[o][x][0],D[o][x][1])]&&F++;s.divideScalar(y);F=0;if(t){for(x=0;x<H;x++)if(y=D[o][x],G=1==n[m(y[0],y[1])].length)y=p[y[0]].clone().addSelf(p[y[1]]).divideScalar(2),q.addSelf(y),F++;q.divideScalar(4);a(2==F,"should have only 2 boundary edges")}else{for(x=0;x<H;x++)y=D[o][x],y=p[y[0]].clone().addSelf(p[y[1]]).divideScalar(2),q.addSelf(y);q.divideScalar(H)}A.addSelf(p[o]);t?(A.divideScalar(2),A.addSelf(q)):(A.multiplyScalar(H-3),A.addSelf(s),A.addSelf(q.multiplyScalar(2)),A.divideScalar(H));
h[o]=A}b.vertices=h;b.faces=j;b.faceVertexUvs[0]=i;delete b.__tmpVertices;b.computeCentroids();b.computeFaceNormals();b.computeVertexNormals()};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare=function(b,a,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==b&&this.add(b,a,c,d,e)};
THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare.prototype.add=function(b,a,c,d,e,f){void 0===a&&(a=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:b,size:a,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var b,a=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(b=0;b<a;b++)c=this.lensFlares[b],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};
THREE.MorphBlendMesh=function(b,a){THREE.Mesh.call(this,b,a);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.createAnimation=function(b,a,c,d){a={startFrame:a,endFrame:c,length:c-a+1,fps:d,duration:(c-a)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[b]=a;this.animationsList.push(a)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(b){for(var a=/([a-z]+)(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(a);if(h&&1<h.length){var j=h[1];d[j]||(d[j]={start:Infinity,end:-Infinity});h=d[j];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=j)}}for(j in d)h=d[j],this.createAnimation(j,h.start,h.end,b);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(b){if(b=this.animationsMap[b])b.direction=1,b.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(b){if(b=this.animationsMap[b])b.direction=-1,b.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(b,a){var c=this.animationsMap[b];c&&(c.fps=a,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(b,a){var c=this.animationsMap[b];c&&(c.duration=a,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(b,a){var c=this.animationsMap[b];c&&(c.weight=a)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(b,a){var c=this.animationsMap[b];c&&(c.time=a)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(b){var a=0;if(b=this.animationsMap[b])a=b.time;return a};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(b){var a=-1;if(b=this.animationsMap[b])a=b.duration;return a};THREE.MorphBlendMesh.prototype.playAnimation=function(b){var a=this.animationsMap[b];a?(a.time=0,a.active=!0):console.warn("animation["+b+"] undefined")};THREE.MorphBlendMesh.prototype.stopAnimation=function(b){if(b=this.animationsMap[b])b.active=!1};
THREE.MorphBlendMesh.prototype.update=function(b){for(var a=0,c=this.animationsList.length;a<c;a++){var d=this.animationsList[a];if(d.active){var e=d.duration/d.length;d.time+=d.direction*b;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)if(d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time)d.time=0,d.directionBackwards=!1}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};
THREE.LensFlarePlugin=function(){function b(b){var c=a.createProgram(),d=a.createShader(a.FRAGMENT_SHADER),e=a.createShader(a.VERTEX_SHADER);a.shaderSource(d,b.fragmentShader);a.shaderSource(e,b.vertexShader);a.compileShader(d);a.compileShader(e);a.attachShader(c,d);a.attachShader(c,e);a.linkProgram(c);return c}var a,c,d,e,f,g,h,j,i,k,m,n,p;this.init=function(l){a=l.context;c=l;d=new Float32Array(16);e=new Uint16Array(6);l=0;d[l++]=-1;d[l++]=-1;d[l++]=0;d[l++]=0;d[l++]=1;d[l++]=-1;d[l++]=1;d[l++]=
0;d[l++]=1;d[l++]=1;d[l++]=1;d[l++]=1;d[l++]=-1;d[l++]=1;d[l++]=0;d[l++]=1;l=0;e[l++]=0;e[l++]=1;e[l++]=2;e[l++]=0;e[l++]=2;e[l++]=3;f=a.createBuffer();g=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,f);a.bufferData(a.ARRAY_BUFFER,d,a.STATIC_DRAW);a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,g);a.bufferData(a.ELEMENT_ARRAY_BUFFER,e,a.STATIC_DRAW);h=a.createTexture();j=a.createTexture();a.bindTexture(a.TEXTURE_2D,h);a.texImage2D(a.TEXTURE_2D,0,a.RGB,16,16,0,a.RGB,a.UNSIGNED_BYTE,null);a.texParameteri(a.TEXTURE_2D,
a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.NEAREST);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.NEAREST);a.bindTexture(a.TEXTURE_2D,j);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,16,16,0,a.RGBA,a.UNSIGNED_BYTE,null);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.NEAREST);
a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.NEAREST);0>=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(i=!1,k=b(THREE.ShaderFlares.lensFlare)):(i=!0,k=b(THREE.ShaderFlares.lensFlareVertexTexture));m={};n={};m.vertex=a.getAttribLocation(k,"position");m.uv=a.getAttribLocation(k,"uv");n.renderType=a.getUniformLocation(k,"renderType");n.map=a.getUniformLocation(k,"map");n.occlusionMap=a.getUniformLocation(k,"occlusionMap");n.opacity=a.getUniformLocation(k,"opacity");n.color=a.getUniformLocation(k,
"color");n.scale=a.getUniformLocation(k,"scale");n.rotation=a.getUniformLocation(k,"rotation");n.screenPosition=a.getUniformLocation(k,"screenPosition");p=!1};this.render=function(b,d,e,s){var b=b.__webglFlares,u=b.length;if(u){var v=new THREE.Vector3,o=s/e,B=0.5*e,x=0.5*s,t=16/s,q=new THREE.Vector2(t*o,t),C=new THREE.Vector3(1,1,0),y=new THREE.Vector2(1,1),D=n,t=m;a.useProgram(k);p||(a.enableVertexAttribArray(m.vertex),a.enableVertexAttribArray(m.uv),p=!0);a.uniform1i(D.occlusionMap,0);a.uniform1i(D.map,
1);a.bindBuffer(a.ARRAY_BUFFER,f);a.vertexAttribPointer(t.vertex,2,a.FLOAT,!1,16,0);a.vertexAttribPointer(t.uv,2,a.FLOAT,!1,16,8);a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,g);a.disable(a.CULL_FACE);a.depthMask(!1);var F,A,H,G,E;for(F=0;F<u;F++)if(t=16/s,q.set(t*o,t),G=b[F],v.set(G.matrixWorld.elements[12],G.matrixWorld.elements[13],G.matrixWorld.elements[14]),d.matrixWorldInverse.multiplyVector3(v),d.projectionMatrix.multiplyVector3(v),C.copy(v),y.x=C.x*B+B,y.y=C.y*x+x,i||0<y.x&&y.x<e&&0<y.y&&y.y<s){a.activeTexture(a.TEXTURE1);
a.bindTexture(a.TEXTURE_2D,h);a.copyTexImage2D(a.TEXTURE_2D,0,a.RGB,y.x-8,y.y-8,16,16,0);a.uniform1i(D.renderType,0);a.uniform2f(D.scale,q.x,q.y);a.uniform3f(D.screenPosition,C.x,C.y,C.z);a.disable(a.BLEND);a.enable(a.DEPTH_TEST);a.drawElements(a.TRIANGLES,6,a.UNSIGNED_SHORT,0);a.activeTexture(a.TEXTURE0);a.bindTexture(a.TEXTURE_2D,j);a.copyTexImage2D(a.TEXTURE_2D,0,a.RGBA,y.x-8,y.y-8,16,16,0);a.uniform1i(D.renderType,1);a.disable(a.DEPTH_TEST);a.activeTexture(a.TEXTURE1);a.bindTexture(a.TEXTURE_2D,
h);a.drawElements(a.TRIANGLES,6,a.UNSIGNED_SHORT,0);G.positionScreen.copy(C);G.customUpdateCallback?G.customUpdateCallback(G):G.updateLensFlares();a.uniform1i(D.renderType,2);a.enable(a.BLEND);A=0;for(H=G.lensFlares.length;A<H;A++)E=G.lensFlares[A],0.0010<E.opacity&&0.0010<E.scale&&(C.x=E.x,C.y=E.y,C.z=E.z,t=E.size*E.scale/s,q.x=t*o,q.y=t,a.uniform3f(D.screenPosition,C.x,C.y,C.z),a.uniform2f(D.scale,q.x,q.y),a.uniform1f(D.rotation,E.rotation),a.uniform1f(D.opacity,E.opacity),a.uniform3f(D.color,E.color.r,
E.color.g,E.color.b),c.setBlending(E.blending,E.blendEquation,E.blendSrc,E.blendDst),c.setTexture(E.texture,1),a.drawElements(a.TRIANGLES,6,a.UNSIGNED_SHORT,0))}a.enable(a.CULL_FACE);a.enable(a.DEPTH_TEST);a.depthMask(!0)}}};
THREE.ShadowMapPlugin=function(){var b,a,c,d,e,f,g=new THREE.Frustum,h=new THREE.Matrix4,j=new THREE.Vector3,i=new THREE.Vector3;this.init=function(g){b=g.context;a=g;var g=THREE.ShaderLib.depthRGBA,h=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,
vertexShader:g.vertexShader,uniforms:h,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(b,c){a.shadowMapEnabled&&a.shadowMapAutoUpdate&&this.update(b,c)};this.update=function(k,m){var n,p,l,r,w,s,u,v,o,B=[];r=0;b.clearColor(1,1,1,1);b.disable(b.BLEND);b.enable(b.CULL_FACE);b.frontFace(b.CCW);a.shadowMapCullFrontFaces?
b.cullFace(b.FRONT):b.cullFace(b.BACK);a.setDepthTest(!0);n=0;for(p=k.__lights.length;n<p;n++)if(l=k.__lights[n],l.castShadow)if(l instanceof THREE.DirectionalLight&&l.shadowCascade)for(w=0;w<l.shadowCascadeCount;w++){var x;if(l.shadowCascadeArray[w])x=l.shadowCascadeArray[w];else{o=l;u=w;x=new THREE.DirectionalLight;x.isVirtual=!0;x.onlyShadow=!0;x.castShadow=!0;x.shadowCameraNear=o.shadowCameraNear;x.shadowCameraFar=o.shadowCameraFar;x.shadowCameraLeft=o.shadowCameraLeft;x.shadowCameraRight=o.shadowCameraRight;
x.shadowCameraBottom=o.shadowCameraBottom;x.shadowCameraTop=o.shadowCameraTop;x.shadowCameraVisible=o.shadowCameraVisible;x.shadowDarkness=o.shadowDarkness;x.shadowBias=o.shadowCascadeBias[u];x.shadowMapWidth=o.shadowCascadeWidth[u];x.shadowMapHeight=o.shadowCascadeHeight[u];x.pointsWorld=[];x.pointsFrustum=[];v=x.pointsWorld;s=x.pointsFrustum;for(var t=0;8>t;t++)v[t]=new THREE.Vector3,s[t]=new THREE.Vector3;v=o.shadowCascadeNearZ[u];o=o.shadowCascadeFarZ[u];s[0].set(-1,-1,v);s[1].set(1,-1,v);s[2].set(-1,
1,v);s[3].set(1,1,v);s[4].set(-1,-1,o);s[5].set(1,-1,o);s[6].set(-1,1,o);s[7].set(1,1,o);x.originalCamera=m;s=new THREE.Gyroscope;s.position=l.shadowCascadeOffset;s.add(x);s.add(x.target);m.add(s);l.shadowCascadeArray[w]=x;console.log("Created virtualLight",x)}u=l;v=w;o=u.shadowCascadeArray[v];o.position.copy(u.position);o.target.position.copy(u.target.position);o.lookAt(o.target);o.shadowCameraVisible=u.shadowCameraVisible;o.shadowDarkness=u.shadowDarkness;o.shadowBias=u.shadowCascadeBias[v];s=u.shadowCascadeNearZ[v];
u=u.shadowCascadeFarZ[v];o=o.pointsFrustum;o[0].z=s;o[1].z=s;o[2].z=s;o[3].z=s;o[4].z=u;o[5].z=u;o[6].z=u;o[7].z=u;B[r]=x;r++}else B[r]=l,r++;n=0;for(p=B.length;n<p;n++){l=B[n];l.shadowMap||(l.shadowMap=new THREE.WebGLRenderTarget(l.shadowMapWidth,l.shadowMapHeight,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),l.shadowMapSize=new THREE.Vector2(l.shadowMapWidth,l.shadowMapHeight),l.shadowMatrix=new THREE.Matrix4);if(!l.shadowCamera){if(l instanceof THREE.SpotLight)l.shadowCamera=
new THREE.PerspectiveCamera(l.shadowCameraFov,l.shadowMapWidth/l.shadowMapHeight,l.shadowCameraNear,l.shadowCameraFar);else if(l instanceof THREE.DirectionalLight)l.shadowCamera=new THREE.OrthographicCamera(l.shadowCameraLeft,l.shadowCameraRight,l.shadowCameraTop,l.shadowCameraBottom,l.shadowCameraNear,l.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}k.add(l.shadowCamera);a.autoUpdateScene&&k.updateMatrixWorld()}l.shadowCameraVisible&&!l.cameraHelper&&(l.cameraHelper=
new THREE.CameraHelper(l.shadowCamera),l.shadowCamera.add(l.cameraHelper));if(l.isVirtual&&x.originalCamera==m){w=m;r=l.shadowCamera;s=l.pointsFrustum;o=l.pointsWorld;j.set(Infinity,Infinity,Infinity);i.set(-Infinity,-Infinity,-Infinity);for(u=0;8>u;u++)if(v=o[u],v.copy(s[u]),THREE.ShadowMapPlugin.__projector.unprojectVector(v,w),r.matrixWorldInverse.multiplyVector3(v),v.x<j.x&&(j.x=v.x),v.x>i.x&&(i.x=v.x),v.y<j.y&&(j.y=v.y),v.y>i.y&&(i.y=v.y),v.z<j.z&&(j.z=v.z),v.z>i.z)i.z=v.z;r.left=j.x;r.right=
i.x;r.top=i.y;r.bottom=j.y;r.updateProjectionMatrix()}r=l.shadowMap;s=l.shadowMatrix;w=l.shadowCamera;w.position.copy(l.matrixWorld.getPosition());w.lookAt(l.target.matrixWorld.getPosition());w.updateMatrixWorld();w.matrixWorldInverse.getInverse(w.matrixWorld);l.cameraHelper&&(l.cameraHelper.visible=l.shadowCameraVisible);l.shadowCameraVisible&&l.cameraHelper.update();s.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);s.multiplySelf(w.projectionMatrix);s.multiplySelf(w.matrixWorldInverse);w._viewMatrixArray||
(w._viewMatrixArray=new Float32Array(16));w._projectionMatrixArray||(w._projectionMatrixArray=new Float32Array(16));w.matrixWorldInverse.flattenToArray(w._viewMatrixArray);w.projectionMatrix.flattenToArray(w._projectionMatrixArray);h.multiply(w.projectionMatrix,w.matrixWorldInverse);g.setFromMatrix(h);a.setRenderTarget(r);a.clear();o=k.__webglObjects;l=0;for(r=o.length;l<r;l++)if(u=o[l],s=u.object,u.render=!1,s.visible&&s.castShadow&&(!(s instanceof THREE.Mesh||s instanceof THREE.ParticleSystem)||
!s.frustumCulled||g.contains(s)))s._modelViewMatrix.multiply(w.matrixWorldInverse,s.matrixWorld),u.render=!0;l=0;for(r=o.length;l<r;l++)u=o[l],u.render&&(s=u.object,u=u.buffer,t=s.material instanceof THREE.MeshFaceMaterial?s.material.materials[0]:s.material,v=0<s.geometry.morphTargets.length&&t.morphTargets,t=s instanceof THREE.SkinnedMesh&&t.skinning,v=s.customDepthMaterial?s.customDepthMaterial:t?v?f:e:v?d:c,u instanceof THREE.BufferGeometry?a.renderBufferDirect(w,k.__lights,null,v,u,s):a.renderBuffer(w,
k.__lights,null,v,u,s));o=k.__webglObjectsImmediate;l=0;for(r=o.length;l<r;l++)u=o[l],s=u.object,s.visible&&s.castShadow&&(s._modelViewMatrix.multiply(w.matrixWorldInverse,s.matrixWorld),a.renderImmediateObject(w,k.__lights,null,c,s))}n=a.getClearColor();p=a.getClearAlpha();b.clearColor(n.r,n.g,n.b,p);b.enable(b.BLEND);a.shadowMapCullFrontFaces&&b.cullFace(b.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;
THREE.SpritePlugin=function(){function b(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var a,c,d,e,f,g,h,j,i,k;this.init=function(b){a=b.context;c=b;d=new Float32Array(16);e=new Uint16Array(6);b=0;d[b++]=-1;d[b++]=-1;d[b++]=0;d[b++]=0;d[b++]=1;d[b++]=-1;d[b++]=1;d[b++]=0;d[b++]=1;d[b++]=1;d[b++]=1;d[b++]=1;d[b++]=-1;d[b++]=1;d[b++]=0;d[b++]=1;b=0;e[b++]=0;e[b++]=1;e[b++]=2;e[b++]=0;e[b++]=2;e[b++]=3;f=a.createBuffer();g=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,f);a.bufferData(a.ARRAY_BUFFER,d,a.STATIC_DRAW);
a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,g);a.bufferData(a.ELEMENT_ARRAY_BUFFER,e,a.STATIC_DRAW);var b=THREE.ShaderSprite.sprite,n=a.createProgram(),p=a.createShader(a.FRAGMENT_SHADER),l=a.createShader(a.VERTEX_SHADER);a.shaderSource(p,b.fragmentShader);a.shaderSource(l,b.vertexShader);a.compileShader(p);a.compileShader(l);a.attachShader(n,p);a.attachShader(n,l);a.linkProgram(n);h=n;j={};i={};j.position=a.getAttribLocation(h,"position");j.uv=a.getAttribLocation(h,"uv");i.uvOffset=a.getUniformLocation(h,
"uvOffset");i.uvScale=a.getUniformLocation(h,"uvScale");i.rotation=a.getUniformLocation(h,"rotation");i.scale=a.getUniformLocation(h,"scale");i.alignment=a.getUniformLocation(h,"alignment");i.color=a.getUniformLocation(h,"color");i.map=a.getUniformLocation(h,"map");i.opacity=a.getUniformLocation(h,"opacity");i.useScreenCoordinates=a.getUniformLocation(h,"useScreenCoordinates");i.affectedByDistance=a.getUniformLocation(h,"affectedByDistance");i.screenPosition=a.getUniformLocation(h,"screenPosition");
i.modelViewMatrix=a.getUniformLocation(h,"modelViewMatrix");i.projectionMatrix=a.getUniformLocation(h,"projectionMatrix");i.fogType=a.getUniformLocation(h,"fogType");i.fogDensity=a.getUniformLocation(h,"fogDensity");i.fogNear=a.getUniformLocation(h,"fogNear");i.fogFar=a.getUniformLocation(h,"fogFar");i.fogColor=a.getUniformLocation(h,"fogColor");k=!1};this.render=function(d,e,p,l){var r=d.__webglSprites,w=r.length;if(w){var s=j,u=i,v=l/p,p=0.5*p,o=0.5*l,B=!0;a.useProgram(h);k||(a.enableVertexAttribArray(s.position),
a.enableVertexAttribArray(s.uv),k=!0);a.disable(a.CULL_FACE);a.enable(a.BLEND);a.depthMask(!0);a.bindBuffer(a.ARRAY_BUFFER,f);a.vertexAttribPointer(s.position,2,a.FLOAT,!1,16,0);a.vertexAttribPointer(s.uv,2,a.FLOAT,!1,16,8);a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,g);a.uniformMatrix4fv(u.projectionMatrix,!1,e._projectionMatrixArray);a.activeTexture(a.TEXTURE0);a.uniform1i(u.map,0);var x=s=0,t=d.fog;t?(a.uniform3f(u.fogColor,t.color.r,t.color.g,t.color.b),t instanceof THREE.Fog?(a.uniform1f(u.fogNear,t.near),
a.uniform1f(u.fogFar,t.far),a.uniform1i(u.fogType,1),x=s=1):t instanceof THREE.FogExp2&&(a.uniform1f(u.fogDensity,t.density),a.uniform1i(u.fogType,2),x=s=2)):(a.uniform1i(u.fogType,0),x=s=0);for(var q,C=[],t=0;t<w;t++)q=r[t],q.visible&&0!==q.opacity&&(q.useScreenCoordinates?q.z=-q.position.z:(q._modelViewMatrix.multiply(e.matrixWorldInverse,q.matrixWorld),q.z=-q._modelViewMatrix.elements[14]));r.sort(b);for(t=0;t<w;t++)if(q=r[t],q.visible&&0!==q.opacity&&q.map&&q.map.image&&q.map.image.width)q.useScreenCoordinates?
(a.uniform1i(u.useScreenCoordinates,1),a.uniform3f(u.screenPosition,(q.position.x-p)/p,(o-q.position.y)/o,Math.max(0,Math.min(1,q.position.z)))):(a.uniform1i(u.useScreenCoordinates,0),a.uniform1i(u.affectedByDistance,q.affectedByDistance?1:0),a.uniformMatrix4fv(u.modelViewMatrix,!1,q._modelViewMatrix.elements)),e=d.fog&&q.fog?x:0,s!==e&&(a.uniform1i(u.fogType,e),s=e),e=1/(q.scaleByViewport?l:1),C[0]=e*v*q.scale.x,C[1]=e*q.scale.y,a.uniform2f(u.uvScale,q.uvScale.x,q.uvScale.y),a.uniform2f(u.uvOffset,
q.uvOffset.x,q.uvOffset.y),a.uniform2f(u.alignment,q.alignment.x,q.alignment.y),a.uniform1f(u.opacity,q.opacity),a.uniform3f(u.color,q.color.r,q.color.g,q.color.b),a.uniform1f(u.rotation,q.rotation),a.uniform2fv(u.scale,C),q.mergeWith3D&&!B?(a.enable(a.DEPTH_TEST),B=!0):!q.mergeWith3D&&B&&(a.disable(a.DEPTH_TEST),B=!1),c.setBlending(q.blending,q.blendEquation,q.blendSrc,q.blendDst),c.setTexture(q.map,0),a.drawElements(a.TRIANGLES,6,a.UNSIGNED_SHORT,0);a.enable(a.CULL_FACE);a.enable(a.DEPTH_TEST);
a.depthMask(!0)}}};
THREE.DepthPassPlugin=function(){this.enabled=!1;this.renderTarget=null;var b,a,c,d,e,f,g=new THREE.Frustum,h=new THREE.Matrix4;this.init=function(g){b=g.context;a=g;var g=THREE.ShaderLib.depthRGBA,h=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,
uniforms:h,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,b){this.enabled&&this.update(a,b)};this.update=function(j,i){var k,m,n,p,l,r;b.clearColor(1,1,1,1);b.disable(b.BLEND);a.setDepthTest(!0);a.autoUpdateScene&&j.updateMatrixWorld();i._viewMatrixArray||(i._viewMatrixArray=new Float32Array(16));i._projectionMatrixArray||
(i._projectionMatrixArray=new Float32Array(16));i.matrixWorldInverse.getInverse(i.matrixWorld);i.matrixWorldInverse.flattenToArray(i._viewMatrixArray);i.projectionMatrix.flattenToArray(i._projectionMatrixArray);h.multiply(i.projectionMatrix,i.matrixWorldInverse);g.setFromMatrix(h);a.setRenderTarget(this.renderTarget);a.clear();r=j.__webglObjects;k=0;for(m=r.length;k<m;k++)if(n=r[k],l=n.object,n.render=!1,l.visible&&(!(l instanceof THREE.Mesh||l instanceof THREE.ParticleSystem)||!l.frustumCulled||
g.contains(l)))l._modelViewMatrix.multiply(i.matrixWorldInverse,l.matrixWorld),n.render=!0;var w;k=0;for(m=r.length;k<m;k++)if(n=r[k],n.render&&(l=n.object,n=n.buffer,!(l instanceof THREE.ParticleSystem)||l.customDepthMaterial))(w=l.material instanceof THREE.MeshFaceMaterial?l.material.materials[0]:l.material)&&a.setMaterialFaces(l.material),p=0<l.geometry.morphTargets.length&&w.morphTargets,w=l instanceof THREE.SkinnedMesh&&w.skinning,p=l.customDepthMaterial?l.customDepthMaterial:w?p?f:e:p?d:c,n instanceof
THREE.BufferGeometry?a.renderBufferDirect(i,j.__lights,null,p,n,l):a.renderBuffer(i,j.__lights,null,p,n,l);r=j.__webglObjectsImmediate;k=0;for(m=r.length;k<m;k++)n=r[k],l=n.object,l.visible&&(l._modelViewMatrix.multiply(i.matrixWorldInverse,l.matrixWorld),a.renderImmediateObject(i,j.__lights,null,c,l));k=a.getClearColor();m=a.getClearAlpha();b.clearColor(k.r,k.g,k.b,m);b.enable(b.BLEND)}};
THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
lensFlare:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};
THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
